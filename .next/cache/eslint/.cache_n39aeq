[{"/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/cart.js":"1","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/done.js":"2","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/gender.js":"3","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/index.js":"4","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/jisajili.js":"5","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/login.js":"6","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/mpesa.js":"7","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/order.js":"8","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/output.js":"9","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/preview.js":"10","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/products.js":"11","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/profile.js":"12","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/register.js":"13","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/reset.js":"14","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/resetConfirm.js":"15","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/showRoom.js":"16","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/tigopesa.js":"17","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/components/NavBar.js":"18","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/components/NavBar2.js":"19","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/components/NavBar3.js":"20","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/components/Sign.js":"21","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/_app.js":"22"},{"size":116670,"mtime":1666783241874,"results":"23","hashOfConfig":"24"},{"size":66082,"mtime":1665229832000,"results":"25","hashOfConfig":"24"},{"size":79739,"mtime":1665229999320,"results":"26","hashOfConfig":"24"},{"size":140705,"mtime":1665241721552,"results":"27","hashOfConfig":"24"},{"size":13499,"mtime":1665241788956,"results":"28","hashOfConfig":"24"},{"size":10401,"mtime":1665245736672,"results":"29","hashOfConfig":"24"},{"size":16776,"mtime":1665241882388,"results":"30","hashOfConfig":"24"},{"size":23505,"mtime":1665242005536,"results":"31","hashOfConfig":"24"},{"size":79171,"mtime":1665242343996,"results":"32","hashOfConfig":"24"},{"size":70725,"mtime":1665242515472,"results":"33","hashOfConfig":"24"},{"size":60484,"mtime":1665242694856,"results":"34","hashOfConfig":"24"},{"size":42437,"mtime":1665242832076,"results":"35","hashOfConfig":"24"},{"size":14584,"mtime":1665242938816,"results":"36","hashOfConfig":"24"},{"size":18321,"mtime":1665242977164,"results":"37","hashOfConfig":"24"},{"size":20718,"mtime":1664215720521,"results":"38","hashOfConfig":"24"},{"size":88781,"mtime":1665243264440,"results":"39","hashOfConfig":"24"},{"size":17105,"mtime":1665243338220,"results":"40","hashOfConfig":"24"},{"size":127534,"mtime":1666793730790,"results":"41","hashOfConfig":"24"},{"size":64401,"mtime":1665229251424,"results":"42","hashOfConfig":"24"},{"size":122724,"mtime":1665229492536,"results":"43","hashOfConfig":"24"},{"size":11388,"mtime":1665229581652,"results":"44","hashOfConfig":"24"},{"size":399,"mtime":1666786269486,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},"6eilku",{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":1,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":1,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":1,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":10,"source":null},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":10,"source":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":10,"source":"122"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},"/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/cart.js",["131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157"],[],"import React, { Component } from \"react\";\nimport styles from \"../static/css/cart.module.css\";\nimport {\n  Header,\n  Icon,\n  Button,\n  Grid,\n} from \"semantic-ui-react\";\nimport Head from \"next/head\";\nimport jwt_decode from \"jwt-decode\";\nimport Router from \"next/router\";\nimport dynamic from \"next/dynamic\";\nimport { LEFT } from \"react-swipeable\";\nimport BACKEND_ORIGIN from \"../utils/domain\";\n\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n\nclass Cart extends Component {\n  state = {\n    isAunthenticated: false,\n    cartproducts: [],\n    user_id: 0,\n    net_price: 0,\n    net_quantity: 0,\n  };\n\n  fetchSomeCartProduct = async () => {\n    // If user has not login then say to him/her u need to login\n    // to view cartproducts..\n    try {\n      const tokens = localStorage.getItem(\"authTokens\")\n        ? JSON.parse(localStorage.getItem(\"authTokens\"))\n        : null;\n\n      if (!tokens) {\n        // But we should tell if he purchased something he should login to view cart..\n        // kikuu kama usipologin wanakwambia tu oya cart ni empty.. But uki-login ndo\n        // unaliona carti... so nahisi tufanye kama kikuu....\n        console.log(\"He is not loged in so by default cart is empty\");\n      }\n\n      const decodedRefreshToken = jwt_decode(tokens.refresh);\n      const expireRefreshTime = decodedRefreshToken.exp;\n      console.log(\"Hey this is the expire date of the refreshToken\");\n      console.log(expireRefreshTime);\n      console.log(\"Lets try to access the json access token\");\n      console.log(tokens.access);\n      const decodedAccessData = jwt_decode(tokens.access);\n      const user = decodedAccessData.user_id;\n      this.setState({\n        user_id: user,\n      });\n      console.log(\"This is expiring time for you...\");\n      console.log(decodedAccessData);\n      const expireAccessTime = decodedAccessData.exp;\n      console.log(expireAccessTime);\n      const diff = expireAccessTime * 1000 - Date.now();\n\n      if (diff < 1) {\n        console.log(\"Hey we need to either update or make user login again\");\n        if (expireRefreshTime * 1000 - Date.now < 1) {\n          console.log(\n            \"Even ur refresh token has already been expired we need you to login again....\"\n          );\n          this.setState({\n            isAunthenticated: false,\n          });\n          return;\n        }\n        console.log(\n          \"Our refresh token is alive you should use it to update your access token\"\n        );\n\n        this.updateToken(tokens.refresh);\n\n        this.setState({\n          isAunthenticated: true,\n          user_id: user,\n        });\n      } else {\n        this.setState({\n          isAunthenticated: true,\n          user_id: user,\n        });\n      }\n\n      // Mpaka inafika hapa ujue user amekuwa aunthenticated...\n      // so now user has logged in you need to fetch cart from the backend\n\n      let check = await fetch(`${BACKEND_ORIGIN}/api/cartproducts/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          id: user,\n        }),\n      });\n\n      console.log(\"THIS IS THE FETCHED CART BY THIS USER..\");\n\n      let output = await check.json();\n      console.log(output);\n\n      if (output.message) {\n        // then here there is no any cart or cartproducts associated by that user\n        return;\n      }\n\n      if (output.length < 1) {\n        // then user has cart but has no any cartproduct added to that cart\n        // Then user cart is empty...\n        return;\n      }\n\n      // from all product count down quantity to display them...\n      // at this point user cart has something, so assign it to cartproducts\n      // state\n      let net_quantity = 0;\n      let net_price = 0;\n      for (let out of output) {\n        net_quantity = out.quantity + net_quantity;\n        net_price = out.subTotal + net_price;\n      }\n\n      this.setState({\n        cartproducts: output.reverse(),\n        net_price: net_price,\n        net_quantity: net_quantity,\n      });\n\n      console.log(\n        \"The user at this point has cart associated and this is the one\"\n      );\n      console.log(this.state.cartproducts);\n      console.log(output);\n    } catch (InvalidTokenError) {\n      console.log(InvalidTokenError.message);\n      console.log(\n        \"Invalid token specified since, when the token is expired the jwt automatically change your storage and it ill look like this\"\n      );\n      // authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n      this.setState({\n        isAunthenticated: false,\n      });\n    }\n  };\n\n  onIncrease = async (e) => {\n    // Hapa inabidi nipost kwa server. Ko inabid niwe na endpoint ya ku-increase the\n    // quantity of the cartproduct ordered on the server.. What required for this endpoint\n    // is to pass the \"id\" of cart product... And update then update both the amount/quantity\n    // and the 'price'---- nitazi-update vipi hapo ndo bado cina jibu...\n    // coz ili ziwe updated endapo tunategemea server inabid tu-send request to the server or\n    // we should 'setInterval()' method which run everytime which is not good... Or here what to\n    // do it after update we should update the state of cartproducts...\n    // coz all data are referred from it.... oooh i dont know what to do...\n    e.preventDefault();\n    console.log(e.target.id);\n\n    // then u need to send this id then from it will return to you new serialized cp and then update\n    // cartproducts state which is qs of all cp of that user... So nahisi\n    // pia hapa kuna umuhimu pia wa ku-send user_id...\n\n    let response = await fetch(`${BACKEND_ORIGIN}/api/cp_increase/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        cpid: parseInt(e.target.id),\n        user_id: this.state.user_id,\n      }),\n    });\n\n    let data = await response.json();\n\n    console.log(\"This is new updated data after updating..\");\n    console.log(data);\n\n    let net_quantity = 0;\n    let net_price = 0;\n    for (let out of data) {\n      net_quantity = out.quantity + net_quantity;\n      net_price = out.subTotal + net_price;\n    }\n\n    this.setState({\n      cartproducts: data.reverse(),\n      net_price: net_price,\n      net_quantity: net_quantity,\n    });\n  };\n\n  onDecrease = async (e) => {\n    // We dont send the request to the server if the current product_quantity is 1\n    // decrease from 1 to zero means the cp is deleted which can achieved on 'Remove'\n    // button we displayed it to the user...\n    e.preventDefault();\n    console.log(e.target.id);\n    console.log(e.target.name);\n    console.log(e.target.title);\n\n    // there in some interface i user semantic ui icons\n    // and these icons enabled by semantic have built in\n    // name attribute which u will use to tell it a name\n    // of icon to load in ur interface so for these interface\n    // there is no way to pass the quantity of product through\n    // the 'name' attribute so instead of using name attribute\n    // i use 'title' attribute and it seem to work\n    // Hii e.target.name ni flag ya ku-detect if the quantity is now 1 in order\n    // to not count below 1\n    if (parseInt(e.target.name) > 1 || parseInt(e.target.title) > 1) {\n      let response = await fetch(`${BACKEND_ORIGIN}/api/cp_decrease/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          cpid: parseInt(e.target.id),\n          user_id: this.state.user_id,\n        }),\n      });\n\n      let data = await response.json();\n\n      console.log(\"This is new updated data after updating..\");\n      console.log(data);\n\n      let net_quantity = 0;\n      let net_price = 0;\n      for (let out of data) {\n        net_quantity = out.quantity + net_quantity;\n        net_price = out.subTotal + net_price;\n      }\n\n      this.setState({\n        cartproducts: data.reverse(),\n        net_price: net_price,\n        net_quantity: net_quantity,\n      });\n    } else {\n      console.log(\"Limit, I cant breath\");\n    }\n  };\n\n  onRemove = async (e) => {\n    e.preventDefault();\n    console.log(e.target.name);\n    // In my cart interface of mobile phone and tablet we used\n    // a div element and div element does not accept the 'name'\n    // according to this article.. https://stackoverflow.com/questions/4962070/attribute-name-not-allowed-on-element-div-at-this-point\n    // so what i did here since the id of product is required here we use\n    // id attribute which exist in div to pass that id of cartproduct..\n    // in other interface of pc based or large one I used a 'name' attribute\n    // and worked in button I think .. So we should check down\n    // in post request because some will pass that product id either by\n    // name or id attribute...\n    console.log(e.target.id);\n    // Here what we need to do is send both user_id and the cp_id to\n    // delete from the cart....\n\n    let response = await fetch(`${BACKEND_ORIGIN}/api/cp_remove/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        cpid: e.target.name ? parseInt(e.target.name) : parseInt(e.target.id),\n        user_id: this.state.user_id,\n      }),\n    });\n\n    let data = await response.json();\n    let net_quantity = 0;\n    let net_price = 0;\n    for (let out of data) {\n      net_quantity = out.quantity + net_quantity;\n      net_price = out.subTotal + net_price;\n    }\n\n    this.setState({\n      cartproducts: data.reverse(),\n      net_price: net_price,\n      net_quantity: net_quantity,\n    });\n  };\n\n  clearCart = async (e) => {\n    e.preventDefault();\n    console.log(this.state.user_id);\n\n    const response = await fetch(`${BACKEND_ORIGIN}/api/flash_cart/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user_id: this.state.user_id,\n      }),\n    });\n\n    const data = await response.json();\n\n    console.log(data);\n\n    if (data.message) {\n      console.log(\"The cart has been cleared...\");\n      // now we should update the cartproducts state to be zero..\n      this.setState({\n        cartproducts: 0,\n      });\n    } else {\n      console.log(\"Hey something went wrong...\");\n    }\n  };\n\n  updateToken = async (refreshToken) => {\n    let response = await fetch(`${BACKEND_ORIGIN}/api/token/refresh/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ refresh: refreshToken }),\n    });\n\n    let data = await response.json();\n    localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  };\n\n  componentDidMount() {\n    this.fetchSomeCartProduct();\n  }\n\n  // Mimi nimechagua kwenye hii carti nisiwe na navBar.. Coz navbar ina require vitu vingi\n  // na kuna logic zinarun on the background for example those to check if the user\n  // is aunthenticated and the one to check if the user has cart.. By default when user\n  // click to view a cart he should be aunthenticated if not authenticated it should display\n  // an empty cart... As there is no records....\n  render() {\n    return (\n      <div className={styles.bd}>\n        <div>\n          <Head>\n            <title>MiwaniPambe Tz</title>\n            <link\n              rel=\"stylesheet\"\n              href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n              integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n              crossorigin=\"anonymous\"\n            />\n            <link\n              rel=\"stylesheet\"\n              href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n            ></link>\n          </Head>\n          <div>\n            {this.state.isAunthenticated ? (\n              this.state.cartproducts.length > 0 ? (\n                <>\n                  <MediaQuery minWidth={200} maxWidth={400}>\n                    <div className={styles.flexOne}>\n                      {/* <img src='../static/images/paragraph.png' width={18} height={18} /> */}\n                      <img\n                        src=\"../static/images/home.png\"\n                        width={22}\n                        height={22}\n                        title=\"Home\"\n                        onClick={() => Router.push({ pathname: \"/\" })}\n                        style={{ cursor: \"pointer\" }}\n                      />\n                      <span className={styles.mHeader}>MY CART</span>\n                      <img\n                        src=\"../static/images/bin.png\"\n                        width={18}\n                        height={18}\n                        title=\"clear cart\"\n                        onClick={this.clearCart}\n                        style={{ cursor: \"pointer\" }}\n                      />\n                    </div>\n                    <hr className={styles.h} />\n                    <div className={styles.sec}>\n                      {/* Hapa inabidi nitengeneze kitu kama card.. */}\n\n                      <>\n                        {this.state.cartproducts.map((product) => (\n                          <div\n                            className={styles.behaveLikeCard}\n                            key={product.id}\n                          >\n                            <div className={styles.conte}>\n                              <img\n                                src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                                width={65}\n                                height={60}\n                                className={styles.proImg}\n                              />\n                              <div className={styles.explain} style={{top: '15%'}}>\n                                <p className={styles.bich}>\n                                  {product.get_title.length > 10\n                                    ? product.get_title.substr(0, 10) + \"...\"\n                                    : product.get_title}\n                                </p>\n                                <span className={styles.mpunga}>\n                                  {`${new Intl.NumberFormat(\"en-US\", {\n                                    style: \"currency\",\n                                    currency: \"Tsh\",\n                                    minimumFractionDigits: 0,\n                                  }).format(parseInt(product.subTotal))}`}\n                                </span>\n                                {product.selectedPropertyValue ? (\n                                  <p className={styles.props} style={{\n                                    marginBottom: '0%',\n                                    paddingBottom: '0%'\n                                  }}>\n                                    {product.get_prop}:{\" \"}\n                                    {product.selectedPropertyValue.length > 13\n                                      ? product.selectedPropertyValue.substr(\n                                        0, \n                                        12\n                                      ) + '...'\n                                      : product.selectedPropertyValue}\n                                  </p>\n                                ) : (\n                                  <></>\n                                )}\n\n{product.selectedSecondPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_secondProp} :{\" \"}\n                                      {product.selectedSecondPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.customization.length > 0 ? (\n                                    <p\n                                      className={styles.props}\n                                      styles={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                      }}\n                                    >\n                                      Note:{\" \"}\n                                      {product.customization.substr(0, 12) +\n                                        \"...\"}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n                              </div>\n\n                              <div className={styles.quantity}>\n                                <p className={styles.qua}>\n                                  Quantity:{\" \"}\n                                  <span className={styles.namba}>\n                                    {product.quantity}\n                                  </span>\n                                </p>\n                                <div className={styles.amountWrapper}>\n                                  <span\n                                    className={styles.plus}\n                                    onClick={this.onDecrease}\n                                    id={product.id}\n                                    title={product.quantity}\n                                  >\n                                    <Icon\n                                      size=\"small\"\n                                      name=\"minus\"\n                                      id={product.id}\n                                      title={product.quantity}\n                                    />\n                                  </span>\n                                  <span className={styles.actualAmount}>\n                                    {product.quantity}\n                                  </span>\n                                  <span\n                                    className={styles.minus}\n                                    id={product.id}\n                                    onClick={this.onIncrease}\n                                  >\n                                    <Icon\n                                      size=\"small\"\n                                      name=\"plus\"\n                                      id={product.id}\n                                    />\n                                  </span>\n                                </div>\n                              </div>\n\n                              <div\n                                className={styles.close}\n                                name={product.id}\n                                id={product.id}\n                                onClick={this.onRemove}\n                              >\n                                Remove\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </>\n                    </div>\n\n                    <div\n                      className={styles.checkout}\n                      style={{ background: \"#b8ffd3\" }}\n                    >\n                      <div className={styles.row1}>\n                        <p className={styles.tt}>Total:</p>\n                        <p className={styles.tvalue}>\n                          {`${new Intl.NumberFormat(\"en-US\", {\n                            style: \"currency\",\n                            currency: \"Tsh\",\n                            minimumFractionDigits: 0,\n                          }).format(parseInt(this.state.net_price))}`}\n                        </p>\n\n                        <button\n                          className={styles.checkBtn}\n                          onClick={() => Router.push({ pathname: \"/order\" })}\n                        >\n                          Checkout\n                          <img\n                            style={{ marginLeft: \"5px\" }}\n                            src=\"../static/images/right-arrow.png\"\n                            width={10}\n                            height={10}\n                          />\n                        </button>\n                      </div>\n                    </div>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={401} maxWidth={576}>\n                    <div className={styles.flexOne}>\n                      {/* <img src='../static/images/paragraph.png' width={18} height={18} /> */}\n                      <img\n                        src=\"../static/images/home.png\"\n                        width={22}\n                        height={22}\n                        title=\"Home\"\n                        onClick={() => Router.push({ pathname: \"/\" })}\n                        style={{ cursor: \"pointer\" }}\n                      />\n                      <span className={styles.mHeader}>MY CART</span>\n                      <img\n                        src=\"../static/images/bin.png\"\n                        width={18}\n                        height={18}\n                        title=\"clear cart\"\n                        onClick={this.clearCart}\n                        style={{ cursor: \"pointer\" }}\n                      />\n                    </div>\n                    <hr className={styles.h} />\n                    <div className={styles.sec}>\n                      {/* Hapa inabidi nitengeneze kitu kama card.. */}\n                      <>\n                        {this.state.cartproducts.map((product) => (\n                          <div\n                            className={styles.behaveLikeCard}\n                            key={product.id}\n                          >\n                            <div\n                              className={styles.conte}\n                              style={{ paddingTop: \"0%\" }}\n                            >\n                              <MediaQuery maxWidth={450}>\n                                <img\n                                  src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                                  width={75}\n                                  height={70}\n                                  className={styles.proImg}\n                                />\n                              </MediaQuery>\n                              <MediaQuery minWidth={451}>\n                                <img\n                                  src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                                  width={90}\n                                  height={80}\n                                  className={styles.proImg}\n                                />\n                              </MediaQuery>\n\n                              <MediaQuery maxWidth={450}>\n                                <div\n                                  className={styles.explain}\n                                  style={{ top: \"5%\" }}\n                                >\n                                  <p className={styles.bich}>\n                                    {product.get_title.length > 12\n                                      ? product.get_title.substr(0, 12) + \"...\"\n                                      : product.get_title}\n                                  </p>\n                                  <span className={styles.mpunga}>\n                                    {`${new Intl.NumberFormat(\"en-US\", {\n                                      style: \"currency\",\n                                      currency: \"Tsh\",\n                                      minimumFractionDigits: 0,\n                                    }).format(parseInt(product.subTotal))}`}\n                                  </span>\n                                  {product.selectedPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_prop} :\n                                      {product.selectedPropertyValue.length > 10\n                                        ? product.selectedPropertyValue.substr(\n                                            0,\n                                            10\n                                          ) + \"...\"\n                                        : product.selectedPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n                                  {product.selectedSecondPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_secondProp} :{\" \"}\n                                      {product.selectedSecondPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.customization.length > 0 ? (\n                                    <p\n                                      className={styles.props}\n                                      styles={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                      }}\n                                    >\n                                      Note:{\" \"}\n                                      {product.customization.substr(0, 12) +\n                                        \"...\"}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n                                </div>\n                              </MediaQuery>\n                              <MediaQuery minWidth={451} maxWidth={500}>\n                                <div\n                                  className={styles.explain}\n                                  style={{ left: \"25%\", top: \"6%\" }}\n                                >\n                                  <p className={styles.bich}>\n                                    {product.get_title.length > 13\n                                      ? product.get_title.substr(0, 12) + \"...\"\n                                      : product.get_title}\n                                  </p>\n                                  <span className={styles.mpunga}>\n                                    {`${new Intl.NumberFormat(\"en-US\", {\n                                      style: \"currency\",\n                                      currency: \"Tsh\",\n                                      minimumFractionDigits: 0,\n                                    }).format(parseInt(product.subTotal))}`}\n                                  </span>\n                                  {product.selectedPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_prop} :\n                                      {product.selectedPropertyValue.length > 12\n                                        ? product.selectedPropertyValue.substr(\n                                            0,\n                                            10\n                                          ) + \"...\"\n                                        : product.selectedPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.selectedSecondPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_secondProp} :{\" \"}\n                                      {product.selectedSecondPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.customization.length > 0 ? (\n                                    <p\n                                      className={styles.props}\n                                      styles={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                      }}\n                                    >\n                                      Note:{\" \"}\n                                      {product.customization.substr(0, 12) +\n                                        \"...\"}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n                                </div>\n                              </MediaQuery>\n\n                              <MediaQuery minWidth={501}>\n                                <div\n                                  className={styles.explain}\n                                  style={{ left: \"22.5%\", top: \"8%\" }}\n                                >\n                                  <p className={styles.bich}>\n                                    {product.get_title.length > 13\n                                      ? product.get_title.substr(0, 12) + \"...\"\n                                      : product.get_title}\n                                  </p>\n                                  <span className={styles.mpunga}>\n                                    {`${new Intl.NumberFormat(\"en-US\", {\n                                      style: \"currency\",\n                                      currency: \"Tsh\",\n                                      minimumFractionDigits: 0,\n                                    }).format(parseInt(product.subTotal))}`}\n                                  </span>\n                                  {product.selectedPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_prop} :\n                                      {product.selectedPropertyValue.length > 12\n                                        ? product.selectedPropertyValue.substr(\n                                            0,\n                                            10\n                                          ) + \"...\"\n                                        : product.selectedPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.selectedSecondPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_secondProp} :{\" \"}\n                                      {product.selectedSecondPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.customization.length > 0 ? (\n                                    <p\n                                      className={styles.props}\n                                      styles={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                      }}\n                                    >\n                                      Note:{\" \"}\n                                      {product.customization.substr(0, 12) +\n                                        \"...\"}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n                                </div>\n                              </MediaQuery>\n\n                              <MediaQuery minWidth={401} maxWidth={450}>\n                                <div\n                                  className={styles.quantity}\n                                  style={{ left: \"60%\", top: \"18%\" }}\n                                >\n                                  <p className={styles.qua}>\n                                    Quantity:{\" \"}\n                                    <span className={styles.namba}>\n                                      {product.quantity}\n                                    </span>\n                                  </p>\n                                  <div className={styles.amountWrapper}>\n                                    <span\n                                      className={styles.plus}\n                                      id={product.id}\n                                      title={product.quantity}\n                                      onClick={this.onDecrease}\n                                    >\n                                      <Icon\n                                        size=\"small\"\n                                        name=\"minus\"\n                                        id={product.id}\n                                        title={product.quantity}\n                                      />\n                                    </span>\n                                    <span className={styles.actualAmount}>\n                                      {product.quantity}\n                                    </span>\n                                    <span\n                                      className={styles.minus}\n                                      id={product.id}\n                                      onClick={this.onIncrease}\n                                    >\n                                      <Icon\n                                        size=\"small\"\n                                        name=\"plus\"\n                                        id={product.id}\n                                      />\n                                    </span>\n                                  </div>\n                                </div>\n                              </MediaQuery>\n\n                              <MediaQuery minWidth={451} maxWidth={500}>\n                                <div\n                                  className={styles.quantity}\n                                  style={{ left: \"60%\", top: \"20%\" }}\n                                >\n                                  <p className={styles.qua}>\n                                    Quantity:{\" \"}\n                                    <span className={styles.namba}>\n                                      {product.quantity}\n                                    </span>\n                                  </p>\n                                  <div className={styles.amountWrapper}>\n                                    <span\n                                      className={styles.plus}\n                                      id={product.id}\n                                      title={product.quantity}\n                                      onClick={this.onDecrease}\n                                    >\n                                      <Icon\n                                        size=\"small\"\n                                        name=\"minus\"\n                                        id={product.id}\n                                        title={product.quantity}\n                                      />\n                                    </span>\n                                    <span className={styles.actualAmount}>\n                                      {product.quantity}\n                                    </span>\n                                    <span\n                                      className={styles.minus}\n                                      id={product.id}\n                                      onClick={this.onIncrease}\n                                    >\n                                      <Icon\n                                        size=\"small\"\n                                        name=\"plus\"\n                                        id={product.id}\n                                      />\n                                    </span>\n                                  </div>\n                                </div>\n                              </MediaQuery>\n\n                              <MediaQuery minWidth={501}>\n                                <div\n                                  className={styles.quantity}\n                                  style={{ left: \"55%\", top: \"22%\" }}\n                                >\n                                  <p className={styles.qua}>\n                                    Quantity:{\" \"}\n                                    <span className={styles.namba}>\n                                      {product.quantity}\n                                    </span>\n                                  </p>\n                                  <div className={styles.amountWrapper}>\n                                    <span\n                                      className={styles.plus}\n                                      id={product.id}\n                                      title={product.quantity}\n                                      onClick={this.onDecrease}\n                                    >\n                                      <Icon\n                                        size=\"small\"\n                                        name=\"minus\"\n                                        id={product.id}\n                                        title={product.quantity}\n                                      />\n                                    </span>\n                                    <span className={styles.actualAmount}>\n                                      {product.quantity}\n                                    </span>\n                                    <span\n                                      className={styles.minus}\n                                      id={product.id}\n                                      onClick={this.onIncrease}\n                                    >\n                                      <Icon\n                                        size=\"small\"\n                                        name=\"plus\"\n                                        id={product.id}\n                                      />\n                                    </span>\n                                  </div>\n                                </div>\n                              </MediaQuery>\n\n                              <MediaQuery minWidth={401} maxWidth={450}>\n                                <div\n                                  className={styles.close}\n                                  name={product.id}\n                                  id={product.id}\n                                  onClick={this.onRemove}\n                                  style={{ top: \"35%\", left: \"90%\" }}\n                                >\n                                  <img\n                                    src=\"../static/images/delete.png\"\n                                    width={25}\n                                    height={25}\n                                    name={product.id}\n                                    id={product.id}\n                                    title=\"remove\"\n                                  />\n                                </div>\n                              </MediaQuery>\n                              <MediaQuery minWidth={451} maxWidth={500}>\n                                <div\n                                  className={styles.close}\n                                  name={product.id}\n                                  id={product.id}\n                                  onClick={this.onRemove}\n                                  style={{ top: \"37%\", left: \"90%\" }}\n                                >\n                                  <img\n                                    src=\"../static/images/delete.png\"\n                                    width={25}\n                                    height={25}\n                                    name={product.id}\n                                    id={product.id}\n                                    title=\"remove\"\n                                  />\n                                </div>\n                              </MediaQuery>\n\n                              <MediaQuery minWidth={501}>\n                                <div\n                                  className={styles.close}\n                                  name={product.id}\n                                  id={product.id}\n                                  onClick={this.onRemove}\n                                  style={{ top: \"37%\", left: \"90%\" }}\n                                >\n                                  <img\n                                    src=\"../static/images/delete.png\"\n                                    width={25}\n                                    height={25}\n                                    name={product.id}\n                                    id={product.id}\n                                    title=\"remove\"\n                                  />\n                                </div>\n                              </MediaQuery>\n                            </div>\n                          </div>\n                        ))}\n                      </>\n                    </div>\n\n                    <div\n                      className={styles.checkout}\n                      style={{ background: \"#b8ffd3\" }}\n                    >\n                      <div className={styles.row1}>\n                        <p className={styles.tt}>Total:</p>\n                        <p className={styles.tvalue}>{`${new Intl.NumberFormat(\n                          \"en-US\",\n                          {\n                            style: \"currency\",\n                            currency: \"Tsh\",\n                            minimumFractionDigits: 0,\n                          }\n                        ).format(parseInt(this.state.net_price))}`}</p>\n\n                        <button\n                          className={styles.checkBtn}\n                          onClick={() => Router.push({ pathname: \"/order\" })}\n                        >\n                          Checkout\n                          <img\n                            style={{ marginLeft: \"5px\" }}\n                            src=\"../static/images/right-arrow.png\"\n                            width={10}\n                            height={10}\n                          />\n                        </button>\n                      </div>\n                    </div>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={577} maxWidth={899}>\n                    <div className={styles.flexOne}>\n                      {/* <img src='../static/images/paragraph.png' width={18} height={18} /> */}\n                      <img\n                        src=\"../static/images/home.png\"\n                        width={22}\n                        height={22}\n                        title=\"Home\"\n                        onClick={() => Router.push({ pathname: \"/\" })}\n                        style={{ cursor: \"pointer\" }}\n                      />\n                      <span className={styles.mHeader}>MY CART</span>\n                      <img\n                        src=\"../static/images/bin.png\"\n                        width={18}\n                        height={18}\n                        title=\"clear cart\"\n                        onClick={this.clearCart}\n                        style={{ cursor: \"pointer\" }}\n                      />\n                    </div>\n                    <hr className={styles.h} />\n                    <div className={styles.sec}>\n                      {/* Hapa inabidi nitengeneze kitu kama card.. */}\n\n                      <>\n                        {this.state.cartproducts.map((product) => (\n                          <div\n                            className={styles.behaveLikeCard}\n                            key={product.id}\n                          >\n                            <div\n                              className={styles.conte}\n                              style={{ paddingTop: \"0%\" }}\n                            >\n                              <img\n                                src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                                width={90}\n                                height={80}\n                                className={styles.proImg}\n                              />\n\n                              <MediaQuery maxWidth={650}>\n                                <div\n                                  className={styles.explain}\n                                  style={{ top: \"22%\", top: \"9%\" }}\n                                >\n                                  <p className={styles.bich}>\n                                    {product.get_title.length > 12\n                                      ? product.get_title.substr(0, 12) + \"...\"\n                                      : product.get_title}\n                                  </p>\n                                  <span className={styles.mpunga}>\n                                    {`${new Intl.NumberFormat(\"en-US\", {\n                                      style: \"currency\",\n                                      currency: \"Tsh\",\n                                      minimumFractionDigits: 0,\n                                    }).format(parseInt(product.subTotal))}`}\n                                  </span>\n                                  {product.selectedPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_prop} :{\" \"}\n                                      {product.selectedPropertyValue.length > 10\n                                        ? product.selectedPropertyValue.substr(\n                                            0,\n                                            10\n                                          ) + \"...\"\n                                        : product.selectedPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.selectedSecondPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_secondProp} :{\" \"}\n                                      {product.selectedSecondPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.customization.length > 0 ? (\n                                    <p\n                                      className={styles.props}\n                                      styles={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                      }}\n                                    >\n                                      Note:{\" \"}\n                                      {product.customization.substr(0, 12) +\n                                        \"...\"}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n                                </div>\n                              </MediaQuery>\n                              <MediaQuery minWidth={651} maxWidth={730}>\n                                <div\n                                  className={styles.explain}\n                                  style={{ left: \"21%\", top: \"9%\" }}\n                                >\n                                  <p className={styles.bich}>\n                                    {product.get_title.length > 14\n                                      ? product.get_title.substr(0, 14) + \"...\"\n                                      : product.get_title}\n                                  </p>\n                                  <span className={styles.mpunga}>\n                                    {`${new Intl.NumberFormat(\"en-US\", {\n                                      style: \"currency\",\n                                      currency: \"Tsh\",\n                                      minimumFractionDigits: 0,\n                                    }).format(parseInt(product.subTotal))}`}\n                                  </span>\n                                  {product.selectedPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_prop} :\n                                      {product.selectedPropertyValue.length > 10\n                                        ? product.selectedPropertyValue.substr(\n                                            0,\n                                            10\n                                          ) + \"...\"\n                                        : product.selectedPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.selectedSecondPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_secondProp} :{\" \"}\n                                      {product.selectedSecondPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.customization.length > 0 ? (\n                                    <p\n                                      className={styles.props}\n                                      styles={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                      }}\n                                    >\n                                      Note:{\" \"}\n                                      {product.customization.substr(0, 12) +\n                                        \"...\"}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n                                </div>\n                              </MediaQuery>\n\n                              <MediaQuery minWidth={731} maxWidth={800}>\n                                <div\n                                  className={styles.explain}\n                                  style={{ left: \"19%\", top: \"9%\" }}\n                                >\n                                  <p className={styles.bich}>\n                                    {product.get_title.length > 15\n                                      ? product.get_title.substr(0, 15) + \"...\"\n                                      : product.get_title}\n                                  </p>\n                                  <span className={styles.mpunga}>\n                                    {`${new Intl.NumberFormat(\"en-US\", {\n                                      style: \"currency\",\n                                      currency: \"Tsh\",\n                                      minimumFractionDigits: 0,\n                                    }).format(parseInt(product.subTotal))}`}\n                                  </span>\n                                  {product.selectedPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_prop} :\n                                      {product.selectedPropertyValue.length > 13\n                                        ? product.selectedPropertyValue.substr(\n                                            0,\n                                            13\n                                          ) + \"...\"\n                                        : product.selectedPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.selectedSecondPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_secondProp} :{\" \"}\n                                      {product.selectedSecondPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.customization.length > 0 ? (\n                                    <p\n                                      className={styles.props}\n                                      styles={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                      }}\n                                    >\n                                      Note:{\" \"}\n                                      {product.customization.substr(0, 12) +\n                                        \"...\"}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n                                </div>\n                              </MediaQuery>\n\n                              <MediaQuery minWidth={801} maxWidth={830}>\n                                <div\n                                  className={styles.explain}\n                                  style={{ left: \"18%\", top: \"9%\" }}\n                                >\n                                  <p className={styles.bich}>\n                                    {product.get_title.length > 18\n                                      ? product.get_title.substr(0, 18) + \"...\"\n                                      : product.get_title}\n                                  </p>\n                                  <span className={styles.mpunga}>\n                                    {`${new Intl.NumberFormat(\"en-US\", {\n                                      style: \"currency\",\n                                      currency: \"Tsh\",\n                                      minimumFractionDigits: 0,\n                                    }).format(parseInt(product.subTotal))}`}\n                                  </span>\n                                  {product.selectedPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_prop} :\n                                      {product.selectedPropertyValue.length > 14\n                                        ? product.selectedPropertyValue.substr(\n                                            0,\n                                            13\n                                          ) + \"...\"\n                                        : product.selectedPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.selectedSecondPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_secondProp} :{\" \"}\n                                      {product.selectedSecondPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.customization.length > 0 ? (\n                                    <p\n                                      className={styles.props}\n                                      styles={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                      }}\n                                    >\n                                      Note:{\" \"}\n                                      {product.customization.substr(0, 12) +\n                                        \"...\"}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n                                </div>\n                              </MediaQuery>\n\n                              <MediaQuery minWidth={831}>\n                                <div\n                                  className={styles.explain}\n                                  style={{ left: \"17%\", top: \"9%\" }}\n                                >\n                                  <p className={styles.bich}>\n                                    {product.get_title.length > 18\n                                      ? product.get_title.substr(0, 18) + \"...\"\n                                      : product.get_title}\n                                  </p>\n                                  <span className={styles.mpunga}>\n                                    {`${new Intl.NumberFormat(\"en-US\", {\n                                      style: \"currency\",\n                                      currency: \"Tsh\",\n                                      minimumFractionDigits: 0,\n                                    }).format(parseInt(product.subTotal))}`}\n                                  </span>\n                                  {product.selectedPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_prop} :\n                                      {product.selectedPropertyValue.length > 14\n                                        ? product.selectedPropertyValue.substr(\n                                            0,\n                                            13\n                                          ) + \"...\"\n                                        : product.selectedPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.selectedSecondPropertyValue ? (\n                                    <p\n                                      className={styles.props}\n                                      style={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                        marginBottom: \"0%\",\n                                        paddingBottom: \"0%\",\n                                      }}\n                                    >\n                                      {product.get_secondProp} :{\" \"}\n                                      {product.selectedSecondPropertyValue}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n\n                                  {product.customization.length > 0 ? (\n                                    <p\n                                      className={styles.props}\n                                      styles={{\n                                        marginTop: \"0%\",\n                                        paddingTop: \"0%\",\n                                      }}\n                                    >\n                                      Note:{\" \"}\n                                      {product.customization.substr(0, 12) +\n                                        \"...\"}\n                                    </p>\n                                  ) : (\n                                    <></>\n                                  )}\n                                </div>\n                              </MediaQuery>\n\n                              <MediaQuery minWidth={577} maxWidth={680}>\n                                <div\n                                  className={styles.quantity}\n                                  style={{ left: \"55%\", top: \"22%\" }}\n                                >\n                                  <p className={styles.qua}>\n                                    Quantity:{\" \"}\n                                    <span className={styles.namba}>\n                                      {product.quantity}\n                                    </span>\n                                  </p>\n                                  <div className={styles.amountWrapper}>\n                                    <span\n                                      className={styles.plus}\n                                      id={product.id}\n                                      title={product.quantity}\n                                      onClick={this.onDecrease}\n                                    >\n                                      <Icon\n                                        size=\"small\"\n                                        name=\"minus\"\n                                        id={product.id}\n                                        title={product.quantity}\n                                      />\n                                    </span>\n                                    <span className={styles.actualAmount}>\n                                      {product.quantity}\n                                    </span>\n                                    <span\n                                      className={styles.minus}\n                                      id={product.id}\n                                      onClick={this.onIncrease}\n                                    >\n                                      <Icon\n                                        size=\"small\"\n                                        name=\"plus\"\n                                        id={product.id}\n                                      />\n                                    </span>\n                                  </div>\n                                </div>\n                              </MediaQuery>\n\n                              <MediaQuery minWidth={681}>\n                                <div\n                                  className={styles.quantity}\n                                  style={{ left: \"52%\", top: \"22%\" }}\n                                >\n                                  <p className={styles.qua}>\n                                    Quantity:{\" \"}\n                                    <span className={styles.namba}>\n                                      {product.quantity}\n                                    </span>\n                                  </p>\n                                  <div className={styles.amountWrapper}>\n                                    <span\n                                      className={styles.plus}\n                                      id={product.id}\n                                      title={product.quantity}\n                                      onClick={this.onDecrease}\n                                    >\n                                      <Icon\n                                        size=\"small\"\n                                        name=\"minus\"\n                                        id={product.id}\n                                        title={product.quantity}\n                                      />\n                                    </span>\n                                    <span className={styles.actualAmount}>\n                                      {product.quantity}\n                                    </span>\n                                    <span\n                                      className={styles.minus}\n                                      id={product.id}\n                                      onClick={this.onIncrease}\n                                    >\n                                      <Icon\n                                        size=\"small\"\n                                        name=\"plus\"\n                                        id={product.id}\n                                      />\n                                    </span>\n                                  </div>\n                                </div>\n                              </MediaQuery>\n\n                              <div\n                                className={styles.close}\n                                name={product.id}\n                                id={product.id}\n                                onClick={this.onRemove}\n                                style={{ top: \"37%\", left: \"90%\" }}\n                              >\n                                <img\n                                  src=\"../static/images/delete.png\"\n                                  width={25}\n                                  height={25}\n                                  name={product.id}\n                                  id={product.id}\n                                  title=\"remove\"\n                                />\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </>\n                    </div>\n\n                    <div\n                      className={styles.checkout}\n                      style={{ paddingBottom: \"18%\", background: \"#b8ffd3\" }}\n                    >\n                      <div\n                        className={styles.row1}\n                        style={{ marginLeft: \"10%\" }}\n                      >\n                        <p className={styles.tt}>Total:</p>\n                        <p className={styles.tvalue}>\n                          {`${new Intl.NumberFormat(\"en-US\", {\n                            style: \"currency\",\n                            currency: \"Tsh\",\n                            minimumFractionDigits: 0,\n                          }).format(parseInt(this.state.net_price))}`}\n                        </p>\n\n                        <button\n                          className={styles.checkBtn}\n                          style={{ padding: \"2%\" }}\n                          onClick={() => Router.push({ pathname: \"/order\" })}\n                        >\n                          Checkout\n                          <img\n                            style={{ marginLeft: \"5px\" }}\n                            src=\"../static/images/right-arrow.png\"\n                            width={10}\n                            height={10}\n                          />\n                        </button>\n                      </div>\n                    </div>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={900}>\n                    <Grid>\n                      <Grid.Column width={12}>\n                        <section className={styles.top}>\n                          <div className={styles.flexOne}>\n                            <img\n                              src=\"../static/images/home.png\"\n                              width={25}\n                              height={25}\n                              title=\"Home\"\n                              onClick={() => Router.push({ pathname: \"/\" })}\n                              style={{ cursor: \"pointer\" }}\n                            />\n                            <p className={styles.tHeade}>My Shopping Cart</p>\n                            <img\n                              src=\"../static/images/bin.png\"\n                              width={22}\n                              height={22}\n                              title=\"clear cart\"\n                              onClick={this.clearCart}\n                              style={{ cursor: \"pointer\" }}\n                            />\n                          </div>\n                          <div className={styles.cls}>\n                            <div className={styles.sec}>\n                              <Grid>\n                                <Grid.Column width={6}>\n                                  <Header\n                                    as=\"h4\"\n                                    content=\"Description\"\n                                    color=\"grey\"\n                                    textAlign=\"center\"\n                                  />\n                                </Grid.Column>\n                                <Grid.Column width={4}>\n                                  <Header\n                                    as=\"h4\"\n                                    content=\"Quantity\"\n                                    color=\"grey\"\n                                    textAlign=\"center\"\n                                  />\n                                </Grid.Column>\n                                <Grid.Column width={3}>\n                                  <Header\n                                    as=\"h4\"\n                                    content=\"Remove\"\n                                    color=\"grey\"\n                                    textAlign=\"center\"\n                                  />\n                                </Grid.Column>\n                                <Grid.Column width={3}>\n                                  <Header\n                                    as=\"h4\"\n                                    content=\"Price\"\n                                    color=\"grey\"\n                                    textAlign=\"center\"\n                                  />\n                                </Grid.Column>\n                              </Grid>\n                              <hr className={styles.hl} />\n\n                              {this.state.cartproducts.map((product) => (\n                                <div className={styles.cont} key={product.id}>\n                                  <Grid>\n                                    <Grid.Column width={6}>\n                                      <div className={styles.holder}>\n                                        <img\n                                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                                          width={90}\n                                          height={70}\n                                          style={{\n                                            borderRadius: \"10px\",\n                                            marginRight: \"2%\",\n                                          }}\n                                        />\n                                        <span className={styles.hahaha}>\n                                          <MediaQuery maxWidth={1100}>\n                                            <span\n                                              className={styles.bichwa}\n                                              style={{ left: \"46%\" }}\n                                            >\n                                              {product.get_title.length > 15\n                                                ? product.get_title.substr(\n                                                    0,\n                                                    15\n                                                  ) + \"...\"\n                                                : product.get_title}\n\n                                              {product.selectedPropertyValue ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  style={{\n                                                    marginBottom: \"0%\",\n                                                    paddingTop: \"0%\",\n                                                  }}\n                                                >\n                                                  {product.get_prop} :\n                                                  {\n                                                    product.selectedPropertyValue\n                                                  }\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n\n                                              {product.selectedSecondPropertyValue ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  style={{\n                                                    marginTop: \"0%\",\n                                                    paddingTop: \"0%\",\n                                                    marginBottom: \"0%\",\n                                                    paddingBottom: \"0%\",\n                                                  }}\n                                                >\n                                                  {product.get_secondProp} :{\" \"}\n                                                  {\n                                                    product.selectedSecondPropertyValue\n                                                  }\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n\n                                              {product.customization.length >\n                                              0 ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  styles={{\n                                                    marginTop: \"0%\",\n                                                    paddingTop: \"0%\",\n                                                  }}\n                                                >\n                                                  Note:{\" \"}\n                                                  {product.customization.substr(\n                                                    0,\n                                                    20\n                                                  ) + \"...\"}\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n                                            </span>\n                                          </MediaQuery>\n                                          <MediaQuery\n                                            minWidth={1101}\n                                            maxWidth={1200}\n                                          >\n                                            <span className={styles.bichwa}>\n                                              {product.get_title.length > 17\n                                                ? product.get_title.substr(\n                                                    0,\n                                                    17\n                                                  ) + \"...\"\n                                                : product.get_title}\n\n                                              {/* <p>Hello im here</p> */}\n                                              {product.selectedPropertyValue ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  style={{\n                                                    marginBottom: \"0%\",\n                                                    paddingBottom: \"0%\",\n                                                  }}\n                                                >\n                                                  {product.get_prop} :\n                                                  {\n                                                    product.selectedPropertyValue\n                                                  }\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n\n                                              {product.selectedSecondPropertyValue ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  style={{\n                                                    marginTop: \"0%\",\n                                                    paddingTop: \"0%\",\n                                                    marginBottom: \"0%\",\n                                                    paddingBottom: \"0%\",\n                                                  }}\n                                                >\n                                                  {product.get_secondProp} :{\" \"}\n                                                  {\n                                                    product.selectedSecondPropertyValue\n                                                  }\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n\n                                              {product.customization.length >\n                                              0 ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  styles={{\n                                                    marginTop: \"0%\",\n                                                    paddingTop: \"0%\",\n                                                  }}\n                                                >\n                                                  Note:{\" \"}\n                                                  {product.customization.substr(\n                                                    0,\n                                                    20\n                                                  ) + \"...\"}\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n                                            </span>\n                                          </MediaQuery>\n\n                                          <MediaQuery\n                                            minWidth={1201}\n                                            maxWidth={1350}\n                                          >\n                                            <span\n                                              className={styles.bichwa}\n                                              style={{ left: \"38%\" }}\n                                            >\n                                              {product.get_title.length > 17\n                                                ? product.get_title.substr(\n                                                    0,\n                                                    17\n                                                  ) + \"...\"\n                                                : product.get_title}\n\n                                              {/* <p>Hello im here</p> */}\n                                              {product.selectedPropertyValue ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  style={{\n                                                    marginBottom: \"0%\",\n                                                    paddingBottom: \"0%\",\n                                                  }}\n                                                >\n                                                  {product.get_prop} :\n                                                  {\n                                                    product.selectedPropertyValue\n                                                  }\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n\n                                              {product.selectedSecondPropertyValue ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  style={{\n                                                    marginTop: \"0%\",\n                                                    paddingTop: \"0%\",\n                                                    marginBottom: \"0%\",\n                                                    paddingBottom: \"0%\",\n                                                  }}\n                                                >\n                                                  {product.get_secondProp} :{\" \"}\n                                                  {\n                                                    product.selectedSecondPropertyValue\n                                                  }\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n\n                                              {product.customization.length >\n                                              0 ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  styles={{\n                                                    marginTop: \"0%\",\n                                                    paddingTop: \"0%\",\n                                                  }}\n                                                >\n                                                  Note:{\" \"}\n                                                  {product.customization.substr(\n                                                    0,\n                                                    25\n                                                  ) + \"...\"}\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n                                            </span>\n                                          </MediaQuery>\n\n                                          <MediaQuery\n                                            minWidth={1351}\n                                            maxWidth={1500}\n                                          >\n                                            <span\n                                              className={styles.bichwa}\n                                              style={{ left: \"34%\" }}\n                                            >\n                                              {product.get_title.length > 17\n                                                ? product.get_title.substr(\n                                                    0,\n                                                    17\n                                                  ) + \"...\"\n                                                : product.get_title}\n\n                                              {/* <p>Hello im here</p> */}\n                                              {product.selectedPropertyValue ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  style={{\n                                                    marginBottom: \"0%\",\n                                                    paddingBottom: \"0%\",\n                                                  }}\n                                                >\n                                                  {product.get_prop} :\n                                                  {\n                                                    product.selectedPropertyValue\n                                                  }\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n\n                                              {product.selectedSecondPropertyValue ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  style={{\n                                                    marginTop: \"0%\",\n                                                    paddingTop: \"0%\",\n                                                    marginBottom: \"0%\",\n                                                    paddingBottom: \"0%\",\n                                                  }}\n                                                >\n                                                  {product.get_secondProp} :{\" \"}\n                                                  {\n                                                    product.selectedSecondPropertyValue\n                                                  }\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n\n                                              {product.customization.length >\n                                              0 ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  styles={{\n                                                    marginTop: \"0%\",\n                                                    paddingTop: \"0%\",\n                                                  }}\n                                                >\n                                                  Note:{\" \"}\n                                                  {product.customization.substr(\n                                                    0,\n                                                    25\n                                                  ) + \"...\"}\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n                                            </span>\n                                          </MediaQuery>\n\n                                          <MediaQuery\n                                            minWidth={1501}\n                                            maxWidth={1750}\n                                          >\n                                            <span\n                                              className={styles.bichwa}\n                                              style={{ left: \"30%\" }}\n                                            >\n                                              {product.get_title.length > 17\n                                                ? product.get_title.substr(\n                                                    0,\n                                                    17\n                                                  ) + \"...\"\n                                                : product.get_title}\n\n                                              {/* <p>Hello im here</p> */}\n                                              {product.selectedPropertyValue ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  style={{\n                                                    marginBottom: \"0%\",\n                                                    paddingBottom: \"0%\",\n                                                  }}\n                                                >\n                                                  {product.get_prop} :\n                                                  {\n                                                    product.selectedPropertyValue\n                                                  }\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n\n                                              {product.selectedSecondPropertyValue ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  style={{\n                                                    marginTop: \"0%\",\n                                                    paddingTop: \"0%\",\n                                                    marginBottom: \"0%\",\n                                                    paddingBottom: \"0%\",\n                                                  }}\n                                                >\n                                                  {product.get_secondProp} :{\" \"}\n                                                  {\n                                                    product.selectedSecondPropertyValue\n                                                  }\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n\n                                              {product.customization.length >\n                                              0 ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  styles={{\n                                                    marginTop: \"0%\",\n                                                    paddingTop: \"0%\",\n                                                  }}\n                                                >\n                                                  Note:{\" \"}\n                                                  {product.customization.substr(\n                                                    0,\n                                                    25\n                                                  ) + \"...\"}\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n                                            </span>\n                                          </MediaQuery>\n\n                                          <MediaQuery minWidth={1751}>\n                                            <span\n                                              className={styles.bichwa}\n                                              style={{ left: \"25%\" }}\n                                            >\n                                              {product.get_title.length > 17\n                                                ? product.get_title.substr(\n                                                    0,\n                                                    17\n                                                  ) + \"...\"\n                                                : product.get_title}\n\n                                              {/* <p>Hello im here</p> */}\n                                              {product.selectedPropertyValue ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  style={{\n                                                    marginBottom: \"0%\",\n                                                    paddingBottom: \"0%\",\n                                                  }}\n                                                >\n                                                  {product.get_prop} :\n                                                  {\n                                                    product.selectedPropertyValue\n                                                  }\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n\n                                              {product.selectedSecondPropertyValue ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  style={{\n                                                    marginTop: \"0%\",\n                                                    paddingTop: \"0%\",\n                                                    marginBottom: \"0%\",\n                                                    paddingBottom: \"0%\",\n                                                  }}\n                                                >\n                                                  {product.get_secondProp} :{\" \"}\n                                                  {\n                                                    product.selectedSecondPropertyValue\n                                                  }\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n\n                                              {product.customization.length >\n                                              0 ? (\n                                                <p\n                                                  className={styles.prop}\n                                                  styles={{\n                                                    marginTop: \"0%\",\n                                                    paddingTop: \"0%\",\n                                                  }}\n                                                >\n                                                  Note:{\" \"}\n                                                  {product.customization.substr(\n                                                    0,\n                                                    25\n                                                  ) + \"...\"}\n                                                </p>\n                                              ) : (\n                                                <></>\n                                              )}\n                                            </span>\n                                          </MediaQuery>\n                                        </span>\n                                      </div>\n                                    </Grid.Column>\n\n                                    <Grid.Column width={4}>\n                                      <div className={styles.do}>\n                                        <span className={styles.sp}>\n                                          Quantity:{\" \"}\n                                          <span className={styles.idadi}>\n                                            {product.quantity}\n                                          </span>\n                                        </span>\n                                        <div className={styles.amountWrapper}>\n                                          {/* <span className={styles.plus} title={product.get_title} onClick={this.onDecrease}>\n                                                                        <Icon size=\"small\" name='minus' />\n                                                                    </span> */}\n                                          <button\n                                            style={{\n                                              fontWeight: \"bold\",\n                                              paddingRight: \"7px\",\n                                              paddingLeft: \"5px\",\n                                            }}\n                                            name={product.quantity}\n                                            title=\"-1\"\n                                            id={product.id}\n                                            onClick={this.onDecrease}\n                                          >\n                                            -\n                                          </button>\n                                          <span className={styles.actualAmount}>\n                                            {product.quantity}\n                                          </span>\n                                          <button\n                                            style={{ fontWeight: \"bold\" }}\n                                            title=\"+1\"\n                                            id={product.id}\n                                            onClick={this.onIncrease}\n                                          >\n                                            +\n                                          </button>\n                                          {/* <span className={styles.minus} title={product.get_title} onClick={this.onIncrease}>\n                                                                        <Icon size=\"small\" name='plus' />\n                                                                    </span> */}\n                                        </div>\n                                      </div>\n                                    </Grid.Column>\n\n                                    <Grid.Column width={3}>\n                                      <div className={styles.test}>\n                                        <button\n                                          name={product.id}\n                                          className={styles.hha}\n                                          onClick={this.onRemove}\n                                        >\n                                          x\n                                        </button>\n                                      </div>\n\n                                      {/* <div className={styles.hha}>\n                                                                    <Button circular name={product.id} icon='remove' size='large' onClick={this.onRemove} />\n                                                    \n                                                                </div> */}\n                                    </Grid.Column>\n                                    <Grid.Column width={3}>\n                                      <div className={styles.hhh}>\n                                        {`${new Intl.NumberFormat(\"en-US\", {\n                                          style: \"currency\",\n                                          currency: \"Tsh\",\n                                          minimumFractionDigits: 0,\n                                        }).format(parseInt(product.subTotal))}`}\n                                      </div>\n                                    </Grid.Column>\n                                  </Grid>\n\n                                  <hr />\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        </section>\n                      </Grid.Column>\n\n                      <Grid.Column width={4}>\n                        <div className={styles.bottom}>\n                          {/* <Header as='h2' textAlign=\"center\" content=\"Cart summary\" color='grey' /> */}\n                          <p className={styles.hOne}> Cart summary </p>\n                          <div className={styles.check2}>\n                            <div className={styles.amo}>\n                              <span className={styles.ami}>\n                                <span className={styles.had}>Net Price:</span>\n                                <span\n                                  className={styles.hvalue}\n                                >{`${new Intl.NumberFormat(\"en-US\", {\n                                  style: \"currency\",\n                                  currency: \"Tsh\",\n                                  minimumFractionDigits: 0,\n                                }).format(\n                                  parseInt(this.state.net_price)\n                                )}/=`}</span>\n                              </span>\n                              <hr />\n                            </div>\n                            <div className={styles.quant}>\n                              <span>\n                                <span className={styles.had}>\n                                  Number of items:\n                                </span>\n                                <span className={styles.nValue}>\n                                  {this.state.net_quantity}\n                                </span>\n                              </span>\n                              <hr />\n                            </div>\n                            <div className={styles.btn}>\n                              <Button\n                                color=\"yellow\"\n                                content=\"Proceed to checkout\"\n                                fluid\n                                onClick={() =>\n                                  Router.push({ pathname: \"/order\" })\n                                }\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </Grid.Column>\n                    </Grid>\n                  </MediaQuery>\n                </>\n              ) : (\n                <div>\n                  <MediaQuery maxWidth={1199}>\n                    <div>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          width: \"100%\",\n\n                          justifyContent: \"center\",\n                          overflowX: \"hidden\",\n                        }}\n                      >\n                        <img\n                          src=\"../static/images/none.gif\"\n                          width={200}\n                          height={200}\n                        />\n                      </div>\n                      <div>\n                        <p\n                          style={{\n                            textAlign: \"center\",\n                            fontWeight: \"bold\",\n                            color: \"grey\",\n                            fontSize: \"150%\",\n                          }}\n                        >\n                          No item added to cart yet <br />\n                          <button\n                            style={{\n                              marginTop: \"1%\",\n                              fontWeight: \"bold\",\n                            }}\n                            className=\"btn btn-warning\"\n                            onClick={() => Router.push(\"/\")}\n                          >\n                            start shopping\n                          </button>\n                        </p>\n                      </div>\n                    </div>\n                  </MediaQuery>\n                  <MediaQuery minWidth={1200}>\n                    <div>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          width: \"100%\",\n\n                          justifyContent: \"center\",\n                          overflowX: \"hidden\",\n                        }}\n                      >\n                        <img\n                          src=\"../static/images/none.gif\"\n                          width={300}\n                          height={300}\n                        />\n                      </div>\n                      <div>\n                        <p\n                          style={{\n                            textAlign: \"center\",\n                            fontWeight: \"bold\",\n                            color: \"grey\",\n                            fontSize: \"130%\",\n                          }}\n                        >\n                          No item added to cart yet <br />\n                          <button\n                            style={{\n                              marginTop: \"1%\",\n                              fontWeight: \"bold\",\n                            }}\n                            className=\"btn btn-warning\"\n                            onClick={() => Router.push(\"/\")}\n                          >\n                            start shopping\n                          </button>\n                        </p>\n                      </div>\n                    </div>\n                  </MediaQuery>\n                </div>\n              )\n            ) : (\n              <div>\n                <MediaQuery maxWidth={899}>\n                  <div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        width: \"100%\",\n\n                        justifyContent: \"center\",\n                        overflowX: \"hidden\",\n                      }}\n                    >\n                      <img\n                        src=\"../static/images/demon.gif\"\n                        width={200}\n                        height={200}\n                      />\n                    </div>\n                    <div>\n                      <p\n                        style={{\n                          textAlign: \"center\",\n                          fontWeight: \"bold\",\n                          color: \"grey\",\n                          fontSize: \"110%\",\n                        }}\n                      >\n                        <MediaQuery maxWidth={450}>\n                          We don't accept anonymous user to view cart.\n                          Login/Register here{\" \"}\n                        </MediaQuery>\n                        <MediaQuery minWidth={451}>\n                          We don't accept anonymous user to view cart.\n                          <br /> Login/Register here{\" \"}\n                        </MediaQuery>\n                        <br />\n                        <button\n                          style={{\n                            marginTop: \"1%\",\n                            fontWeight: \"bold\",\n                          }}\n                          className=\"btn btn-warning\"\n                          onClick={() => Router.push(\"/jisajili\")}\n                        >\n                          Register\n                        </button>\n                        <button\n                          style={{\n                            marginLeft: \"5%\",\n                            marginTop: \"1%\",\n                            fontWeight: \"bold\",\n                          }}\n                          className=\"btn btn-info\"\n                          onClick={() => Router.push(\"/login\")}\n                        >\n                          Login\n                        </button>\n                      </p>\n                    </div>\n                  </div>\n                </MediaQuery>\n\n                <MediaQuery minWidth={900} maxWidth={1199}>\n                  <div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        width: \"100%\",\n\n                        justifyContent: \"center\",\n                        overflowX: \"hidden\",\n                      }}\n                    >\n                      <img\n                        src=\"../static/images/demon.gif\"\n                        width={200}\n                        height={200}\n                      />\n                    </div>\n                    <div>\n                      <p\n                        style={{\n                          textAlign: \"center\",\n                          fontWeight: \"bold\",\n                          color: \"grey\",\n                          fontSize: \"120%\",\n                        }}\n                      >\n                        We don't accept anonymous user to view cart. <br />{\" \"}\n                        Login/Register here <br />\n                        <button\n                          style={{\n                            marginTop: \"1%\",\n                            fontWeight: \"bold\",\n                          }}\n                          className=\"btn btn-info\"\n                          onClick={() => Router.push(\"/register\")}\n                        >\n                          Sign in\n                        </button>\n                      </p>\n                    </div>\n                  </div>\n                </MediaQuery>\n                <MediaQuery minWidth={1200}>\n                  <div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        width: \"100%\",\n\n                        justifyContent: \"center\",\n                        overflowX: \"hidden\",\n                      }}\n                    >\n                      <img\n                        src=\"../static/images/demon.gif\"\n                        width={300}\n                        height={300}\n                      />\n                    </div>\n                    <div>\n                      <p\n                        style={{\n                          textAlign: \"center\",\n                          fontWeight: \"bold\",\n                          color: \"grey\",\n                          fontSize: \"130%\",\n                        }}\n                      >\n                        We don't accept anonymous user to view cart. <br />{\" \"}\n                        Login/Register here <br />\n                        <button\n                          style={{\n                            marginTop: \"1%\",\n                            fontWeight: \"bold\",\n                          }}\n                          className=\"btn btn-info\"\n                          onClick={() => Router.push(\"/register\")}\n                        >\n                          Sign in\n                        </button>\n                      </p>\n                    </div>\n                  </div>\n                </MediaQuery>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* This is how to write styling in next.js and something interesting of this \n                syntax is power to add styling to any element like body which it was difficult \n                before, for more these read https://stackoverflow.com/questions/63247550/nextjs-switch-body-background-color\n                and https://nextjs.org/blog/styling-next-with-styled-jsx */}\n        <style jsx global>{`\n          body {\n            background: rgb(236, 236, 236);\n          }\n        `}</style>\n      </div>\n    );\n  }\n}\n\nexport default Cart;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/done.js",["158","159","160","161"],[],"import React, { Component } from \"react\";\nimport NavBar from \"../components/NavBar3.js\";\nimport jwt_decode from \"jwt-decode\";\nimport dynamic from \"next/dynamic\";\nimport Router from \"next/router\";\nimport styles from \"../static/css/done.module.css\";\nimport BACKEND_ORIGIN from \"../utils/domain.js\";\n\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false } // this will be executed on client side rendering because its a client/browser which have screen width but in server it will throw an error because we tries to use screen variable which is only found in browser/client so we set this to false for this purpose so as to avoid errors\n);\n\nclass DonePlacingOrder extends Component {\n  state = {\n    isAunthenticatd: false,\n    user_id: null,\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  executingTokenLogics = () => {\n    try {\n      const tokens = localStorage.getItem(\"authTokens\")\n        ? JSON.parse(localStorage.getItem(\"authTokens\"))\n        : null;\n      if (!tokens) {\n        console.log(\"You needed to login, no records\");\n        this.setState({ isAunthenticated: false });\n        return;\n      }\n      const decodedRefreshToken = jwt_decode(tokens.refresh);\n      const expireRefreshTime = decodedRefreshToken.exp;\n      console.log(\"Hey this is the expire date of the refreshToken\");\n      console.log(expireRefreshTime);\n      console.log(\"Lets try to access the json access token\");\n      console.log(tokens.access);\n      const decodedAccessData = jwt_decode(tokens.access);\n      const user = decodedAccessData.user_id;\n      this.setState({\n        user_id: user,\n      });\n      console.log(\"This is expiring time for you...\");\n      console.log(decodedAccessData);\n      const expireAccessTime = decodedAccessData.exp;\n      console.log(expireAccessTime);\n      const diff = expireAccessTime * 1000 - Date.now();\n      if (diff < 1) {\n        console.log(\"Hey we need to either update or make user login again\");\n        if (expireRefreshTime * 1000 - Date.now < 1) {\n          console.log(\n            \"Even ur refresh token has already been expired we need you to login again....\"\n          );\n          this.setState({\n            isAunthenticated: false,\n          });\n          return;\n        }\n        console.log(\n          \"Our refresh token is alive you should use it to update your access token\"\n        );\n\n        this.updateToken(tokens.refresh);\n\n        this.setState({\n          isAunthenticated: true,\n          user_id: user,\n        });\n      } else {\n        this.setState({\n          isAunthenticated: true,\n          user_id: user,\n        });\n      }\n    } catch (InvalidTokenError) {\n      // so this will only capture the InvalidTokenError which is caused by using already expired-token because and I said automatically when\n      // we made request to the jwd to decode it will return error that our token is already expired and by default as we coded it will update\n      // our localstorage to look like >>> authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n\n      console.log(InvalidTokenError.message);\n      console.log(\n        \"Invalid token specified since, when the token is expired the jwt automatically change your storage and it ill look like this\"\n      );\n      // authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n      this.setState({\n        isAunthenticated: false,\n      });\n    }\n  };\n\n  updateToken = async (refreshToken) => {\n    let response = await fetch(`${BACKEND_ORIGIN}/api/token/refresh/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ refresh: refreshToken }),\n    });\n\n    let data = await response.json();\n    localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  };\n\n  // this is server side rendering that's why we see our console.log\n  // appear on server..\n  static async getInitialProps(props) {\n    // here we need to fetch the last orderedCart orderId\n    // of that user...... I think we should push namba ya\n    // muamala from order.js then after push we should get it\n    // here and checks the validitiy\n\n    const { unique_id } = props.query;\n    // then fetch on the backend all the orderId\n    const order = await fetch(`${BACKEND_ORIGIN}/api/placed_orders/`);\n    const data = await order.json();\n    console.log(\"This are all orders found \");\n    console.log(data);\n    let isValid = false;\n    let validUniqueId = null;\n    let validPhoneNumber = null;\n    let validTransactionId = null;\n\n    for (let oda of data) {\n      if (oda.uniqueOrderId === unique_id) {\n        validUniqueId = oda.uniqueOrderId;\n        validPhoneNumber = oda.mobile;\n        validTransactionId = oda.orderId;\n        isValid = true;\n        break;\n      }\n    }\n\n    console.log(\"This is result for you to view on server\");\n    console.log(validUniqueId, validPhoneNumber, validTransactionId, isValid);\n\n    // UNAWEZA UKAULIZA WHAT IF MTU AKIWEKA ORDER AMBAYO NI SAHIHI KABISA BUT NI ORDER YA\n    // KITAMBO HICHO AMBAYO ISHAKUWA PROCESSED... HAPA USIWAZE COZ NOW NAENDA KU-ADD VALIDATION\n    // KWENYE ORDER/AU API INABIDI IRETURN ONLY THE ORDER WHICH IS NOT COMPLETED.. NA INABIDI\n    // UJUE PIA NI MUHIMU SANA UKISHA-COMPLETE ORDER U-ENDE KWENE ORDER KUJAZA KUWA ORDER ISHAKUWA\n    // COMPLETED LA SIVYO UTALIA PASKO ANAWEZA AKAJA MTU AKAKWAMBIA ORDER YANGU BADO KUMBE ORDER\n    // ISHAKUWA COMPLETED.....\n\n    console.log(\"This is what order returned if it found or not\");\n    console.log(isValid);\n\n    return { validPhoneNumber, validTransactionId, validUniqueId, isValid };\n  }\n\n  componentDidMount() {\n    this.executingTokenLogics();\n  }\n\n  render() {\n    return (\n      <NavBar isAunthenticated={this.state.isAunthenticatd}>\n        <div>\n          <>\n            {this.props.isValid ? (\n              <>\n                <MediaQuery maxWidth={500}>\n                  <div\n                    style={{\n                      paddingTop: \"15%\",\n                      width: \"75%\",\n                      marginLeft: \"auto\",\n                      marginRight: \"auto\",\n                    }}\n                  >\n                    <p\n                      style={{\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                        textAlign: \"center\",\n                        fontSize: \"130%\",\n                      }}\n                    >\n                      !Your order has been created successful!\n                      <hr />\n                    </p>\n                    <p\n                      style={{\n                        textAlign: \"left\",\n                        color: \"red\",\n                        paddingBottom: \"0%\",\n                        marginBottom: \"0%\",\n                        fontSize: \"100%\",\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      Muhimu soma!(In swahili)\n                    </p>\n                    <p\n                      style={{\n                        paddingTop: \"0%\",\n                        marginTop: \"0%\",\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                      }}\n                    >\n                      ***Data hizi( za hapo chini{\" \"}\n                      <span style={{ color: \"black\" }}>\n                        <i>order id</i>\n                      </span>{\" \"}\n                      na{\" \"}\n                      <span style={{ color: \"black\" }}>\n                        <i>transaction number</i>\n                      </span>\n                      ) zitatumika kuthibitisha kama wewe ndo uliyeagiza/kulipia\n                      bidhaa, Kwa hiyo usizipoteze hadi uhakikishe umepata mzigo\n                      wako, unaweza ukazipiga picha au ukaziandika pembeni.\n                      Wasiliana nasi kwa maelezo zaidi.\n                      <br />\n                      <br />\n                      <div style={{ background: \"#edeceb\" }}>\n                        <div>\n                          <p\n                            style={{\n                              paddingTop: \"2%\",\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                              color: \"black\",\n                            }}\n                          >\n                            Order id:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            <MediaQuery maxWidth={350}>\n                              {this.props.validUniqueId.length > 15 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 15)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(15)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={351} maxWidth={400}>\n                              {this.props.validUniqueId.length > 20 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 20)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(20)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={401}>\n                              {this.props.validUniqueId.length > 25 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 25)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(25)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n                          </p>\n                        </div>\n                        <hr />\n                        <div>\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                              color: \"black\",\n                            }}\n                          >\n                            Transaction number:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            <MediaQuery maxWidth={350}>\n                              {this.props.validTransactionId.length > 15 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 15)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(15)}\n                                </p>\n                              ) : (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId}\n                                </p>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={351} maxWidth={400}>\n                              {this.props.validTransactionId.length > 20 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 20)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(20)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={401}>\n                              {this.props.validTransactionId.length > 25 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 25)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(25)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n                          </p>\n                        </div>\n                        <hr />\n                      </div>\n                    </p>\n                    <br />\n                    <div>\n                      <p\n                        style={{\n                          textAlign: \"left\",\n                          color: \"red\",\n                          paddingBottom: \"0%\",\n                          marginBottom: \"0%\",\n                          fontSize: \"100%\",\n                          fontWeight: \"bold\",\n                        }}\n                      >\n                        Read this(In English)\n                      </p>\n                      <p style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                        *** Keep these data with you they will be used to verify\n                        if its you who ordered the product, Don't lose these\n                        data until you receive your product.\n                      </p>\n\n                      <div style={{ background: \"#edeceb\" }}>\n                        <div>\n                          <p\n                            style={{\n                              paddingTop: \"2%\",\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            Order id:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            <MediaQuery maxWidth={350}>\n                              {this.props.validUniqueId.length > 15 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 15)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(15)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={351} maxWidth={400}>\n                              {this.props.validUniqueId.length > 20 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 20)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(20)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={401}>\n                              {this.props.validUniqueId.length > 25 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 25)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(25)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n                          </p>\n                        </div>\n                        <hr />\n\n                        <div>\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            Transaction number:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            <MediaQuery maxWidth={350}>\n                              {this.props.validTransactionId.length > 15 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 15)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(15)}\n                                </p>\n                              ) : (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId}\n                                </p>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={351} maxWidth={400}>\n                              {this.props.validTransactionId.length > 20 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 20)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(20)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={401}>\n                              {this.props.validTransactionId.length > 25 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 25)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(25)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n                          </p>\n                        </div>\n                        <hr />\n                      </div>\n                    </div>\n                  </div>\n                </MediaQuery>\n\n                <MediaQuery minWidth={501} maxWidth={800}>\n                  <div\n                    style={{\n                      paddingTop: \"11%\",\n                      width: \"70%\",\n                      marginLeft: \"auto\",\n                      marginRight: \"auto\",\n                    }}\n                  >\n                    <p\n                      style={{\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                        textAlign: \"center\",\n                        fontSize: \"130%\",\n                      }}\n                    >\n                      !Your order has been created successful!\n                      <hr />\n                    </p>\n                    <p\n                      style={{\n                        textAlign: \"left\",\n                        color: \"red\",\n                        paddingBottom: \"0%\",\n                        marginBottom: \"0%\",\n                        fontSize: \"100%\",\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      Muhimu soma!(In swahili)\n                    </p>\n                    <p\n                      style={{\n                        paddingTop: \"0%\",\n                        marginTop: \"0%\",\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                      }}\n                    >\n                      ***Data hizi( za hapo chini{\" \"}\n                      <span style={{ color: \"black\" }}>\n                        <i>order id</i>\n                      </span>{\" \"}\n                      na{\" \"}\n                      <span style={{ color: \"black\" }}>\n                        <i>transaction number</i>\n                      </span>\n                      ) zitatumika kuthibitisha kama wewe ndo uliyeagiza/kulipia\n                      bidhaa, Kwa hiyo usizipoteze hadi uhakikishe umepata mzigo\n                      wako, unaweza ukazipiga picha au ukaziandika pembeni.\n                      Wasiliana nasi kwa maelezo zaidi.\n                      <br />\n                      <br />\n                      <div style={{ background: \"#edeceb\" }}>\n                        <div>\n                          <p\n                            style={{\n                              paddingTop: \"2%\",\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                              color: \"black\",\n                            }}\n                          >\n                            Order id:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            {this.props.validUniqueId}\n                          </p>\n                        </div>\n                        <hr />\n                        <div>\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                              color: \"black\",\n                            }}\n                          >\n                            Transaction number:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            <MediaQuery maxWidth={350}>\n                              {this.props.validTransactionId.length > 15 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 15)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(15)}\n                                </p>\n                              ) : (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId}\n                                </p>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={351} maxWidth={400}>\n                              {this.props.validTransactionId.length > 20 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 20)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(20)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={401}>\n                              {this.props.validTransactionId.length > 25 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 25)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(25)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n                          </p>\n                        </div>\n                        <hr />\n                      </div>\n                    </p>\n                    <br />\n                    <div>\n                      <p\n                        style={{\n                          textAlign: \"left\",\n                          color: \"red\",\n                          paddingBottom: \"0%\",\n                          marginBottom: \"0%\",\n                          fontSize: \"100%\",\n                          fontWeight: \"bold\",\n                        }}\n                      >\n                        Read this(In English)\n                      </p>\n                      <p style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                        *** Keep these data with you they will be used to verify\n                        if its you who ordered the product, Don't lose these\n                        data until you receive your product.\n                      </p>\n\n                      <div style={{ background: \"#edeceb\" }}>\n                        <div>\n                          <p\n                            style={{\n                              paddingTop: \"2%\",\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            Order id:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            <MediaQuery maxWidth={350}>\n                              {this.props.validUniqueId.length > 15 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 15)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(15)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={351} maxWidth={400}>\n                              {this.props.validUniqueId.length > 20 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 20)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(20)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={401}>\n                              {this.props.validUniqueId.length > 25 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 25)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(25)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n                          </p>\n                        </div>\n                        <hr />\n\n                        <div>\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            Transaction number:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            <MediaQuery maxWidth={350}>\n                              {this.props.validTransactionId.length > 15 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 15)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(15)}\n                                </p>\n                              ) : (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId}\n                                </p>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={351} maxWidth={400}>\n                              {this.props.validTransactionId.length > 20 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 20)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(20)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={401}>\n                              {this.props.validTransactionId.length > 25 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 25)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(25)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n                          </p>\n                        </div>\n                        <hr />\n                      </div>\n                    </div>\n                  </div>\n                </MediaQuery>\n\n                <MediaQuery minWidth={801} maxWidth={1200}>\n                  <div\n                    style={{\n                      paddingTop: \"9%\",\n                      width: \"70%\",\n                      marginLeft: \"auto\",\n                      marginRight: \"auto\",\n                    }}\n                  >\n                    <p\n                      style={{\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                        textAlign: \"center\",\n                        fontSize: \"130%\",\n                      }}\n                    >\n                      !Your order has been created successful!\n                      <hr />\n                    </p>\n                    <p\n                      style={{\n                        textAlign: \"left\",\n                        color: \"red\",\n                        paddingBottom: \"0%\",\n                        marginBottom: \"0%\",\n                        fontSize: \"100%\",\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      Muhimu soma!(In swahili)\n                    </p>\n                    <p\n                      style={{\n                        paddingTop: \"0%\",\n                        marginTop: \"0%\",\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                      }}\n                    >\n                      ***Data hizi( za hapo chini{\" \"}\n                      <span style={{ color: \"black\" }}>\n                        <i>order id</i>\n                      </span>{\" \"}\n                      na{\" \"}\n                      <span style={{ color: \"black\" }}>\n                        <i>transaction number</i>\n                      </span>\n                      ) zitatumika kuthibitisha kama wewe ndo uliyeagiza/kulipia\n                      bidhaa, Kwa hiyo usizipoteze hadi uhakikishe umepata mzigo\n                      wako, unaweza ukazipiga picha au ukaziandika pembeni.\n                      Wasiliana nasi kwa maelezo zaidi.\n                      <br />\n                      <br />\n                      <div style={{ background: \"#edeceb\" }}>\n                        <div>\n                          <p\n                            style={{\n                              paddingTop: \"2%\",\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                              color: \"black\",\n                            }}\n                          >\n                            Order id:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            {this.props.validUniqueId}\n                          </p>\n                        </div>\n                        <hr />\n                        <div>\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                              color: \"black\",\n                            }}\n                          >\n                            Transaction number:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            <MediaQuery maxWidth={350}>\n                              {this.props.validTransactionId.length > 15 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 15)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(15)}\n                                </p>\n                              ) : (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId}\n                                </p>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={351} maxWidth={400}>\n                              {this.props.validTransactionId.length > 20 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 20)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(20)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={401}>\n                              {this.props.validTransactionId.length > 25 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 25)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(25)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n                          </p>\n                        </div>\n                        <hr />\n                      </div>\n                    </p>\n                    <br />\n                    <div>\n                      <p\n                        style={{\n                          textAlign: \"left\",\n                          color: \"red\",\n                          paddingBottom: \"0%\",\n                          marginBottom: \"0%\",\n                          fontSize: \"100%\",\n                          fontWeight: \"bold\",\n                        }}\n                      >\n                        Read this(In English)\n                      </p>\n                      <p style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                        *** Keep these data with you they will be used to verify\n                        if its you who ordered the product, Don't lose these\n                        data until you receive your product.\n                      </p>\n\n                      <div style={{ background: \"#edeceb\" }}>\n                        <div>\n                          <p\n                            style={{\n                              paddingTop: \"2%\",\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            Order id:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            <MediaQuery maxWidth={350}>\n                              {this.props.validUniqueId.length > 15 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 15)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(15)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={351} maxWidth={400}>\n                              {this.props.validUniqueId.length > 20 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 20)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(20)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={401}>\n                              {this.props.validUniqueId.length > 25 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 25)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(25)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n                          </p>\n                        </div>\n                        <hr />\n\n                        <div>\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            Transaction number:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            <MediaQuery maxWidth={350}>\n                              {this.props.validTransactionId.length > 15 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 15)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(15)}\n                                </p>\n                              ) : (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId}\n                                </p>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={351} maxWidth={400}>\n                              {this.props.validTransactionId.length > 20 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 20)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(20)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={401}>\n                              {this.props.validTransactionId.length > 25 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 25)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(25)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n                          </p>\n                        </div>\n                        <hr />\n                      </div>\n                    </div>\n                  </div>\n                </MediaQuery>\n\n                <MediaQuery minWidth={1201}>\n                  <div\n                    style={{\n                      paddingTop: \"4%\",\n                      width: \"60%\",\n                      marginLeft: \"auto\",\n                      marginRight: \"auto\",\n                    }}\n                  >\n                    <p\n                      style={{\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                        textAlign: \"center\",\n                        fontSize: \"130%\",\n                      }}\n                    >\n                      !Your order has been created successful!\n                      <hr />\n                    </p>\n                    <p\n                      style={{\n                        textAlign: \"left\",\n                        color: \"red\",\n                        paddingBottom: \"0%\",\n                        marginBottom: \"0%\",\n                        fontSize: \"100%\",\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      Muhimu soma!(In swahili)\n                    </p>\n                    <p\n                      style={{\n                        paddingTop: \"0%\",\n                        marginTop: \"0%\",\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                      }}\n                    >\n                      ***Data hizi( za hapo chini{\" \"}\n                      <span style={{ color: \"black\" }}>\n                        <i>order id</i>\n                      </span>{\" \"}\n                      na{\" \"}\n                      <span style={{ color: \"black\" }}>\n                        <i>transaction number</i>\n                      </span>\n                      ) zitatumika kuthibitisha kama wewe ndo uliyeagiza/kulipia\n                      bidhaa, Kwa hiyo usizipoteze hadi uhakikishe umepata mzigo\n                      wako, unaweza ukazipiga picha au ukaziandika pembeni.\n                      Wasiliana nasi kwa maelezo zaidi.\n                      <br />\n                      <br />\n                      <div style={{ background: \"#edeceb\" }}>\n                        <div>\n                          <p\n                            style={{\n                              paddingTop: \"2%\",\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                              color: \"black\",\n                            }}\n                          >\n                            Order id:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            {this.props.validUniqueId}\n                          </p>\n                        </div>\n                        <hr />\n                        <div>\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                              color: \"black\",\n                            }}\n                          >\n                            Transaction number:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            <MediaQuery maxWidth={350}>\n                              {this.props.validTransactionId.length > 15 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 15)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(15)}\n                                </p>\n                              ) : (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId}\n                                </p>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={351} maxWidth={400}>\n                              {this.props.validTransactionId.length > 20 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 20)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(20)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={401}>\n                              {this.props.validTransactionId.length > 25 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 25)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(25)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n                          </p>\n                        </div>\n                        <hr />\n                      </div>\n                    </p>\n                    <br />\n                    <div>\n                      <p\n                        style={{\n                          textAlign: \"left\",\n                          color: \"red\",\n                          paddingBottom: \"0%\",\n                          marginBottom: \"0%\",\n                          fontSize: \"100%\",\n                          fontWeight: \"bold\",\n                        }}\n                      >\n                        Read this(In English)\n                      </p>\n                      <p style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                        *** Keep these data with you they will be used to verify\n                        if its you who ordered the product, Don't lose these\n                        data until you receive your product.\n                      </p>\n\n                      <div style={{ background: \"#edeceb\" }}>\n                        <div>\n                          <p\n                            style={{\n                              paddingTop: \"2%\",\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            Order id:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            <MediaQuery maxWidth={350}>\n                              {this.props.validUniqueId.length > 15 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 15)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(15)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={351} maxWidth={400}>\n                              {this.props.validUniqueId.length > 20 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 20)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(20)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={401}>\n                              {this.props.validUniqueId.length > 25 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validUniqueId.substr(0, 25)}{\" \"}\n                                  <br />\n                                  {this.props.validUniqueId.substr(25)}\n                                </p>\n                              ) : (\n                                <></>\n                              )}\n                            </MediaQuery>\n                          </p>\n                        </div>\n                        <hr />\n\n                        <div>\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"0%\",\n                              textAlign: \"center\",\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            Transaction number:\n                          </p>\n                          <p\n                            style={{\n                              marginTop: \"0%\",\n                              paddingTop: \"0%\",\n                              color: \"grey\",\n                              fontWeight: \"bold\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            <MediaQuery maxWidth={350}>\n                              {this.props.validTransactionId.length > 15 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 15)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(15)}\n                                </p>\n                              ) : (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId}\n                                </p>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={351} maxWidth={400}>\n                              {this.props.validTransactionId.length > 20 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 20)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(20)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={401}>\n                              {this.props.validTransactionId.length > 25 ? (\n                                <p style={{ textAlign: \"center\" }}>\n                                  {this.props.validTransactionId.substr(0, 25)}{\" \"}\n                                  <br />\n                                  {this.props.validTransactionId.substr(25)}\n                                </p>\n                              ) : (\n                                <>\n                                  <p style={{ textAlign: \"center\" }}>\n                                    {this.props.validTransactionId}\n                                  </p>\n                                </>\n                              )}\n                            </MediaQuery>\n                          </p>\n                        </div>\n                        <hr />\n                      </div>\n                    </div>\n                  </div>\n                </MediaQuery>\n              </>\n            ) : (\n              <>\n                <div className={styles.conte}>\n                  <MediaQuery maxWidth={899}>\n                    <div>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          width: \"100%\",\n\n                          justifyContent: \"center\",\n                          overflowX: \"hidden\",\n                        }}\n                      >\n                        <img\n                          src=\"../static/images/notHere.gif\"\n                          width={200}\n                          height={200}\n                        />\n                      </div>\n                      <div>\n                        <p\n                          style={{\n                            textAlign: \"center\",\n                            fontWeight: \"bold\",\n                            color: \"grey\",\n                            fontSize: \"110%\",\n                          }}\n                        >\n                          Oops! 404 Error, Page is not found..\n                          <br />\n                          <button\n                            className=\"btn btn-info\"\n                            style={{ marginTop: \"2%\", fontWeight: \"bold\" }}\n                            onClick={() => Router.push(\"/\")}\n                          >\n                            Back home\n                          </button>\n                        </p>\n                      </div>\n                    </div>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={900} maxWidth={1199}>\n                    <div>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          width: \"100%\",\n\n                          justifyContent: \"center\",\n                          overflowX: \"hidden\",\n                        }}\n                      >\n                        <img\n                          src=\"../static/images/notHere.gif\"\n                          width={200}\n                          height={200}\n                        />\n                      </div>\n                      <div>\n                        <p\n                          style={{\n                            textAlign: \"center\",\n                            fontWeight: \"bold\",\n                            color: \"grey\",\n                            fontSize: \"120%\",\n                          }}\n                        >\n                          Oops! 404 Error, Page is not found..\n                          <br />\n                          <button\n                            className=\"btn btn-info\"\n                            style={{ marginTop: \"2%\", fontWeight: \"bold\" }}\n                            onClick={() => Router.push(\"/\")}\n                          >\n                            {\" \"}\n                            Back home\n                          </button>\n                        </p>\n                      </div>\n                    </div>\n                  </MediaQuery>\n                  <MediaQuery minWidth={1200}>\n                    <div>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          width: \"100%\",\n\n                          justifyContent: \"center\",\n                          overflowX: \"hidden\",\n                        }}\n                      >\n                        <img\n                          src=\"../static/images/notHere.gif\"\n                          width={300}\n                          height={300}\n                        />\n                      </div>\n                      <div>\n                        <p\n                          style={{\n                            textAlign: \"center\",\n                            fontWeight: \"bold\",\n                            color: \"grey\",\n                            fontSize: \"130%\",\n                          }}\n                        >\n                          Oops! 404 Error, Page is not found..\n                          <br />\n                          <button\n                            className=\"btn btn-info\"\n                            style={{ marginTop: \"2%\", fontWeight: \"bold\" }}\n                            onClick={() => Router.push(\"/\")}\n                          >\n                            Back home\n                          </button>\n                        </p>\n                      </div>\n                    </div>\n                  </MediaQuery>\n                </div>\n              </>\n            )}\n          </>\n        </div>\n      </NavBar>\n    );\n  }\n}\n\nexport default DonePlacingOrder;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/gender.js",["162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183"],[],"import React, { Component } from \"react\";\nimport NavBar from \"../components/NavBar\";\nimport Sign from \"../components/Sign\";\nimport styles from \"../static/css/showRoom.module.css\";\nimport {\n  Card,\n  Radio,\n  Form,\n  Segment,\n  Icon,\n  Header,\n  Button,\n  Grid,\n  Message,\n} from \"semantic-ui-react\";\nimport BACKEND_ORIGIN from \"../utils/domain\";\nimport jwt_decode from \"jwt-decode\";\nimport Router from \"next/router\";\nimport dynamic from \"next/dynamic\";\n\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n\nclass ShowRoom extends Component {\n  state = {\n    isAunthenticated: false,\n    products: [],\n    productQuantity: 1,\n    attributeValue: \"\", // Lazima tuwe na default value hapa.. Yaani pale user anapo-select/click the image/product this value should be updated as the default propertyValue.. Ko hii naweza ikaanza kama '' but baadae ikaja kuwa updated pale user anavyoselect picha....\n    selectedObj: {},\n    selectedObjPrice: 0,\n    selectedObjImages: [],\n    modelOpen: false,\n    customValue: \"\",\n    addedToCart: false,\n    x: 0,\n    y: 0,\n    secondPropsAttributeValue: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.father = React.createRef();\n    this.showRoom = React.createRef();\n    this.small1 = React.createRef();\n    this.small2 = React.createRef();\n    this.small3 = React.createRef();\n    this.preview = React.createRef();\n    this.explain = React.createRef();\n    this.closeBtn = React.createRef();\n    this.err = React.createRef();\n    this.err1 = React.createRef();\n    this.modal = React.createRef();\n    this.closeBtnx = React.createRef();\n    this.uwanja = React.createRef();\n  }\n\n  executingTokenLogics = () => {\n    try {\n      const tokens = localStorage.getItem(\"authTokens\")\n        ? JSON.parse(localStorage.getItem(\"authTokens\"))\n        : null;\n      if (!tokens) {\n        console.log(\"You needed to login, no records\");\n        this.setState({ isAunthenticated: false });\n        return;\n      }\n      const decodedRefreshToken = jwt_decode(tokens.refresh);\n      const expireRefreshTime = decodedRefreshToken.exp;\n      console.log(\"Hey this is the expire date of the refreshToken\");\n      console.log(expireRefreshTime);\n      console.log(\"Lets try to access the json access token\");\n      console.log(tokens.access);\n      const decodedAccessData = jwt_decode(tokens.access);\n      console.log(\"This is expiring time for you...\");\n      console.log(decodedAccessData);\n      const expireAccessTime = decodedAccessData.exp;\n      console.log(expireAccessTime);\n      const diff = expireAccessTime * 1000 - Date.now();\n      if (diff < 1) {\n        console.log(\"Hey we need to either update or make user login again\");\n        if (expireRefreshTime * 1000 - Date.now < 1) {\n          console.log(\n            \"Even ur refresh token has already been expired we need you to login again....\"\n          );\n          this.setState({\n            isAunthenticated: false,\n          });\n          return;\n        }\n        console.log(\n          \"Our refresh token is alive you should use it to update your access token\"\n        );\n\n        this.updateToken(tokens.refresh);\n\n        this.setState({\n          isAunthenticated: true,\n        });\n      } else {\n        this.setState({\n          isAunthenticated: true,\n        });\n      }\n    } catch (InvalidTokenError) {\n      console.log(InvalidTokenError.message);\n      console.log(\n        \"Invalid token specified since, when the token is expired the jwt automatically change your storage and it ill look like this\"\n      );\n      // authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n      this.setState({\n        isAunthenticated: false,\n      });\n    }\n  };\n\n  viewItem = async (e) => {\n    this.setState({\n      y: window.pageYOffset,\n      x: window.pageXOffset,\n    });\n    console.log(e.target.id);\n    const product = this.state.products.find(\n      (product) => product.id === parseInt(e.target.id)\n    );\n    console.log(\"This is the product we captured\");\n    console.log(product);\n\n    await this.setState({\n      selectedObj: product,\n      selectedObjPrice: product.price,\n      selectedObjImages: product.get_urls,\n    });\n\n    if (product.hasPropertySelection) {\n      await this.setState({\n        attributeValue: Object.values(\n          this.state.selectedObj.map_property[0]\n        )[0],\n      });\n    }\n\n    if (product.hasSecondPropertySelection) {\n      await this.setState({\n        secondPropsAttributeValue: Object.values(\n          this.state.selectedObj.map_secondProps[0]\n        )[0],\n      });\n    }\n\n    window.scrollTo(0, 0);\n    this.showRoom.current.style.zIndex = '1'\n\n    \n    this.father.current.style.display = 'none'\n    document.body.style.background =\n      \"linear-gradient(rgba(0, 0, 0, .5), rgba(0, 0, 0, .4))\";\n    \n\n    this.showRoom.current.style.display = \"block\";\n  };\n\n  onIncrease = () => {\n    this.setState({\n      productQuantity: this.state.productQuantity + 1,\n    });\n\n    // Hapa itaji-override na kuzidisha another sum used\n    this.setState({\n      selectedObjPrice:\n        this.state.selectedObjPrice + this.state.selectedObj.price,\n    });\n  };\n\n  onDecrease = () => {\n    if (this.state.productQuantity > 1) {\n      this.setState({\n        productQuantity: this.state.productQuantity - 1,\n      });\n\n      this.setState({\n        selectedObjPrice:\n          this.state.selectedObjPrice - this.state.selectedObj.price,\n      });\n    }\n  };\n\n  onRemove = (e) => {\n    // Kuna state hapa inabidi uzibadilishe ziende kwenye default\n    this.setState({\n      selectedObj: {},\n      attributeValue: \"\",\n      customValue: \"\",\n      productQuantity: 1,\n      selectedObjPrice: 0,\n    });\n\n    e.preventDefault();\n    document.body.style.background = \"#fff\";\n    this.father.current.style.display = 'block';\n    this.father .current.style.opacity = '1';\n    this.showRoom.current.style.display = 'none';\n    this.showRoom.current.style.zIndex = '0'\n    window.scrollTo(this.state.x, this.state.y);\n  };\n\n  onRemovex = (e) => {\n    this.setState({\n      modelOpen: false,\n    });\n    // Also check here if user has already login you should update isAunthenticated state\n    // Ko hapa ikisha-execute hizi logic itasaidia ku-update automatically\n    // coz this is the method that run on interval to determine the actual user..\n\n    this.executingTokenLogics();\n\n    this.modal.current.style.display = \"none\";\n    this.showRoom.current.style.opacity = \"1\";\n    this.showRoom.current.pointerEvents = \"auto\";\n  };\n\n  selectedOn = (e) => {\n    e.preventDefault();\n    this.preview.current.src = e.target.src;\n  };\n\n  addToCart = async (e) => {\n    e.preventDefault();\n\n    this.executingTokenLogics();\n\n    if (!this.state.isAunthenticated) {\n      this.showRoom.current.style.opacity = \"0.05\";\n      this.showRoom.current.pointerEvents = \"none\";\n      this.modal.current.style.display = \"block\";\n    } else {\n      console.log(\"Hey this user has been loged in, worry out\");\n\n      const tokens = localStorage.getItem(\"authTokens\");\n      console.log(\"Hey this is tokens for you...\");\n      console.log(tokens);\n      const json = JSON.parse(tokens);\n      let access = json.access;\n      console.log(\"Hey this is access token for you\");\n      console.log(access);\n      let decodedAccessData = \"\";\n      try {\n        decodedAccessData = jwt_decode(access);\n      } catch (err) {\n        alert(err.message);\n        if (this.uwanja.current) {\n          this.uwanja.current.value = \"\";\n          this.setState({\n            customValue: \"\",\n          });\n        }\n      }\n      console.log(\"This is the id of the user who loged in \");\n      console.log(decodedAccessData.user_id);\n      const user_id = decodedAccessData.user_id;\n      const productId = this.state.selectedObj.id;\n      console.log(user_id, productId);\n\n      const id = this.state.selectedObj.id;\n      const price = this.state.selectedObjPrice;\n      const quantity = this.state.productQuantity;\n      const value = this.state.attributeValue;\n      const secondPropsAttributeValue = this.state.secondPropsAttributeValue;\n      const customization = this.state.customValue;\n\n      console.log(\"Hey this is user id for you\");\n      console.log(user_id);\n      let check = await fetch(`${BACKEND_ORIGIN}/api/cartExistOrNot/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          user_id,\n          productId: id,\n          price,\n          quantity,\n          customization,\n          value,\n          secondValue: secondPropsAttributeValue,\n        }),\n      });\n\n      console.log(\"Im outside my nigga\");\n      console.log(check);\n      let output = await check.json();\n\n      console.log(\"This is the output we have\");\n      console.log(output);\n\n      if (output.status == false) {\n   \n        try {\n          let response = await fetch(`${BACKEND_ORIGIN}/api/carts/`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              id: user_id,\n              productId,\n              price,\n              quantity,\n              customization,\n              value,\n              secondValue: secondPropsAttributeValue,\n            }),\n          });\n\n          let data = await response.json();\n          console.log(\"Hey this is the response from the server\");\n          console.log(data);\n          if (this.uwanja.current) {\n            this.uwanja.current.value = \"\";\n            this.setState({\n              customValue: \"\",\n            });\n          }\n\n          console.log(\"Even ma mama thinks that my mind has gone\");\n          this.err1.current.style.display = \"block\";\n          this.successInterval = setTimeout(() => {\n            this.err1.current.style.display = \"none\";\n          }, 5000);\n          if (this.uwanja.current) {\n            this.uwanja.current.value = \"\";\n            this.setState({\n              customValue: \"\",\n            });\n          }\n        } catch (err) {\n          alert(err.message);\n          if (this.uwanja.current) {\n            this.uwanja.current.value = \"\";\n            this.setState({\n              customValue: \"\",\n            });\n          }\n        }\n      } else {\n        console.log(\"No need to create a new cart you have one for you....\");\n        let cartByThatUser = output.cart;\n        console.log(\"Hey this is cart by our user....\");\n        console.log(cartByThatUser);\n\n        console.log(\"Even ma mama thinks that my mind has gone\");\n        this.err1.current.style.display = \"block\";\n        this.successInterval = setTimeout(() => {\n          this.err1.current.style.display = \"none\";\n        }, 5000);\n        if (this.uwanja.current) {\n          this.uwanja.current.value = \"\";\n          this.setState({\n            customValue: \"\",\n          });\n        }\n      }\n    }\n  };\n\n  // Hii kazi yake ni kutupa props tu... Kufetch data in server or api and return it in props\n\n  static async getInitialProps(props) {\n    const { gender } = props.query;\n    // then fetch all product of this category on the database...\n\n    let check = await fetch(`${BACKEND_ORIGIN}/api/products_by_gender/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        gender,\n      }),\n    });\n\n    let products = await check.json();\n    products = products.reverse();\n    console.log(\"This is products fetched for you\");\n    console.log(products);\n    return { gender, products };\n  }\n\n  async componentDidMount() {\n    console.log(\n      \"This is value of isAunthenticated \",\n      this.state.isAunthenticated\n    );\n\n    this.executingTokenLogics();\n\n    try {\n      let response = await fetch(`${BACKEND_ORIGIN}/api/products/`);\n\n      let data = await response.json();\n      console.log(\"This is your response from the server about all products\");\n      console.log(data);\n      data = data.reverse();\n\n      await this.setState(\n        {\n          products: data,\n        },\n        () => console.log(this.state.products)\n      ); // this is callback https://stackoverflow.com/questions/42038590/when-to-use-react-setstate-callback\n    } catch (err) {\n      alert(err.message);\n    }\n\n    this.executingTokenLogicsInterval = setInterval(\n      () => this.executingTokenLogics(),\n      1200000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.executingTokenLogicsInterval);\n    clearTimeout(this.errorTimeout);\n    clearTimeout(this.successInterval);\n    console.log(\"Timeout has been cleared...\");\n    // Also in case we clicked the product to see then the background color is changed\n    // to something like black so when a user click register button from there we shoud\n    // make sure the background color of next body restored back to white(default color)\n\n    document.body.style.background = \"#fff\";\n    document.body.style.overflow = \"visible\";\n  }\n\n  updateToken = async (refreshToken) => {\n    let response = await fetch(`${BACKEND_ORIGIN}/api/token/refresh/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ refresh: refreshToken }),\n    });\n\n    let data = await response.json();\n    localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  };\n\n  render() {\n    return (\n      <NavBar isAunthenticated={this.state.isAunthenticated}>\n        <div className={styles.baba} ref={this.father}>\n          {this.props.products.length > 0 ? (\n            <div className={styles.conte}>\n              <p\n                className={styles.hek}\n              >{`Pick your choice for ${this.props.gender} and shop now.`}</p>\n              <MediaQuery minWidth={200} maxWidth={400}>\n                <hr className={styles.ab} />\n              </MediaQuery>\n              <MediaQuery minWidth={401} maxWidth={576}>\n                <hr className={styles.ab} />\n              </MediaQuery>\n              <MediaQuery minWidth={577} maxWidth={899}>\n                <hr className={styles.ab} />\n              </MediaQuery>\n              <MediaQuery minWidth={900}>\n                <hr className={styles.ab} />\n              </MediaQuery>\n\n              <MediaQuery minWidth={200} maxWidth={400}>\n                <Card.Group itemsPerRow={1}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <img\n                        src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        height={200}\n                      />\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          {/* <Header color=\"grey\" content={product.title} /> */}\n                          <MediaQuery maxWidth={319}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 25\n                                ? product.title.substr(0, 24) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={320} maxWidth={350}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 29\n                                ? product.title.substr(0, 28) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={351}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 37\n                                ? product.title.substr(0, 35) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={() =>\n                            Router.push({\n                              pathname: \"/preview\",\n                              query: { product: product.id },\n                            })\n                          }\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n\n              <MediaQuery minWidth={401} maxWidth={576}>\n                <Card.Group itemsPerRow={2}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <MediaQuery maxWidth={499}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={140}\n                        />\n                      </MediaQuery>\n                      <MediaQuery minWidth={500}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={170}\n                        />\n                      </MediaQuery>\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          {/* <Header color=\"grey\" content={product.title} /> */}\n                          <MediaQuery maxWidth={500}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 19\n                                ? product.title.substr(0, 17) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                          <MediaQuery minWidth={501}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 25\n                                ? product.title.substr(0, 24) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={() =>\n                            Router.push({\n                              pathname: \"/preview\",\n                              query: { product: product.id },\n                            })\n                          }\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n\n              <MediaQuery minWidth={577} maxWidth={899}>\n                <Card.Group itemsPerRow={3}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <MediaQuery maxWidth={650}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={140}\n                        />\n                      </MediaQuery>\n                      <MediaQuery minWidth={651} maxWidth={700}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={150}\n                        />\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={701}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={170}\n                        />\n                      </MediaQuery>\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          {/* <Header color=\"grey\" content={product.title} /> */}\n                          <MediaQuery maxWidth={650}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 17\n                                ? product.title.substr(0, 16) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={651}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 20\n                                ? product.title.substr(0, 20) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={() =>\n                            Router.push({\n                              pathname: \"/preview\",\n                              query: { product: product.id },\n                            })\n                          }\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n\n              <MediaQuery minWidth={900} maxWidth={1100}>\n                <Card.Group itemsPerRow={4}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <img\n                        src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        height={150}\n                      />\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          {/* <Header color=\"grey\" content={product.title} /> */}\n                          <MediaQuery maxWidth={990}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 15\n                                ? product.title.substr(0, 15) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                          <MediaQuery minWidth={991}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 23\n                                ? product.title.substr(0, 23) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={this.viewItem}\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n\n              <MediaQuery minWidth={1101}>\n                <Card.Group itemsPerRow={5}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <MediaQuery maxWidth={1200}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={150}\n                        />\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={1201}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={170}\n                        />\n                      </MediaQuery>\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          {/* <Header color=\"grey\" content={product.title} /> */}\n                          <MediaQuery maxWidth={1199}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 15\n                                ? product.title.substr(0, 15) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                          <MediaQuery minWidth={1200}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 23\n                                ? product.title.substr(0, 23) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={this.viewItem}\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n            </div>\n          ) : (\n            <>\n              {/* <p style={{paddingTop: '20%'}}>{`Hey no products found for ${this.props.category} category...`}</p> */}\n\n              <div className={styles.conte}>\n                <MediaQuery maxWidth={899}>\n                  <div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        width: \"100%\",\n\n                        justifyContent: \"center\",\n                        overflowX: \"hidden\",\n                      }}\n                    >\n                      <img\n                        src=\"../static/images/notHere.gif\"\n                        width={200}\n                        height={200}\n                      />\n                    </div>\n                    <div>\n                      <p\n                        style={{\n                          textAlign: \"center\",\n                          fontWeight: \"bold\",\n                          color: \"grey\",\n                          fontSize: \"110%\",\n                        }}\n                      >\n                        {`Oops! Currently we don't have any product for ${this.props.gender}`}\n                        <br />\n                        <button\n                          className=\"btn btn-info\"\n                          style={{ marginTop: \"2%\", fontWeight: \"bold\" }}\n                          onClick={() => Router.push(\"/products\")}\n                        >\n                          Explore all Products\n                        </button>\n                      </p>\n                    </div>\n                  </div>\n                </MediaQuery>\n\n                <MediaQuery minWidth={900} maxWidth={1199}>\n                  <div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        width: \"100%\",\n\n                        justifyContent: \"center\",\n                        overflowX: \"hidden\",\n                      }}\n                    >\n                      <img\n                        src=\"../static/images/notHere.gif\"\n                        width={200}\n                        height={200}\n                      />\n                    </div>\n                    <div>\n                      <p\n                        style={{\n                          textAlign: \"center\",\n                          fontWeight: \"bold\",\n                          color: \"grey\",\n                          fontSize: \"120%\",\n                        }}\n                      >\n                        {`Oops! Currently we don't have any product for ${this.props.gender}`}\n                        <br />\n                        <button\n                          className=\"btn btn-info\"\n                          style={{ marginTop: \"2%\", fontWeight: \"bold\" }}\n                          onClick={() => Router.push(\"/products\")}\n                        >\n                          {\" \"}\n                          Explore all Products\n                        </button>\n                      </p>\n                    </div>\n                  </div>\n                </MediaQuery>\n                <MediaQuery minWidth={1200}>\n                  <div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        width: \"100%\",\n\n                        justifyContent: \"center\",\n                        overflowX: \"hidden\",\n                      }}\n                    >\n                      <img\n                        src=\"../static/images/notHere.gif\"\n                        width={300}\n                        height={300}\n                      />\n                    </div>\n                    <div>\n                      <p\n                        style={{\n                          textAlign: \"center\",\n                          fontWeight: \"bold\",\n                          color: \"grey\",\n                          fontSize: \"130%\",\n                        }}\n                      >\n                        {`Oops! Currently we don't have any product for ${this.props.gender}`}\n                        <br />\n                        <button\n                          className=\"btn btn-info\"\n                          style={{ marginTop: \"2%\", fontWeight: \"bold\" }}\n                          onClick={() => Router.push(\"/products\")}\n                        >\n                          Explore all Products\n                        </button>\n                      </p>\n                    </div>\n                  </div>\n                </MediaQuery>\n              </div>\n            </>\n          )}\n        </div>\n\n        <MediaQuery minWidth={900} maxWidth={1199}>\n          <div className={styles.showRoom} ref={this.showRoom}>\n            <div\n              className={styles.closeBtn}\n              onClick={this.onRemove}\n              ref={this.closeBtn}\n            >\n              &times;\n            </div>\n\n            <MediaQuery minWidth={900} maxWidth={1000}>\n              <Segment>\n                <Grid>\n                  {/* By default first image is the one placed first at canvas/preview section */}\n\n                  <Grid.Column width={9}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"300px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n\n                    <div className={styles.smallImage}>\n                      {this.state.selectedObjImages.map((url) => (\n                        <img\n                          className={styles.smaI}\n                          key={url}\n                          src={`${BACKEND_ORIGIN}${url}`}\n                          width={60}\n                          height={50}\n                          onClick={this.selectedOn}\n                        />\n                      ))}\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width={7}>\n                    <div className={styles.dodo}>\n                      <Header as=\"h3\">\n                        {this.state.selectedObj.title}\n                        <Header.Subheader color=\"orange\">\n                          {this.state.selectedObj.description}\n                        </Header.Subheader>\n                      </Header>\n\n                      <hr />\n                      <span>\n                        <Grid>\n                          <Grid.Column width={9}>\n                            Price:{\" \"}\n                            <Header\n                              as=\"h3\"\n                              color=\"grey\"\n                              content={`${new Intl.NumberFormat(\"en-US\", {\n                                style: \"currency\",\n                                currency: \"Tsh\",\n                                minimumFractionDigits: 0,\n                              }).format(\n                                parseInt(this.state.selectedObjPrice)\n                              )}/=`}\n                            />\n                          </Grid.Column>\n                          <Grid.Column width={7}>\n                            <span className={styles.sp}>\n                              Quantity:{\" \"}\n                              <span className={styles.idadi}>\n                                {this.state.productQuantity}\n                              </span>\n                            </span>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"80%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </Grid.Column>\n                        </Grid>\n                      </span>\n                    </div>\n                    <div>\n                      <div className={styles.customizations}>\n                        {this.state.selectedObj.hasPropertySelection ===\n                          false &&\n                        this.state.selectedObj.isCustomized === false &&\n                        this.state.selectedObj.hasSecondPropertySelection ===\n                          false ? (\n                          <> </>\n                        ) : (\n                          <div className={styles.top}>\n                            <p\n                              className={styles.h}\n                              style={{ fontWeight: \"bold\", fontSize: \"120%\" }}\n                            >\n                              User Customizations\n                            </p>\n\n                            <hr className={styles.hr1} />\n                          </div>\n                        )}\n\n                        <div className={styles.sec}>\n                          <>\n                            <Grid>\n                              {this.state.selectedObj.hasPropertySelection ? (\n                                <Grid.Column width={9}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_property[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.attributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.property_values.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state.attributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    attributeValue: prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {/* lets check for secondPropertySelection 900 - 1200 */}\n                              {this.state.selectedObj\n                                .hasSecondPropertySelection ? (\n                                <Grid.Column width={7}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_secondProps[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.secondPropsAttributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.second_propsValue.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state\n                                                    .secondPropsAttributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    secondPropsAttributeValue:\n                                                      prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {this.state.selectedObj.isCustomized ? (\n                                <>\n                                  <span\n                                    className={styles.bichwa}\n                                    style={{ fontSize: \"15px\" }}\n                                  >\n                                    Customize product's image/text.\n                                  </span>\n                                  <p className={styles.sub}>\n                                    *** Leave blank to use default one.\n                                    <br />\n                                    *** In case of image write a web link to\n                                    that image\n                                  </p>\n                                  <textarea\n                                    row={2}\n                                    cols={30}\n                                    className={this.tarea}\n                                    onChange={(event) =>\n                                      this.setState({\n                                        customValue: event.target.value,\n                                      })\n                                    }\n                                    style={{\n                                      marginBottom: \"3%\",\n                                      marginLeft: \"3%\",\n                                    }}\n                                    ref={this.uwanja}\n                                  ></textarea>\n                                </>\n                              ) : (\n                                <></>\n                              )}\n                            </Grid>\n                          </>\n                        </div>\n                      </div>\n                      <div className={styles.down}>\n                        <div className={styles.err} ref={this.err}>\n                          <Message error>\n                            <Message.Header>\n                              Error, You needed to login\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click login button above and login to enable add to\n                            cart feature.\n                          </Message>\n                        </div>\n\n                        <div className={styles.err1} ref={this.err1}>\n                          <Message success>\n                            <Message.Header>\n                              Success, Item has been added to cart\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click the cart icon above to preview your cart.\n                          </Message>\n                        </div>\n\n                        <Button\n                          animated\n                          primary\n                          size=\"medium\"\n                          fluid\n                          onClick={this.addToCart}\n                        >\n                          <Button.Content visible>Add to Cart</Button.Content>\n                          <Button.Content hidden>\n                            <Icon name=\"shop\" />\n                          </Button.Content>\n                        </Button>\n                      </div>\n                    </div>\n                  </Grid.Column>\n                </Grid>\n\n                <div className={styles.footerSec} style={{ marginTop: \"5%\" }}>\n                  <hr className={styles.footerHr} />\n                  <Header\n                    textAlign=\"center\"\n                    content=\"Powered by Online Tec\"\n                    color=\"grey\"\n                  />\n                </div>\n              </Segment>\n            </MediaQuery>\n\n            <MediaQuery minWidth={1001}>\n              <Segment>\n                <Grid>\n                  {/* By default first image is the one placed first at canvas/preview section */}\n\n                  <Grid.Column width={9}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"400px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n\n                    <div className={styles.smallImage}>\n                      {this.state.selectedObjImages.map((url) => (\n                        <img\n                          className={styles.smaI}\n                          key={url}\n                          src={`${BACKEND_ORIGIN}${url}`}\n                          width={60}\n                          height={50}\n                          onClick={this.selectedOn}\n                        />\n                      ))}\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width={7}>\n                    <div className={styles.dodo}>\n                      <Header as=\"h3\">\n                        {this.state.selectedObj.title}\n                        <Header.Subheader color=\"orange\">\n                          {this.state.selectedObj.description}\n                        </Header.Subheader>\n                      </Header>\n                      <hr />\n                      <span>\n                        <Grid>\n                          <Grid.Column width={9}>\n                            Price:{\" \"}\n                            <Header\n                              as=\"h3\"\n                              color=\"grey\"\n                              content={`${new Intl.NumberFormat(\"en-US\", {\n                                style: \"currency\",\n                                currency: \"Tsh\",\n                                minimumFractionDigits: 0,\n                              }).format(\n                                parseInt(this.state.selectedObjPrice)\n                              )}/=`}\n                            />\n                          </Grid.Column>\n                          <Grid.Column width={7}>\n                            <span className={styles.sp}>\n                              Quantity:{\" \"}\n                              <span className={styles.idadi}>\n                                {this.state.productQuantity}\n                              </span>\n                            </span>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"72%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </Grid.Column>\n                        </Grid>\n                      </span>\n                    </div>\n                    <div>\n                      <div className={styles.customizations}>\n                        {this.state.selectedObj.hasPropertySelection ===\n                          false &&\n                        this.state.selectedObj.isCustomized === false &&\n                        this.state.selectedObj.hasSecondPropertySelection ===\n                          false ? (\n                          <> </>\n                        ) : (\n                          <div className={styles.top}>\n                            <h2\n                              className={styles.h}\n                              style={{ fontWeight: \"bold\", fontSize: \"130%\" }}\n                            >\n                              User Customizations\n                            </h2>\n\n                            <hr className={styles.hr1} />\n                          </div>\n                        )}\n\n                        <div className={styles.sec}>\n                          <>\n                            <Grid>\n                              {this.state.selectedObj.hasPropertySelection ? (\n                                <Grid.Column width={9}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_property[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.attributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.property_values.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state.attributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    attributeValue: prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {/* lets check for secondPropertySelection 900 - 1200 */}\n                              {this.state.selectedObj\n                                .hasSecondPropertySelection ? (\n                                <Grid.Column width={7}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_secondProps[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.secondPropsAttributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.second_propsValue.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state\n                                                    .secondPropsAttributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    secondPropsAttributeValue:\n                                                      prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {this.state.selectedObj.isCustomized ? (\n                                <>\n                                  <span\n                                    className={styles.bichwa}\n                                    style={{ fontSize: \"15px\" }}\n                                  >\n                                    Customize product's image/text.\n                                  </span>\n                                  <p className={styles.sub}>\n                                    *** Leave blank to use default one.\n                                    <br />\n                                    *** In case of image write a web link to\n                                    that image\n                                  </p>\n                                  <textarea\n                                    row={2}\n                                    cols={32}\n                                    className={this.tarea}\n                                    onChange={(event) =>\n                                      this.setState({\n                                        customValue: event.target.value,\n                                      })\n                                    }\n                                    style={{\n                                      marginBottom: \"3%\",\n                                      marginLeft: \"3%\",\n                                    }}\n                                    ref={this.uwanja}\n                                  ></textarea>\n                                </>\n                              ) : (\n                                <></>\n                              )}\n                            </Grid>\n                          </>\n                        </div>\n                      </div>\n                      <div className={styles.down}>\n                        <div className={styles.err} ref={this.err}>\n                          <Message error>\n                            <Message.Header>\n                              Error, You needed to login\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click login button above and login to enable add to\n                            cart feature.\n                          </Message>\n                        </div>\n\n                        <div className={styles.err1} ref={this.err1}>\n                          <Message success>\n                            <Message.Header>\n                              Success, Item has been added to cart\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click the cart icon above to preview your cart.\n                          </Message>\n                        </div>\n\n                        <Button\n                          animated\n                          primary\n                          size=\"medium\"\n                          fluid\n                          onClick={this.addToCart}\n                        >\n                          <Button.Content visible>Add to Cart</Button.Content>\n                          <Button.Content hidden>\n                            <Icon name=\"shop\" />\n                          </Button.Content>\n                        </Button>\n                      </div>\n                    </div>\n                  </Grid.Column>\n                </Grid>\n\n                <div className={styles.footerSec} style={{ marginTop: \"2%\" }}>\n                  <hr className={styles.footerHr} />\n                  <Header\n                    textAlign=\"center\"\n                    content=\"Powered by Online Tec\"\n                    color=\"grey\"\n                  />\n                </div>\n              </Segment>\n            </MediaQuery>\n          </div>\n        </MediaQuery>\n\n        <MediaQuery minWidth={1200}>\n          <div className={styles.showRoom} ref={this.showRoom}>\n            <div\n              className={styles.closeBtn}\n              onClick={this.onRemove}\n              ref={this.closeBtn}\n            >\n              &times;\n            </div>\n\n            <Segment>\n              <Grid>\n                {/* By default first image is the one placed first at canvas/preview section */}\n\n                <Grid.Column width={9}>\n                  <MediaQuery minWidth={1200} maxWidth={1340}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"380px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={1341} maxWidth={1500}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"400px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={1501}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"500px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <div className={styles.smallImage}>\n                    {this.state.selectedObjImages.map((url) => (\n                      <img\n                        className={styles.smaI}\n                        key={url}\n                        src={`${BACKEND_ORIGIN}${url}`}\n                        width={60}\n                        height={50}\n                        onClick={this.selectedOn}\n                      />\n                    ))}\n                  </div>\n                </Grid.Column>\n                <Grid.Column width={7}>\n                  <div className={styles.dodo}>\n                    <Header as=\"h3\">\n                      {this.state.selectedObj.title}\n                      <Header.Subheader color=\"orange\">\n                        {this.state.selectedObj.description}\n                      </Header.Subheader>\n                    </Header>\n\n                    <hr />\n                    <span>\n                      <Grid>\n                        <Grid.Column width={9}>\n                          Price:{\" \"}\n                          <Header\n                            as=\"h3\"\n                            color=\"grey\"\n                            content={`${new Intl.NumberFormat(\"en-US\", {\n                              style: \"currency\",\n                              currency: \"Tsh\",\n                              minimumFractionDigits: 0,\n                            }).format(\n                              parseInt(this.state.selectedObjPrice)\n                            )}/=`}\n                          />\n                        </Grid.Column>\n                        <Grid.Column width={7}>\n                          <span className={styles.sp}>\n                            Quantity:{\" \"}\n                            <span className={styles.idadi}>\n                              {this.state.productQuantity}\n                            </span>\n                          </span>\n                          <MediaQuery minWidth={1200} maxWidth={1340}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"58%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={1341} maxWidth={1500}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"52%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={1501}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"46%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n                        </Grid.Column>\n                      </Grid>\n                    </span>\n                  </div>\n                  <div>\n                    <div className={styles.customizations}>\n                      {this.state.selectedObj.hasPropertySelection === false &&\n                      this.state.selectedObj.isCustomized === false &&\n                      this.state.selectedObj.hasSecondPropertySelection ===\n                        false ? (\n                        <> </>\n                      ) : (\n                        <div className={styles.top}>\n                          <h2\n                            className={styles.h}\n                            style={{ fontWeight: \"bold\", fontSize: \"130%\" }}\n                          >\n                            User Customizations\n                          </h2>\n\n                          <hr className={styles.hr1} />\n                        </div>\n                      )}\n\n                      <div className={styles.sec}>\n                        <>\n                          <Grid>\n                            {this.state.selectedObj.hasPropertySelection ? (\n                              <Grid.Column width={9}>\n                                <>\n                                  <span>\n                                    <span\n                                      className={styles.pName}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {\n                                        Object.keys(\n                                          this.state.selectedObj.map_property[0]\n                                        )[0]\n                                      }\n                                      :\n                                    </span>\n                                    <span\n                                      className={styles.pValue}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {this.state.attributeValue}\n                                    </span>\n                                  </span>\n                                  <Form>\n                                    {this.state.selectedObj.property_values.map(\n                                      (prop) => (\n                                        <div\n                                          key={prop}\n                                          className={styles.pullUp}\n                                        >\n                                          <Form.Field>\n                                            <Radio\n                                              label={prop}\n                                              name=\"radioGroup\"\n                                              value={prop}\n                                              checked={\n                                                this.state.attributeValue ===\n                                                prop\n                                              }\n                                              onChange={() =>\n                                                this.setState({\n                                                  attributeValue: prop,\n                                                })\n                                              }\n                                            />\n                                          </Form.Field>\n                                        </div>\n                                      )\n                                    )}\n                                  </Form>\n                                </>\n                              </Grid.Column>\n                            ) : (\n                              <></>\n                            )}\n\n                            {/* lets check for secondPropertySelection 900 - 1200 */}\n                            {this.state.selectedObj\n                              .hasSecondPropertySelection ? (\n                              <Grid.Column width={7}>\n                                <>\n                                  <span>\n                                    <span\n                                      className={styles.pName}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {\n                                        Object.keys(\n                                          this.state.selectedObj\n                                            .map_secondProps[0]\n                                        )[0]\n                                      }\n                                      :\n                                    </span>\n                                    <span\n                                      className={styles.pValue}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {this.state.secondPropsAttributeValue}\n                                    </span>\n                                  </span>\n                                  <Form>\n                                    {this.state.selectedObj.second_propsValue.map(\n                                      (prop) => (\n                                        <div\n                                          key={prop}\n                                          className={styles.pullUp}\n                                        >\n                                          <Form.Field>\n                                            <Radio\n                                              label={prop}\n                                              name=\"radioGroup\"\n                                              value={prop}\n                                              checked={\n                                                this.state\n                                                  .secondPropsAttributeValue ===\n                                                prop\n                                              }\n                                              onChange={() =>\n                                                this.setState({\n                                                  secondPropsAttributeValue:\n                                                    prop,\n                                                })\n                                              }\n                                            />\n                                          </Form.Field>\n                                        </div>\n                                      )\n                                    )}\n                                  </Form>\n                                </>\n                              </Grid.Column>\n                            ) : (\n                              <></>\n                            )}\n\n                            {this.state.selectedObj.isCustomized ? (\n                              <>\n                                <span\n                                  className={styles.bichwa}\n                                  style={{ fontSize: \"15px\" }}\n                                >\n                                  Customize product's image/text.\n                                </span>\n                                <p className={styles.sub}>\n                                  *** Leave blank to use default one.\n                                  <br />\n                                  *** In case of image write a web link to that\n                                  image\n                                </p>\n                                <textarea\n                                  row={2}\n                                  cols={32}\n                                  className={this.tarea}\n                                  onChange={(event) =>\n                                    this.setState({\n                                      customValue: event.target.value,\n                                    })\n                                  }\n                                  style={{\n                                    marginBottom: \"3%\",\n                                    marginLeft: \"3%\",\n                                  }}\n                                  ref={this.uwanja}\n                                ></textarea>\n                              </>\n                            ) : (\n                              <></>\n                            )}\n                          </Grid>\n                        </>\n                      </div>\n                    </div>\n                    <div className={styles.down}>\n                      <div className={styles.err} ref={this.err}>\n                        <Message error>\n                          <Message.Header>\n                            Error, You needed to login\n                          </Message.Header>\n                          <Icon name=\"warning sign\" />\n                          Click login button above and login to enable add to\n                          cart feature.\n                        </Message>\n                      </div>\n\n                      <div className={styles.err1} ref={this.err1}>\n                        <Message success>\n                          <Message.Header>\n                            Success, Item has been added to cart\n                          </Message.Header>\n                          <Icon name=\"warning sign\" />\n                          Click the cart icon above to preview your cart.\n                        </Message>\n                      </div>\n\n                      <Button\n                        animated\n                        primary\n                        size=\"medium\"\n                        fluid\n                        onClick={this.addToCart}\n                      >\n                        <Button.Content visible>Add to Cart</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"shop\" />\n                        </Button.Content>\n                      </Button>\n                    </div>\n                  </div>\n                </Grid.Column>\n              </Grid>\n\n              <div className={styles.footerSec} style={{ marginTop: \"2%\" }}>\n                <hr className={styles.footerHr} />\n                <Header\n                  textAlign=\"center\"\n                  content=\"Powered by Online Tec\"\n                  color=\"grey\"\n                />\n              </div>\n            </Segment>\n          </div>\n        </MediaQuery>\n\n        <div className={styles.model} ref={this.modal}>\n          <div\n            className={styles.closeBtnx}\n            onClick={this.onRemovex}\n            ref={this.closeBtnx}\n          >\n            &times;\n          </div>\n\n          <Sign closeLoginPanel={this.onRemovex} />\n        </div>\n\n        <style jsx global>{`\n          body {\n            background: rgb(236, 236, 236);\n          }\n        `}</style>\n      </NavBar>\n    );\n  }\n}\n\nexport default ShowRoom;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/index.js",["184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224"],[],"import React, { Component } from \"react\";\nimport NavBar from \"../components/NavBar\";\nimport Sign from \"../components/Sign\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n  Card,\n  Radio,\n  Form,\n  Segment,\n  Modal,\n  Image,\n  Icon,\n  Header,\n  Button,\n  Label,\n  Grid,\n  Message,\n} from \"semantic-ui-react\";\nimport BACKEND_ORIGIN from \"../utils/domain\";\nimport styles from \"../static/css/start.module.css\";\nimport Router from \"next/router\";\n\n//import Me// Hii jinsi ya ku-import hivi ndo ime-solve tatizo la media-Queries kukataa kusema kuwa there is\n// Hydaration error na now kila kitu kinaenda sawa nahisi kila unavyooimport hii ssr inabidi iwe\n// False... Give credit to this man...https://lightrun.com/answers/yocontra-react-responsive-nextjs-expected-server-html-to-contain-a-matching-div-in-div\n// Haa hii error imeniangaisha sana mpaka nikataka nikate tamaa but now imekuwa solved...diaQuery from 'react-responsive'\nimport dynamic from \"next/dynamic\";\n\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n\n// const router = useRouter();\n// My prototype website>>> https://www.tanishq.co.in/shop/kids-jewellery\n\nclass Testing extends Component {\n  state = {\n    isAunthenticated: false,\n    products: [],\n    productQuantity: 1,\n    attributeValue: \"\", // Lazima tuwe na default value hapa.. Yaani pale user anapo-select/click the image/product this value should be updated as the default propertyValue.. Ko hii naweza ikaanza kama '' but baadae ikaja kuwa updated pale user anavyoselect picha....\n    selectedObj: {},\n    selectedObjPrice: 0,\n    selectedObjImages: [],\n    modelOpen: false,\n    customValue: \"\",\n    x: 0,\n    y: 0,\n    addedToCart: false, // nimetest hapa 'false' in programming ni 0 and true = 1 nimetest hapa kwenye node kuchukua false + 1 = 1.. ko you can perform mathematical operations with boolean\n    secondPropsAttributeValue: \"\", // this will be used to store the 'first' value of the secondPropsAttributes so as to use it initially when user want to view product in viewItem...\n  };\n\n  constructor(props) {\n    super(props);\n    this.father = React.createRef();\n    this.showRoom = React.createRef();\n    this.small1 = React.createRef();\n    this.small2 = React.createRef();\n    this.small3 = React.createRef();\n    this.preview = React.createRef();\n    this.explain = React.createRef();\n    this.closeBtn = React.createRef();\n    this.err = React.createRef();\n    this.err1 = React.createRef();\n    this.modal = React.createRef();\n    this.closeBtnx = React.createRef();\n    this.uwanja = React.createRef();\n  }\n\n  executingTokenLogics = () => {\n    try {\n      const tokens = localStorage.getItem(\"authTokens\")\n        ? JSON.parse(localStorage.getItem(\"authTokens\"))\n        : null;\n      if (!tokens) {\n        console.log(\"You needed to login, no records\");\n        this.setState({ isAunthenticated: false });\n        return;\n      }\n      const decodedRefreshToken = jwt_decode(tokens.refresh);\n      const expireRefreshTime = decodedRefreshToken.exp;\n      console.log(\"Hey this is the expire date of the refreshToken\");\n      console.log(expireRefreshTime);\n      console.log(\"Lets try to access the json access token\");\n      console.log(tokens.access);\n      const decodedAccessData = jwt_decode(tokens.access);\n      console.log(\"This is expiring time for you...\");\n      console.log(decodedAccessData);\n      const expireAccessTime = decodedAccessData.exp;\n      console.log(expireAccessTime);\n      const diff = expireAccessTime * 1000 - Date.now();\n      if (diff < 1) {\n        console.log(\"Hey we need to either update or make user login again\");\n        if (expireRefreshTime * 1000 - Date.now < 1) {\n          console.log(\n            \"Even ur refresh token has already been expired we need you to login again....\"\n          );\n          this.setState({\n            isAunthenticated: false,\n          });\n          return;\n        }\n        console.log(\n          \"Our refresh token is alive you should use it to update your access token\"\n        );\n\n        this.updateToken(tokens.refresh);\n\n        this.setState({\n          isAunthenticated: true,\n        });\n      } else {\n        this.setState({\n          isAunthenticated: true,\n        });\n      }\n    } catch (InvalidTokenError) {\n      // so this will only capture the InvalidTokenError which is caused by using already expired-token because and I said automatically when\n      // we made request to the jwd to decode it will return error that our token is already expired and by default as we coded it will update\n      // our localstorage to look like >>> authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n\n      console.log(InvalidTokenError.message);\n      console.log(\n        \"Invalid token specified since, when the token is expired the jwt automatically change your storage and it ill look like this\"\n      );\n      // authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n      this.setState({\n        isAunthenticated: false,\n      });\n    }\n  };\n\n  viewItem = async (e) => {\n    console.log(\"This is position for you...\");\n    console.log(window.pageYOffset, window.pageXOffset);\n    this.setState({\n      y: window.pageYOffset,\n      x: window.pageXOffset,\n    });\n    console.log(e.target.id);\n    const product = this.state.products.find(\n      (product) => product.id === parseInt(e.target.id)\n    );\n    console.log(\"This is the product we captured\");\n    console.log(product);\n\n    await this.setState({\n      selectedObj: product,\n      selectedObjPrice: product.price,\n      selectedObjImages: product.get_urls,\n    });\n\n    if (product.hasPropertySelection) {\n      await this.setState({\n        attributeValue: Object.values(\n          this.state.selectedObj.map_property[0]\n        )[0],\n      });\n    }\n\n    if (product.hasSecondPropertySelection) {\n      await this.setState({\n        secondPropsAttributeValue: Object.values(\n          this.state.selectedObj.map_secondProps[0]\n        )[0],\n      });\n    }\n\n    window.scrollTo(0, 0);\n    \n    this.showRoom.current.style.zIndex = '1'\n\n    \n    this.father.current.style.display = 'none'\n    document.body.style.background =\n      \"linear-gradient(rgba(0, 0, 0, .5), rgba(0, 0, 0, .4))\";\n    \n    if (this.showRoom.current) {\n      this.showRoom.current.style.display = \"block\";\n    } else {\n      console.log(\"THE SHOWROOM REF IS NOT ASSIGNED YET IT RETURNS NULL\");\n    }\n  };\n\n  onIncrease = () => {\n    this.setState({\n      productQuantity: this.state.productQuantity + 1,\n    });\n\n    // Hapa itaji-override na kuzidisha another sum used\n    this.setState({\n      selectedObjPrice:\n        this.state.selectedObjPrice + this.state.selectedObj.price,\n    });\n  };\n\n  onDecrease = () => {\n    if (this.state.productQuantity > 1) {\n      this.setState({\n        productQuantity: this.state.productQuantity - 1,\n      });\n\n      this.setState({\n        selectedObjPrice:\n          this.state.selectedObjPrice - this.state.selectedObj.price,\n      });\n    }\n  };\n\n  onRemove = (e) => {\n    // Kuna state hapa inabidi uzibadilishe ziende kwenye default\n    this.setState({\n      selectedObj: {},\n      attributeValue: \"\",\n      customValue: \"\",\n      productQuantity: 1,\n      selectedObjPrice: 0,\n    });\n\n    e.preventDefault();\n   \n    document.body.style.background = \"#fff\";\n    this.father.current.style.display = 'block';\n    this.father .current.style.opacity = '1';\n    this.showRoom.current.style.display = 'none';\n    this.showRoom.current.style.zIndex = '0'\n\n    window.scrollTo(this.state.x, this.state.y);\n  };\n\n  onRemovex = (e) => {\n    this.setState({\n      modelOpen: false,\n    });\n    // Also check here if user has already login you should update isAunthenticated state\n    // Ko hapa ikisha-execute hizi logic itasaidia ku-update automatically\n    // coz this is the method that run on interval to determine the actual user..\n\n    this.executingTokenLogics();\n\n    // e.preventDefault();\n    this.modal.current.style.display = \"none\";\n    this.showRoom.current.style.opacity = \"1\";\n    this.showRoom.current.style.pointerEvents = \"auto\";\n  };\n\n  selectedOn = (e) => {\n    e.preventDefault();\n    this.preview.current.src = e.target.src;\n  };\n\n  addToCart = async (e) => {\n    // On add to cart you should check if the user has been logged in.... Since here we\n    // have functionality already which checks everytime if the user has been loged in so\n    // i think we should have state which get updated everytime with user id if he is loged\n    // in..... we have state of 'isAuthenticate'\n    e.preventDefault();\n    console.log(\n      \"This is second props stored\",\n      this.state.secondPropsAttributeValue\n    );\n\n    // Also check here if user has already login you should update isAunthenticated state\n    // Ko hapa ikisha-execute hizi logic itasaidia ku-update automatically\n    // coz this is the method that run on interval to determine the actual user..\n\n    this.executingTokenLogics();\n\n    if (!this.state.isAunthenticated) {\n      this.showRoom.current.style.opacity = \"0.05\";\n      this.showRoom.current.style.pointerEvents = \"none\";\n      this.modal.current.style.display = \"block\";\n    } else {\n      console.log(\"Hey this user has been loged in, worry out\");\n\n      const tokens = localStorage.getItem(\"authTokens\");\n      console.log(\"Hey this is tokens for you...\");\n      console.log(tokens);\n      const json = JSON.parse(tokens);\n      let access = json.access;\n      console.log(\"Hey this is access token for you\");\n      console.log(access);\n      let decodedAccessData = \"\";\n      try {\n        decodedAccessData = jwt_decode(access);\n      } catch (err) {\n        if (this.uwanja.current) {\n          this.uwanja.current.value = \"\";\n          this.setState({\n            customValue: \"\",\n          });\n        }\n      }\n      console.log(\"This is the id of the user who loged in \");\n      console.log(decodedAccessData.user_id);\n      const user_id = decodedAccessData.user_id;\n\n      const productId = this.state.selectedObj.id;\n      console.log(user_id, productId);\n\n      const id = this.state.selectedObj.id;\n      const price = this.state.selectedObjPrice;\n      const quantity = this.state.productQuantity;\n      const value = this.state.attributeValue;\n      const secondPropsAttributeValue = this.state.secondPropsAttributeValue;\n      const customization = this.state.customValue;\n\n      console.log(\"Hey this is user id for you\");\n      console.log(user_id);\n      let check = await fetch(`${BACKEND_ORIGIN}/api/cartExistOrNot/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          user_id,\n          productId: id,\n          price,\n          quantity,\n          customization,\n          value,\n          secondValue: secondPropsAttributeValue,\n        }),\n      });\n\n      console.log(\"Im outside my nigga\");\n      console.log(check);\n      let output = await check.json();\n\n      console.log(\"This is the output we have\");\n      console.log(output);\n\n      if (output.status == false) {\n       \n        try {\n          let response = await fetch(`${BACKEND_ORIGIN}/api/carts/`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              id: user_id,\n              productId,\n              price,\n              quantity,\n              customization,\n              value,\n              secondValue: secondPropsAttributeValue,\n            }),\n          });\n\n          let data = await response.json();\n          console.log(\"Hey this is the response from the server\");\n          console.log(data);\n          if (this.uwanja.current) {\n            this.uwanja.current.value = \"\";\n            this.setState({\n              customValue: \"\",\n            });\n          }\n          console.log(\"This is success for you...\");\n          this.err1.current.style.display = \"block\";\n          this.successInterval = setTimeout(() => {\n            this.err1.current.style.display = \"none\";\n          }, 5000);\n          if (this.uwanja.current) {\n            this.uwanja.current.value = \"\";\n            this.setState({\n              customValue: \"\",\n            });\n          }\n        } catch (err) {\n         \n          if (this.uwanja.current) {\n            this.uwanja.current.value = \"\";\n            this.setState({\n              customValue: \"\",\n            });\n          }\n        }\n      } else {\n        console.log(\"No need to create a new cart you have one for you....\");\n\n        let cartByThatUser = output.cart;\n        console.log(\"Hey this is cart by our user....\");\n        console.log(cartByThatUser);\n\n        console.log(\"Even ma mama thinks that my mind has gone\");\n        this.err1.current.style.display = \"block\";\n        this.successInterval = setTimeout(() => {\n          this.err1.current.style.display = \"none\";\n        }, 5000);\n\n        if (this.uwanja.current) {\n          this.uwanja.current.value = \"\";\n          this.setState({\n            customValue: \"\",\n          });\n        }\n      }\n    }\n  };\n\n  async componentDidMount() {\n    this.executingTokenLogics();\n\n    try {\n      let response = await fetch(`${BACKEND_ORIGIN}/api/products/`);\n\n      let data = await response.json();\n      console.log(\"This is your response from the server about all products\");\n      console.log(data);\n      data = data.reverse();\n\n      await this.setState(\n        {\n          products: data,\n        },\n        () => console.log(this.state.products)\n      ); // this is callback https://stackoverflow.com/questions/42038590/when-to-use-react-setstate-callback\n    } catch (err) {\n      console.log(err.message);\n    }\n\n    this.executingTokenLogicsInterval = setInterval(\n      () => this.executingTokenLogics(),\n      120000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.executingTokenLogicsInterval);\n    clearTimeout(this.errorTimeout);\n    clearTimeout(this.successInterval);\n    console.log(\"Timeout has been cleared...\");\n    // Also in case we clicked the product to see then the background color is changed\n    // to something like black so when a user click register button from there we shoud\n    // make sure the background color of next body restored back to white(default color)\n\n    document.body.style.background = \"#fff\";\n    document.body.style.overflow = \"visible\";\n  }\n\n  updateToken = async (refreshToken) => {\n    let response = await fetch(`${BACKEND_ORIGIN}/api/token/refresh/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ refresh: refreshToken }),\n    });\n\n    let data = await response.json();\n    localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  };\n  // https://stackoverflow.com/questions/71706064/react-18-hydration-failed-because-the-initial-ui-does-not-match-what-was-render...\n  render() {\n    return (\n      <NavBar isAunthenticated={this.state.isAunthenticated}>\n        <div className={styles.baba} ref={this.father}>\n          <div className={styles.conte}>\n            <p className={styles.hek}>Shop By Category </p>\n            <hr className={styles.hekh} />\n            <MediaQuery minWidth={200} maxWidth={400}>\n              <Card.Group itemsPerRow={1}>\n                <Card key=\"1\">\n                  <Image src=\"../static/images/group.jpeg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Glass</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Explore all kinds of glasses to satisfy you. Pick one according to your will\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Glass\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"2\">\n                  <img src=\"../static/images/index.jpeg\" height={200} />\n                  <Card.Content>\n                    <Card.Header>T-Shirt</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Customize and add a brand on your t-shirt based on your features.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"T-Shirt\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"3\">\n                  <Image src=\"../static/images/neck.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Necklace/Chains</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Different pendants has been attached to make the product looks good.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Necklace/Chain\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"4\">\n                  <Image src=\"../static/images/saa2.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Watch & Bracelet</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Pick watches of any brand you die to have in your wrist such as Rolex, Casio\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Watch & Bracelets\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"5\">\n                  <Image src=\"../static/images/ring1.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Rings</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Have a rings that make you and your couple feel better, pick one for you.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Rings\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n\n                <Card key=\"6\">\n                  <Image src=\"../static/images/other.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Others</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Products such as hoodies, caps, bags, shoes are found here. Step up by clicking bottom below.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Other\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n              </Card.Group>\n            </MediaQuery>\n            <MediaQuery minWidth={401} maxWidth={576}>\n              <Card.Group itemsPerRow={2}>\n                <Card key=\"1\">\n                  <img src=\"../static/images/group.jpeg\" height={180} />\n\n                  <Card.Content>\n                    <Card.Header>Glass</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Explore all kinds of glasses to satisfy you. Pick one for you want.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Glass\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"2\">\n                  <img src=\"../static/images/index.jpeg\" height={180} />\n\n                  <Card.Content>\n                    <Card.Header>T-Shirt</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Customize and add a brand on your t-shirt based on your features.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"T-Shirt\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"3\">\n                  <Image src=\"../static/images/neck.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Necklace/Chain</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Different pendants has been attached to make the product looks good.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Necklace/Chain\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"4\">\n                  <Image src=\"../static/images/saa2.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Watch/Bracelet</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Pick watches of any brand you die to have in your wrist such as Rolex, Casio\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Watch & Bracelets\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"5\">\n                  <img src=\"../static/images/ring1.jpg\" height={180} />\n                  <Card.Content>\n                    <Card.Header>Rings</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Have a rings that make you and your couple feel better, pick one for you.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Rings\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n\n                <Card key=\"6\">\n                  <img src=\"../static/images/other.jpg\" height={180} />\n                  <Card.Content>\n                    <Card.Header>Others</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Products such as hoodies, caps, bags, shoes are available with offer!\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Other\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n              </Card.Group>\n            </MediaQuery>\n            <MediaQuery minWidth={577} maxWidth={700}>\n              <Card.Group itemsPerRow={2}>\n                <Card key=\"1\">\n                  <img src=\"../static/images/group.jpeg\" height={250} />\n                  <Card.Content>\n                    <Card.Header>Glass</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Explore all kinds of glasses to satisfy you. Pick one according to your will\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Glass\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"2\">\n                  <img src=\"../static/images/index.jpeg\" height={250} />\n                  <Card.Content>\n                    <Card.Header>T-Shirt</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Customize and add a brand on your t-shirt based on your features.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"T-Shirt\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"3\">\n                  <Image src=\"../static/images/neck.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Necklace/Chains</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Different pendants has been attached to make the product looks good.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Necklace/Chain\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"4\">\n                  <Image src=\"../static/images/saa2.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Watch & Bracelet</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Pick watches of any brand you die to have in your wrist such as Rolex, Casio\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Watch & Bracelets\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"5\">\n                  <img src=\"../static/images/ring1.jpg\" height={300} />\n                  <Card.Content>\n                    <Card.Header>Rings</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Have a rings that make you and your couple feel better, pick one for you.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Rings\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"6\">\n                  <img src=\"../static/images/other.jpg\" height={300} />\n                  <Card.Content>\n                    <Card.Header>Others</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Products such as hoodies, caps, bags, shoes are are available with offer!\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Other\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n              </Card.Group>\n            </MediaQuery>\n\n            <MediaQuery minWidth={700} maxWidth={899}>\n              <Card.Group itemsPerRow={3}>\n                <Card key=\"1\">\n                  <img src=\"../static/images/group.jpeg\" height={200} />\n                  <Card.Content>\n                    <Card.Header>Glass</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Explore all kinds of glasses to satisfy you. Pick one for you.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Glass\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"2\">\n                  <img src=\"../static/images/index.jpeg\" height={200} />\n                  <Card.Content>\n                    <Card.Header>T-Shirt</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Customize and add a brand on your t-shirt based on your features.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"T-Shirt\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"3\">\n                  <img src=\"../static/images/neck.jpg\" height={200} />\n                  <Card.Content>\n                    <Card.Header>Necklace/Chains</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Different pendants has been attached to make the product looks good.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Necklace/Chain\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"4\">\n                  <Image src=\"../static/images/saa2.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Watch & Bracelet</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Pick watches of any brand you die to have in your wrist such as Rolex, Casio\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Watch & Bracelets\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"5\">\n                  <Image src=\"../static/images/ring1.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Rings</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Have a rings that make you and your couple feel better, pick one for you.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Rings\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n\n                <Card key=\"6\">\n                  <Image src=\"../static/images/other.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Others</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Products such as hoodies, caps, bags, shoes are are available with offer!\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Other\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n              </Card.Group>\n            </MediaQuery>\n\n            <MediaQuery minWidth={900} maxWidth={991}>\n              <Card.Group itemsPerRow={3}>\n                <Card key=\"1\">\n                  <img src=\"../static/images/group.jpeg\" height={200} />\n                  <Card.Content>\n                    <Card.Header>Glass</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Explore all kinds of glasses to satisfy you. Pick one for you.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Glass\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"2\">\n                  <img src=\"../static/images/index.jpeg\" height={200} />\n                  <Card.Content>\n                    <Card.Header>T-Shirt</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Customize and add a brand on your t-shirt based on your features.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"T-Shirt\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"3\">\n                  <img src=\"../static/images/neck.jpg\" height={200} />\n                  <Card.Content>\n                    <Card.Header>Necklace/Chains</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Different pendants has been attached to make the product looks good.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Necklace/Chain\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"4\">\n                  <Image src=\"../static/images/saa2.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Watch & Bracelet</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Pick watches of any brand you die to have in your wrist such as Rolex, Casio\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Watch & Bracelets\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"5\">\n                  <Image src=\"../static/images/ring1.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Rings</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Have a rings that make you and your couple feel better, pick one for you.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Rings\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n\n                <Card key=\"6\">\n                  <Image src=\"../static/images/other.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Others</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Products such as hoodies, caps, bags, shoes are are available with offer!\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Other\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n              </Card.Group>\n            </MediaQuery>\n\n            <MediaQuery minWidth={992} maxWidth={1199}>\n              <Card.Group itemsPerRow={5}>\n                <Card key=\"1\">\n                  <img src=\"../static/images/group.jpeg\" height={160} />\n                  <Card.Content>\n                    <Card.Header>Glass</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Explore all kinds of glasses to satisfy you. Pick one according to your will\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Glass\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"2\">\n                  <img src=\"../static/images/index.jpeg\" height={160} />\n                  <Card.Content>\n                    <Card.Header>T-Shirt</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Customize and add a brand on your t-shirt based on your features.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"T-Shirt\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"3\">\n                  <img src=\"../static/images/neck.jpg\" height={160} />\n                  <Card.Content>\n                    <Card.Header>Necklace/Chains</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Different pendants has been attached to make the product looks good.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Necklace/Chain\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"4\">\n                  <img src=\"../static/images/saa2.jpg\" height={160} />\n                  <Card.Content>\n                    <Card.Header>Watch & Bracelet</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Pick watches of any brand you die to have in your wrist such as Rolex, Casio\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Watch & Bracelets\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"5\">\n                  <img src=\"../static/images/ring1.jpg\" height={160} />\n                  <Card.Content>\n                    <Card.Header>Rings</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Have a rings that make you and your couple feel better, pick one for you.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Rings\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n              </Card.Group>\n            </MediaQuery>\n\n            <MediaQuery minWidth={1200}>\n              <Card.Group itemsPerRow={5}>\n                <Card key=\"1\">\n                  <Image src=\"../static/images/group.jpeg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Glass</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Explore all kinds of glasses to satisfy you. Pick one according to your will\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Glass\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"2\">\n                  <img src=\"../static/images/index.jpeg\" height={200} />\n                  <Card.Content>\n                    <Card.Header>T-Shirt</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Customize and add a brand on your t-shirt based on your features.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"T-Shirt\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"3\">\n                  <Image src=\"../static/images/neck.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Necklace/Chains</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Different pendants has been attached to make the product looks good.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Necklace/Chain\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"4\">\n                  <Image src=\"../static/images/saa2.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Watch & Bracelet</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Pick watches of any brand you die to have in your wrist such as Rolex, Casio\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Watch & Bracelets\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n                <Card key=\"5\">\n                  <Image src=\"../static/images/ring1.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Rings</Card.Header>\n\n                    <Card.Description>\n                      <Header\n                        as=\"h4\"\n                        color=\"grey\"\n                        content=\"Have a rings that make you and your couple feel better, pick one for you.\"\n                      />\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/showRoom\",\n                          query: { category: \"Rings\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n              </Card.Group>\n            </MediaQuery>\n          </div>\n\n          <div className={styles.conte1}>\n            <p className={styles.sbg}>Shop By Gender</p>\n            <hr className={styles.hekh} />\n            <MediaQuery minWidth={200} maxWidth={499}>\n              <Card.Group itemsPerRow={1}>\n                <Card key=\"a\">\n                  <Image src=\"../static/images/womn.jpeg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Women</Card.Header>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Button\n                      animated=\"vertical\"\n                      fluid\n                      color=\"teal\"\n                      onClick={() =>\n                        Router.push({\n                          pathname: \"/gender\",\n                          query: { gender: \"Female\" },\n                        })\n                      }\n                    >\n                      <Button.Content visible>Explore more</Button.Content>\n                      <Button.Content hidden>\n                        <Icon name=\"arrow right\" />\n                      </Button.Content>\n                    </Button>\n                  </Card.Content>\n                </Card>\n              </Card.Group>\n              <Card.Group itemsPerRow={2}>\n                <Card key=\"b\">\n                  <Image src=\"../static/images/men.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Men</Card.Header>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <MediaQuery minWidth={200} maxWidth={394}>\n                      <Button\n                        animated=\"vertical\"\n                        fluid\n                        color=\"teal\"\n                        onClick={() =>\n                          Router.push({\n                            pathname: \"/gender\",\n                            query: { gender: \"Male\" },\n                          })\n                        }\n                      >\n                        <Button.Content visible>More..</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"arrow right\" />\n                        </Button.Content>\n                      </Button>\n                    </MediaQuery>\n                    <MediaQuery minWidth={395}>\n                      <Button\n                        animated=\"vertical\"\n                        fluid\n                        color=\"teal\"\n                        onClick={() =>\n                          Router.push({\n                            pathname: \"/gender\",\n                            query: { gender: \"Male\" },\n                          })\n                        }\n                      >\n                        <Button.Content visible>Explore more</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"arrow right\" />\n                        </Button.Content>\n                      </Button>\n                    </MediaQuery>\n                  </Card.Content>\n                </Card>\n                <Card key=\"c\">\n                  <Image src=\"../static/images/usex.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Unisex</Card.Header>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <MediaQuery minWidth={200} maxWidth={394}>\n                      <Button\n                        animated=\"vertical\"\n                        fluid\n                        color=\"teal\"\n                        onClick={() =>\n                          Router.push({\n                            pathname: \"/gender\",\n                            query: { gender: \"Unisex\" },\n                          })\n                        }\n                      >\n                        <Button.Content visible>More..</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"arrow right\" />\n                        </Button.Content>\n                      </Button>\n                    </MediaQuery>\n                    <MediaQuery minWidth={395}>\n                      <Button\n                        animated=\"vertical\"\n                        fluid\n                        color=\"teal\"\n                        onClick={() =>\n                          Router.push({\n                            pathname: \"/gender\",\n                            query: { gender: \"Unisex\" },\n                          })\n                        }\n                      >\n                        <Button.Content visible>Explore more</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"arrow right\" />\n                        </Button.Content>\n                      </Button>\n                    </MediaQuery>\n                  </Card.Content>\n                </Card>\n              </Card.Group>\n            </MediaQuery>\n\n            <MediaQuery minWidth={500}>\n              <Card.Group itemsPerRow={3}>\n                <Card key=\"a\">\n                  <Image src=\"../static/images/womn.jpeg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Women</Card.Header>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <MediaQuery minWidth={500} maxWidth={576}>\n                      <Button\n                        animated=\"vertical\"\n                        fluid\n                        color=\"teal\"\n                        onClick={() =>\n                          Router.push({\n                            pathname: \"/gender\",\n                            query: { gender: \"Female\" },\n                          })\n                        }\n                      >\n                        <Button.Content visible>Explore</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"arrow right\" />\n                        </Button.Content>\n                      </Button>\n                    </MediaQuery>\n                    <MediaQuery minWidth={577}>\n                      <Button\n                        animated=\"vertical\"\n                        fluid\n                        color=\"teal\"\n                        onClick={() =>\n                          Router.push({\n                            pathname: \"/gender\",\n                            query: { gender: \"Female\" },\n                          })\n                        }\n                      >\n                        <Button.Content visible>Explore more</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"arrow right\" />\n                        </Button.Content>\n                      </Button>\n                    </MediaQuery>\n                  </Card.Content>\n                </Card>\n                <Card key=\"b\">\n                  <Image src=\"../static/images/men.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Men</Card.Header>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <MediaQuery minWidth={500} maxWidth={576}>\n                      <Button\n                        animated=\"vertical\"\n                        fluid\n                        color=\"teal\"\n                        onClick={() =>\n                          Router.push({\n                            pathname: \"/gender\",\n                            query: { gender: \"Male\" },\n                          })\n                        }\n                      >\n                        <Button.Content visible>Explore</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"arrow right\" />\n                        </Button.Content>\n                      </Button>\n                    </MediaQuery>\n                    <MediaQuery minWidth={577}>\n                      <Button\n                        animated=\"vertical\"\n                        fluid\n                        color=\"teal\"\n                        onClick={() =>\n                          Router.push({\n                            pathname: \"/gender\",\n                            query: { gender: \"Male\" },\n                          })\n                        }\n                      >\n                        <Button.Content visible>Explore more</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"arrow right\" />\n                        </Button.Content>\n                      </Button>\n                    </MediaQuery>\n                  </Card.Content>\n                </Card>\n                <Card key=\"c\">\n                  <Image src=\"../static/images/usex.jpg\" wrapped ui={false} />\n                  <Card.Content>\n                    <Card.Header>Unisex</Card.Header>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <MediaQuery minWidth={500} maxWidth={576}>\n                      <Button\n                        animated=\"vertical\"\n                        fluid\n                        color=\"teal\"\n                        onClick={() =>\n                          Router.push({\n                            pathname: \"/gender\",\n                            query: { gender: \"Unisex\" },\n                          })\n                        }\n                      >\n                        <Button.Content visible>Explore</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"arrow right\" />\n                        </Button.Content>\n                      </Button>\n                    </MediaQuery>\n                    <MediaQuery minWidth={577}>\n                      <Button\n                        animated=\"vertical\"\n                        fluid\n                        color=\"teal\"\n                        onClick={() =>\n                          Router.push({\n                            pathname: \"/gender\",\n                            query: { gender: \"Unisex\" },\n                          })\n                        }\n                      >\n                        <Button.Content visible>Explore more</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"arrow right\" />\n                        </Button.Content>\n                      </Button>\n                    </MediaQuery>\n                  </Card.Content>\n                </Card>\n              </Card.Group>\n            </MediaQuery>\n          </div>\n\n          <div className={styles.conte2}>\n            <MediaQuery minWidth={200} maxWidth={899}>\n              <p className={styles.nfy}>New For You</p>\n              <hr className={styles.hekh} />\n            </MediaQuery>\n            <MediaQuery minWidth={900}>\n              <div className={styles.newForCont}>\n                <span className={styles.nfy}>New For You</span>\n                <span\n                  className={styles.view}\n                  onClick={() => Router.push(\"/products\")}\n                >\n                  View all\n                </span>\n                <hr className={styles.hekh2} />\n              </div>\n            </MediaQuery>\n            <MediaQuery minWidth={200} maxWidth={400}>\n              <div>\n                <Card.Group itemsPerRow={1}>\n                  {this.state.products\n                    .filter((value, key) => key < 2)\n                    .map((product) => (\n                      <Card key={product.get_urls[0]}>\n                        <img\n                          height={220}\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        />\n                        <Card.Content>\n                          <Card.Header as=\"h4\">{`${new Intl.NumberFormat(\n                            \"en-US\",\n                            {\n                              style: \"currency\",\n                              currency: \"Tsh\",\n                              minimumFractionDigits: 0,\n                            }\n                          ).format(parseInt(product.price))}/=`}</Card.Header>\n\n                          <Card.Description>\n                            <MediaQuery maxWidth={319}>\n                              <span className={styles.lebo}>\n                                {product.title.length > 25\n                                  ? product.title.substr(0, 24) + \"...\"\n                                  : product.title}\n                              </span>\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={320} maxWidth={350}>\n                              <span className={styles.lebo}>\n                                {product.title.length > 29\n                                  ? product.title.substr(0, 28) + \"...\"\n                                  : product.title}\n                              </span>\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={351}>\n                              <span className={styles.lebo}>\n                                {product.title.length > 37\n                                  ? product.title.substr(0, 35) + \"...\"\n                                  : product.title}\n                              </span>\n                            </MediaQuery>\n                          </Card.Description>\n                        </Card.Content>\n                        <Card.Content extra>\n                          <Button\n                            onClick={() =>\n                              Router.push({\n                                pathname: \"/preview\",\n                                query: { product: product.id },\n                              })\n                            }\n                            id={product.id}\n                            content=\"Shop now\"\n                            color=\"teal\"\n                            fluid\n                          />\n                        </Card.Content>\n                      </Card>\n                    ))}\n                </Card.Group>\n                <p\n                  className={styles.vall}\n                  onClick={() => Router.push(\"/products\")}\n                >\n                  VIEW ALL PRODUCTS{\" \"}\n                </p>\n              </div>\n            </MediaQuery>\n\n            <MediaQuery minWidth={401} maxWidth={576}>\n              <div>\n                <Card.Group itemsPerRow={2}>\n                  {this.state.products\n                    .filter((value, key) => key < 2)\n                    .map((product) => (\n                      <Card key={product.get_urls[0]}>\n                        <img\n                          height={150}\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        />\n                        <Card.Content>\n                          <Card.Header as=\"h4\">{`${new Intl.NumberFormat(\n                            \"en-US\",\n                            {\n                              style: \"currency\",\n                              currency: \"Tsh\",\n                              minimumFractionDigits: 0,\n                            }\n                          ).format(parseInt(product.price))}/=`}</Card.Header>\n\n                          <Card.Description>\n                            {/* <Header color='grey' content={product.title} /> */}\n                            {/* <span className={styles.lebo}>{product.title}</span> */}\n                            <MediaQuery maxWidth={500}>\n                              <span className={styles.lebo}>\n                                {product.title.length > 19\n                                  ? product.title.substr(0, 17) + \"...\"\n                                  : product.title}\n                              </span>\n                            </MediaQuery>\n                            <MediaQuery minWidth={501}>\n                              <span className={styles.lebo}>\n                                {product.title.length > 25\n                                  ? product.title.substr(0, 24) + \"...\"\n                                  : product.title}\n                              </span>\n                            </MediaQuery>\n                          </Card.Description>\n                        </Card.Content>\n                        <Card.Content extra>\n                          <Button\n                            onClick={() =>\n                              Router.push({\n                                pathname: \"/preview\",\n                                query: { product: product.id },\n                              })\n                            }\n                            id={product.id}\n                            content=\"Shop now\"\n                            color=\"teal\"\n                            fluid\n                          />\n                        </Card.Content>\n                      </Card>\n                    ))}\n                </Card.Group>\n                <p\n                  className={styles.vall}\n                  onClick={() => Router.push(\"/products\")}\n                >\n                  VIEW ALL PRODUCTS{\" \"}\n                </p>\n              </div>\n            </MediaQuery>\n\n            <MediaQuery minWidth={577} maxWidth={899}>\n              <div>\n                <Card.Group itemsPerRow={3}>\n                  {this.state.products\n                    .filter((value, key) => key < 3)\n                    .map((product) => (\n                      <Card key={product.get_urls[0]}>\n                        <MediaQuery minWidth={577} maxWidth={630}>\n                          <img\n                            height={140}\n                            src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          />\n                        </MediaQuery>\n                        <MediaQuery minWidth={631} maxWidth={699}>\n                          <img\n                            height={150}\n                            src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          />\n                        </MediaQuery>\n                        <MediaQuery minWidth={700}>\n                          <img\n                            height={160}\n                            src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          />\n                        </MediaQuery>\n                        <Card.Content>\n                          <Card.Header as=\"h4\">{`${new Intl.NumberFormat(\n                            \"en-US\",\n                            {\n                              style: \"currency\",\n                              currency: \"Tsh\",\n                              minimumFractionDigits: 0,\n                            }\n                          ).format(parseInt(product.price))}/=`}</Card.Header>\n\n                          <Card.Description>\n                            {/* <span className={styles.lebo}>{product.title}</span> */}\n                            <MediaQuery maxWidth={650}>\n                              <span className={styles.lebo}>\n                                {product.title.length > 17\n                                  ? product.title.substr(0, 16) + \"...\"\n                                  : product.title}\n                              </span>\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={651}>\n                              <span className={styles.lebo}>\n                                {product.title.length > 20\n                                  ? product.title.substr(0, 20) + \"...\"\n                                  : product.title}\n                              </span>\n                            </MediaQuery>\n                          </Card.Description>\n                        </Card.Content>\n                        <Card.Content extra>\n                          <Button\n                            onClick={() =>\n                              Router.push({\n                                pathname: \"/preview\",\n                                query: { product: product.id },\n                              })\n                            }\n                            id={product.id}\n                            content=\"Shop now\"\n                            color=\"teal\"\n                            fluid\n                          />\n                        </Card.Content>\n                      </Card>\n                    ))}\n                </Card.Group>\n                <p\n                  className={styles.vall}\n                  onClick={() => Router.push(\"/products\")}\n                >\n                  VIEW ALL PRODUCTS{\" \"}\n                </p>\n              </div>\n            </MediaQuery>\n\n            <MediaQuery minWidth={900} maxWidth={1199}>\n              <div>\n                <Card.Group itemsPerRow={4}>\n                  {this.state.products\n                    .filter((value, key) => key < 4)\n                    .map((product) => (\n                      <Card key={product.get_urls[0]}>\n                        <MediaQuery minWidth={900} maxWidth={991}>\n                          <img\n                            height={140}\n                            src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          />\n                        </MediaQuery>\n                        <MediaQuery minWidth={992}>\n                          <img\n                            height={180}\n                            src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          />\n                        </MediaQuery>\n                        <Card.Content>\n                          <Card.Header as=\"h4\">{`${new Intl.NumberFormat(\n                            \"en-US\",\n                            {\n                              style: \"currency\",\n                              currency: \"Tsh\",\n                              minimumFractionDigits: 0,\n                            }\n                          ).format(parseInt(product.price))}/=`}</Card.Header>\n\n                          <Card.Description>\n                            <MediaQuery maxWidth={990}>\n                              <span className={styles.lebo}>\n                                {product.title.length > 15\n                                  ? product.title.substr(0, 15) + \"...\"\n                                  : product.title}\n                              </span>\n                            </MediaQuery>\n                            <MediaQuery minWidth={991}>\n                              <span className={styles.lebo}>\n                                {product.title.length > 23\n                                  ? product.title.substr(0, 23) + \"...\"\n                                  : product.title}\n                              </span>\n                            </MediaQuery>\n                          </Card.Description>\n                        </Card.Content>\n                        <Card.Content extra>\n                          <Button\n                            onClick={this.viewItem}\n                            id={product.id}\n                            content=\"Shop now\"\n                            color=\"teal\"\n                            fluid\n                          />\n                        </Card.Content>\n                      </Card>\n                    ))}\n                </Card.Group>\n                {/* <p className={styles.vall}>VIEW ALL PRODUCTS </p>     */}\n              </div>\n            </MediaQuery>\n\n            <MediaQuery minWidth={1200}>\n              <div>\n                <Card.Group itemsPerRow={5}>\n                  {this.state.products\n                    .filter((value, key) => key < 5)\n                    .map((product) => (\n                      <Card key={product.get_urls[0]}>\n                        <img\n                          height={160}\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        />\n                        <Card.Content>\n                          <Card.Header as=\"h4\">{`${new Intl.NumberFormat(\n                            \"en-US\",\n                            {\n                              style: \"currency\",\n                              currency: \"Tsh\",\n                              minimumFractionDigits: 0,\n                            }\n                          ).format(parseInt(product.price))}/=`}</Card.Header>\n\n                          <Card.Description>\n                            <span className={styles.lebo}>\n                              {product.title.length > 22\n                                ? product.title.substr(0, 21) + \"...\"\n                                : product.title}\n                            </span>\n                          </Card.Description>\n                        </Card.Content>\n                        <Card.Content extra>\n                          <Button\n                            onClick={this.viewItem}\n                            id={product.id}\n                            content=\"Shop now\"\n                            color=\"teal\"\n                            fluid\n                          />\n                        </Card.Content>\n                      </Card>\n                    ))}\n                </Card.Group>\n                {/* <p className={styles.vall}>VIEW ALL PRODUCTS </p>     */}\n              </div>\n            </MediaQuery>\n          </div>\n        </div>\n        <MediaQuery minWidth={900} maxWidth={1199}>\n          <div className={styles.showRoom} ref={this.showRoom}>\n            <div\n              className={styles.closeBtn}\n              onClick={this.onRemove}\n              ref={this.closeBtn}\n            >\n              &times;\n            </div>\n\n            <MediaQuery minWidth={900} maxWidth={1000}>\n              <Segment>\n                <Grid>\n                  {/* By default first image is the one placed first at canvas/preview section */}\n\n                  <Grid.Column width={9}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"300px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n\n                    <div className={styles.smallImage}>\n                      {this.state.selectedObjImages.map((url) => (\n                        <img\n                          className={styles.smaI}\n                          key={url}\n                          src={`${BACKEND_ORIGIN}${url}`}\n                          width={60}\n                          height={50}\n                          onClick={this.selectedOn}\n                        />\n                      ))}\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width={7}>\n                    <div className={styles.dodo}>\n                      <Header as=\"h3\">\n                        {this.state.selectedObj.title}\n                        <Header.Subheader color=\"orange\">\n                          {this.state.selectedObj.description}\n                        </Header.Subheader>\n                      </Header>\n\n                      <hr />\n                      <span>\n                        <Grid>\n                          <Grid.Column width={9}>\n                            Price:{\" \"}\n                            <Header\n                              as=\"h3\"\n                              color=\"grey\"\n                              content={`${new Intl.NumberFormat(\"en-US\", {\n                                style: \"currency\",\n                                currency: \"Tsh\",\n                                minimumFractionDigits: 0,\n                              }).format(\n                                parseInt(this.state.selectedObjPrice)\n                              )}/=`}\n                            />\n                          </Grid.Column>\n                          <Grid.Column width={7}>\n                            <span className={styles.sp}>\n                              Quantity:{\" \"}\n                              <span className={styles.idadi}>\n                                {this.state.productQuantity}\n                              </span>\n                            </span>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"80%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </Grid.Column>\n                        </Grid>\n                      </span>\n                    </div>\n                    <div>\n                      <div className={styles.customizations}>\n                        {this.state.selectedObj.hasPropertySelection ===\n                          false &&\n                        this.state.selectedObj.isCustomized === false &&\n                        this.state.selectedObj.hasSecondPropertySelection ===\n                          false ? (\n                          <> </>\n                        ) : (\n                          <div className={styles.top}>\n                            <p\n                              className={styles.h}\n                              style={{ fontWeight: \"bold\", fontSize: \"120%\" }}\n                            >\n                              User Customizations\n                            </p>\n\n                            <hr className={styles.hr1} />\n                          </div>\n                        )}\n\n                        <div className={styles.sec}>\n                          <>\n                            <Grid>\n                              {this.state.selectedObj.hasPropertySelection ? (\n                                <Grid.Column width={9}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_property[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.attributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.property_values.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state.attributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    attributeValue: prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {/* lets check for secondPropertySelection 900 - 1200 */}\n                              {this.state.selectedObj\n                                .hasSecondPropertySelection ? (\n                                <Grid.Column width={7}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_secondProps[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.secondPropsAttributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.second_propsValue.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state\n                                                    .secondPropsAttributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    secondPropsAttributeValue:\n                                                      prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {this.state.selectedObj.isCustomized ? (\n                                <>\n                                  <span\n                                    className={styles.bichwa}\n                                    style={{ fontSize: \"15px\" }}\n                                  >\n                                    Customize product's image/text.\n                                  </span>\n                                  <p className={styles.sub}>\n                                    *** Leave blank to use default one.\n                                    <br />\n                                    *** In case of image write a web link to\n                                    that image\n                                  </p>\n                                  <textarea\n                                    row={2}\n                                    cols={30}\n                                    className={this.tarea}\n                                    onChange={(event) =>\n                                      this.setState({\n                                        customValue: event.target.value,\n                                      })\n                                    }\n                                    style={{\n                                      marginBottom: \"3%\",\n                                      marginLeft: \"3%\",\n                                    }}\n                                    ref={this.uwanja}\n                                  ></textarea>\n                                </>\n                              ) : (\n                                <></>\n                              )}\n                            </Grid>\n                          </>\n                        </div>\n                      </div>\n                      <div className={styles.down}>\n                        <div className={styles.err} ref={this.err}>\n                          <Message error>\n                            <Message.Header>\n                              Error, You needed to login\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click login button above and login to enable add to\n                            cart feature.\n                          </Message>\n                        </div>\n\n                        <div className={styles.err1} ref={this.err1}>\n                          <Message success>\n                            <Message.Header>\n                              Success, Item has been added to cart\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click the cart icon above to preview your cart.\n                          </Message>\n                        </div>\n\n                        <Button\n                          animated\n                          primary\n                          size=\"medium\"\n                          fluid\n                          onClick={this.addToCart}\n                        >\n                          <Button.Content visible>Add to Cart</Button.Content>\n                          <Button.Content hidden>\n                            <Icon name=\"shop\" />\n                          </Button.Content>\n                        </Button>\n                      </div>\n                    </div>\n                  </Grid.Column>\n                </Grid>\n\n                <div className={styles.footerSec} style={{ marginTop: \"5%\" }}>\n                  <hr className={styles.footerHr} />\n                  <Header\n                    textAlign=\"center\"\n                    content=\"Powered by Online Tec\"\n                    color=\"grey\"\n                  />\n                </div>\n              </Segment>\n            </MediaQuery>\n\n            <MediaQuery minWidth={1001}>\n              <Segment>\n                <Grid>\n                  {/* By default first image is the one placed first at canvas/preview section */}\n\n                  <Grid.Column width={9}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"400px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n\n                    <div className={styles.smallImage}>\n                      {this.state.selectedObjImages.map((url) => (\n                        <img\n                          className={styles.smaI}\n                          key={url}\n                          src={`${BACKEND_ORIGIN}${url}`}\n                          width={60}\n                          height={50}\n                          onClick={this.selectedOn}\n                        />\n                      ))}\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width={7}>\n                    <div className={styles.dodo}>\n                      <Header as=\"h3\">\n                        {this.state.selectedObj.title}\n                        <Header.Subheader color=\"orange\">\n                          {this.state.selectedObj.description}\n                        </Header.Subheader>\n                      </Header>\n\n                      <hr />\n                      <span>\n                        <Grid>\n                          <Grid.Column width={9}>\n                            Price:{\" \"}\n                            <Header\n                              as=\"h3\"\n                              color=\"grey\"\n                              content={`${new Intl.NumberFormat(\"en-US\", {\n                                style: \"currency\",\n                                currency: \"Tsh\",\n                                minimumFractionDigits: 0,\n                              }).format(\n                                parseInt(this.state.selectedObjPrice)\n                              )}/=`}\n                            />\n                          </Grid.Column>\n                          <Grid.Column width={7}>\n                            <span className={styles.sp}>\n                              Quantity:{\" \"}\n                              <span className={styles.idadi}>\n                                {this.state.productQuantity}\n                              </span>\n                            </span>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"72%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </Grid.Column>\n                        </Grid>\n                      </span>\n                    </div>\n                    <div>\n                      <div className={styles.customizations}>\n                        {this.state.selectedObj.hasPropertySelection ===\n                          false &&\n                        this.state.selectedObj.isCustomized === false &&\n                        this.state.selectedObj.hasSecondPropertySelection ===\n                          false ? (\n                          <> </>\n                        ) : (\n                          <div className={styles.top}>\n                            <h2\n                              className={styles.h}\n                              style={{ fontWeight: \"bold\", fontSize: \"130%\" }}\n                            >\n                              User Customizations\n                            </h2>\n\n                            <hr className={styles.hr1} />\n                          </div>\n                        )}\n\n                        <div className={styles.sec}>\n                          <>\n                            <Grid>\n                              {this.state.selectedObj.hasPropertySelection ? (\n                                <Grid.Column width={9}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_property[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.attributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.property_values.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state.attributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    attributeValue: prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {/* lets check for secondPropertySelection 900 - 1200 */}\n                              {this.state.selectedObj\n                                .hasSecondPropertySelection ? (\n                                <Grid.Column width={7}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_secondProps[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.secondPropsAttributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.second_propsValue.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state\n                                                    .secondPropsAttributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    secondPropsAttributeValue:\n                                                      prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {this.state.selectedObj.isCustomized ? (\n                                <>\n                                  <span\n                                    className={styles.bichwa}\n                                    style={{ fontSize: \"15px\" }}\n                                  >\n                                    Customize product's image/text.\n                                  </span>\n                                  <p className={styles.sub}>\n                                    *** Leave blank to use default one.\n                                    <br />\n                                    *** In case of image write a web link to\n                                    that image\n                                  </p>\n                                  <textarea\n                                    row={2}\n                                    cols={32}\n                                    className={this.tarea}\n                                    onChange={(event) =>\n                                      this.setState({\n                                        customValue: event.target.value,\n                                      })\n                                    }\n                                    style={{\n                                      marginBottom: \"3%\",\n                                      marginLeft: \"3%\",\n                                    }}\n                                    ref={this.uwanja}\n                                  ></textarea>\n                                </>\n                              ) : (\n                                <></>\n                              )}\n                            </Grid>\n                          </>\n                        </div>\n                      </div>\n                      <div className={styles.down}>\n                        <div className={styles.err} ref={this.err}>\n                          <Message error>\n                            <Message.Header>\n                              Error, You needed to login\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click login button above and login to enable add to\n                            cart feature.\n                          </Message>\n                        </div>\n\n                        <div className={styles.err1} ref={this.err1}>\n                          <Message success>\n                            <Message.Header>\n                              Success, Item has been added to cart\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click the cart icon above to preview your cart.\n                          </Message>\n                        </div>\n\n                        <Button\n                          animated\n                          primary\n                          size=\"medium\"\n                          fluid\n                          onClick={this.addToCart}\n                        >\n                          <Button.Content visible>Add to Cart</Button.Content>\n                          <Button.Content hidden>\n                            <Icon name=\"shop\" />\n                          </Button.Content>\n                        </Button>\n                      </div>\n                    </div>\n                  </Grid.Column>\n                </Grid>\n\n                <div className={styles.footerSec} style={{ marginTop: \"2%\" }}>\n                  <hr className={styles.footerHr} />\n                  <Header\n                    textAlign=\"center\"\n                    content=\"Powered by Online Tec\"\n                    color=\"grey\"\n                  />\n                </div>\n              </Segment>\n            </MediaQuery>\n          </div>\n        </MediaQuery>\n\n        <MediaQuery minWidth={1200}>\n          <div className={styles.showRoom} ref={this.showRoom}>\n            <div\n              className={styles.closeBtn}\n              onClick={this.onRemove}\n              ref={this.closeBtn}\n            >\n              &times;\n            </div>\n\n            <Segment>\n              <Grid>\n                {/* By default first image is the one placed first at canvas/preview section */}\n\n                <Grid.Column width={9}>\n                  <MediaQuery minWidth={1200} maxWidth={1340}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"380px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={1341} maxWidth={1500}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"400px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={1501}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"500px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <div className={styles.smallImage}>\n                    {this.state.selectedObjImages.map((url) => (\n                      <img\n                        className={styles.smaI}\n                        key={url}\n                        src={`${BACKEND_ORIGIN}${url}`}\n                        width={60}\n                        height={50}\n                        onClick={this.selectedOn}\n                      />\n                    ))}\n                  </div>\n                </Grid.Column>\n                <Grid.Column width={7}>\n                  <div className={styles.dodo}>\n                    <Header as=\"h3\">\n                      {this.state.selectedObj.title}\n                      <Header.Subheader color=\"orange\">\n                        {this.state.selectedObj.description}\n                      </Header.Subheader>\n                    </Header>\n\n                    <hr />\n                    <span>\n                      <Grid>\n                        <Grid.Column width={9}>\n                          Price:{\" \"}\n                          <Header\n                            as=\"h3\"\n                            color=\"grey\"\n                            content={`${new Intl.NumberFormat(\"en-US\", {\n                              style: \"currency\",\n                              currency: \"Tsh\",\n                              minimumFractionDigits: 0,\n                            }).format(\n                              parseInt(this.state.selectedObjPrice)\n                            )}/=`}\n                          />\n                        </Grid.Column>\n                        <Grid.Column width={7}>\n                          <span className={styles.sp}>\n                            Quantity:{\" \"}\n                            <span className={styles.idadi}>\n                              {this.state.productQuantity}\n                            </span>\n                          </span>\n                          <MediaQuery minWidth={1200} maxWidth={1340}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"58%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={1341} maxWidth={1500}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"52%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={1501}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"46%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n                        </Grid.Column>\n                      </Grid>\n                    </span>\n                  </div>\n                  <div>\n                    <div className={styles.customizations}>\n                      {this.state.selectedObj.hasPropertySelection === false &&\n                      this.state.selectedObj.isCustomized === false &&\n                      this.state.selectedObj.hasSecondPropertySelection ===\n                        false ? (\n                        <> </>\n                      ) : (\n                        <div className={styles.top}>\n                          <h2\n                            className={styles.h}\n                            style={{ fontWeight: \"bold\", fontSize: \"130%\" }}\n                          >\n                            User Customizations\n                          </h2>\n\n                          <hr className={styles.hr1} />\n                        </div>\n                      )}\n\n                      <div className={styles.sec}>\n                        <>\n                          <Grid>\n                            {this.state.selectedObj.hasPropertySelection ? (\n                              <Grid.Column width={9}>\n                                <>\n                                  <span>\n                                    <span\n                                      className={styles.pName}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {\n                                        Object.keys(\n                                          this.state.selectedObj.map_property[0]\n                                        )[0]\n                                      }\n                                      :\n                                    </span>\n                                    <span\n                                      className={styles.pValue}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {this.state.attributeValue}\n                                    </span>\n                                  </span>\n                                  <Form>\n                                    {this.state.selectedObj.property_values.map(\n                                      (prop) => (\n                                        <div\n                                          key={prop}\n                                          className={styles.pullUp}\n                                        >\n                                          <Form.Field>\n                                            <Radio\n                                              label={prop}\n                                              name=\"radioGroup\"\n                                              value={prop}\n                                              checked={\n                                                this.state.attributeValue ===\n                                                prop\n                                              }\n                                              onChange={() =>\n                                                this.setState({\n                                                  attributeValue: prop,\n                                                })\n                                              }\n                                            />\n                                          </Form.Field>\n                                        </div>\n                                      )\n                                    )}\n                                  </Form>\n                                </>\n                              </Grid.Column>\n                            ) : (\n                              <></>\n                            )}\n\n                            {/* lets check for secondPropertySelection 900 - 1200 */}\n                            {this.state.selectedObj\n                              .hasSecondPropertySelection ? (\n                              <Grid.Column width={7}>\n                                <>\n                                  <span>\n                                    <span\n                                      className={styles.pName}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {\n                                        Object.keys(\n                                          this.state.selectedObj\n                                            .map_secondProps[0]\n                                        )[0]\n                                      }\n                                      :\n                                    </span>\n                                    <span\n                                      className={styles.pValue}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {this.state.secondPropsAttributeValue}\n                                    </span>\n                                  </span>\n                                  <Form>\n                                    {this.state.selectedObj.second_propsValue.map(\n                                      (prop) => (\n                                        <div\n                                          key={prop}\n                                          className={styles.pullUp}\n                                        >\n                                          <Form.Field>\n                                            <Radio\n                                              label={prop}\n                                              name=\"radioGroup\"\n                                              value={prop}\n                                              checked={\n                                                this.state\n                                                  .secondPropsAttributeValue ===\n                                                prop\n                                              }\n                                              onChange={() =>\n                                                this.setState({\n                                                  secondPropsAttributeValue:\n                                                    prop,\n                                                })\n                                              }\n                                            />\n                                          </Form.Field>\n                                        </div>\n                                      )\n                                    )}\n                                  </Form>\n                                </>\n                              </Grid.Column>\n                            ) : (\n                              <></>\n                            )}\n\n                            {this.state.selectedObj.isCustomized ? (\n                              <>\n                                <span\n                                  className={styles.bichwa}\n                                  style={{ fontSize: \"15px\" }}\n                                >\n                                  Customize product's image/text.\n                                </span>\n                                <p className={styles.sub}>\n                                  *** Leave blank to use default one.\n                                  <br />\n                                  *** In case of image write a web link to that\n                                  image\n                                </p>\n                                <textarea\n                                  row={2}\n                                  cols={32}\n                                  className={this.tarea}\n                                  onChange={(event) =>\n                                    this.setState({\n                                      customValue: event.target.value,\n                                    })\n                                  }\n                                  style={{\n                                    marginBottom: \"3%\",\n                                    marginLeft: \"3%\",\n                                  }}\n                                  ref={this.uwanja}\n                                ></textarea>\n                              </>\n                            ) : (\n                              <></>\n                            )}\n                          </Grid>\n                        </>\n                      </div>\n                    </div>\n                    <div className={styles.down}>\n                      <div className={styles.err} ref={this.err}>\n                        <Message error>\n                          <Message.Header>\n                            Error, You needed to login\n                          </Message.Header>\n                          <Icon name=\"warning sign\" />\n                          Click login button above and login to enable add to\n                          cart feature.\n                        </Message>\n                      </div>\n\n                      <div className={styles.err1} ref={this.err1}>\n                        <Message success>\n                          <Message.Header>\n                            Success, Item has been added to cart\n                          </Message.Header>\n                          <Icon name=\"warning sign\" />\n                          Click the cart icon above to preview your cart.\n                        </Message>\n                      </div>\n\n                      <Button\n                        animated\n                        primary\n                        size=\"medium\"\n                        fluid\n                        onClick={this.addToCart}\n                      >\n                        <Button.Content visible>Add to Cart</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"shop\" />\n                        </Button.Content>\n                      </Button>\n                    </div>\n                  </div>\n                </Grid.Column>\n              </Grid>\n\n              <div className={styles.footerSec} style={{ marginTop: \"2%\" }}>\n                <hr className={styles.footerHr} />\n                <Header\n                  textAlign=\"center\"\n                  content=\"Powered by Online Tec\"\n                  color=\"grey\"\n                />\n              </div>\n            </Segment>\n          </div>\n        </MediaQuery>\n\n        <div className={styles.model} ref={this.modal}>\n          <div\n            className={styles.closeBtnx}\n            onClick={this.onRemovex}\n            ref={this.closeBtnx}\n          >\n            &times;\n          </div>\n\n          <Sign closeLoginPanel={this.onRemovex} />\n        </div>\n\n        <style jsx global>{`\n          body {\n            background: rgb(236, 236, 236);\n          }\n        `}</style>\n      </NavBar>\n    );\n  }\n}\n\nexport default Testing;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/jisajili.js",["225"],[],"import React, { Component } from \"react\";\nimport Head from \"next/head\";\nimport styles from \"../static/css/jisajili.module.css\";\nimport { Message, Icon, Button } from \"semantic-ui-react\";\n\nimport dynamic from \"next/dynamic\";\nimport Router from \"next/router\";\nimport BACKEND_ORIGIN from \"../utils/domain\";\n\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n\nclass Jisajili extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    message: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.errorContainer = React.createRef();\n    this.pass = React.createRef();\n    this.user = React.createRef();\n    this.successContainer = React.createRef();\n  }\n\n  static async getInitialProps(props) {\n    const { flag, productId } = props.query;\n\n    return { flag, productId };\n  }\n\n  register = async (e) => {\n    e.preventDefault();\n    console.log(\"THEY EXECUTE ME..\");\n    if (\n      this.state.username.trim().length === 0 ||\n      this.state.password.trim().length === 0\n    ) {\n      this.setState({\n        message: \"We don't accept empty field\",\n      });\n\n      this.errorContainer.current.style.display = \"block\";\n\n      this.errorShow = setTimeout(() => {\n        this.errorContainer.current.style.display = \"none\";\n      }, 5000);\n\n      this.user.current.value = \"\";\n      this.pass.current.value = \"\";\n\n      this.setState({\n        username: \"\",\n        password: \"\",\n      });\n      return;\n    }\n\n    if (this.state.password.trim().length < 6) {\n      this.setState({\n        message: \"Shorter password, minimum is 6 characters\",\n      });\n\n      this.errorContainer.current.style.display = \"block\";\n\n      this.errorShow = setTimeout(() => {\n        this.errorContainer.current.style.display = \"none\";\n      }, 5000);\n\n      this.user.current.value = \"\";\n      this.pass.current.value = \"\";\n      this.setState({\n        username: \"\",\n        password: \"\",\n      });\n      return;\n    }\n\n    if (!this.state.username.trim().includes(\"@\")) {\n      this.setState({\n        message: \"Wrong format of email\",\n      });\n\n      this.errorContainer.current.style.display = \"block\";\n\n      this.errorShow = setTimeout(() => {\n        this.errorContainer.current.style.display = \"none\";\n      }, 5000);\n\n      this.user.current.value = \"\";\n      this.pass.current.value = \"\";\n      this.setState({\n        username: \"\",\n        password: \"\",\n      });\n      return;\n    }\n\n    // ishu iliyopo ni kwamba hii method inakuwa haijamaliza ila code za chini zinakuwa exected...\n    // ko naona ni lazima tutumie await hapa tujaribu but mwanzo ilikataa...\n    fetch(`${BACKEND_ORIGIN}/api/register/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email: this.state.username,\n        password: this.state.password,\n      }),\n    })\n      .then((response) => response.json())\n      .then((json) => {\n        if (json.err) {\n          console.log(json.err);\n          this.setState({\n            message: \"Failed!, user of this email already exist\",\n          });\n          this.errorContainer.current.style.display = \"block\";\n          this.errorShow = setTimeout(() => {\n            this.errorContainer.current.style.display = \"none\";\n          }, 5000);\n          this.user.current.value = \"\";\n          this.pass.current.value = \"\";\n          this.setState({\n            username: \"\",\n            password: \"\",\n          });\n          return;\n        } else if (json.error) {\n          this.setState({\n            message: \"Failed!, Invalid data\",\n          });\n          this.errorContainer.current.style.display = \"block\";\n          this.errorShow = setTimeout(() => {\n            this.errorContainer.current.style.display = \"none\";\n          }, 5000);\n          this.user.current.value = \"\";\n          this.pass.current.value = \"\";\n          this.setState({\n            username: \"\",\n            password: \"\",\n          });\n          return;\n        }\n        console.log(\n          \"IF YOU ARE LIVING IN THE WORLD TODAY YOU WILL HEAR THE SLANG THAT WU TANG SAY...\"\n        );\n        console.log(\"User has been created succesful...\");\n\n        // Then you're account has been created successful... You should send\n        // the success url to login page as message... as flag='success'\n        // this success .. when login get the message of 'flag='success' then it\n        // should detect that user has been created account successful and it should\n        // display that message..=\n        // Router.push({ pathname: \"/login\", query: { success: \"created\" } });\n        // Nakushauri kama huyu mtu asha-create account then embu m-redirect\n        // kama kikuu kwenye page husika.. There is no need to login ndo kitu unachotakiwa ufanye\n        // so vilevile hii inakuwa na flag... Ya-kudetect kuwa hii imetoka wapi..\n\n        // this process remember is inside .then in else condition and you should know that\n        // if we put this outside this then statement like normal code it will be executed\n        // even if the process of promise for writing the user is not executed.. so you should\n        // need to wrap this inside here to avoid the process of access/login the user when the user\n        // creation process is still not finished for this what you will get is an error indicating that\n        // user is not exist na kitu hichi ndo kilichokuwa kinanipata... Koz ni sahihi hii block ilikuwa\n        // outside then promise code block.. That's why me getting an error at that time but now i know what\n        // happened... Vilevile ulikuwa unashangaa mbona kwenye block of then on creation of user I set if\n        // error like user already exist when returned to halt full function by return; and instead of halting\n        // you see it goes outside the block and execute the codes of retrieving/login the user .. this is\n        // because the process of user creation is async so its not finished when you access the\n        // created user and this cause you to get an error...\n        this.successContainer.current.style.display = \"block\";\n\n        this.loginTimeout = setTimeout(async () => {\n          // WE should login this user\n          console.log(\"WE SHOULD LOGIN THIS USER\");\n          console.log(this.state.username, this.state.password);\n          let weLive = await fetch(`${BACKEND_ORIGIN}/api/token/`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              email: this.state.username,\n              password: this.state.password,\n            }),\n          });\n\n          let gza = await weLive.json();\n          // Japo hii status nategemea itaenda poa tu...\n          console.log(\"gza\", gza);\n          if (weLive.status !== 200) {\n            return console.log(\"Error in login... Bad creditials\");\n          }\n          localStorage.setItem(\"authTokens\", JSON.stringify(gza));\n\n          this.successContainer.current.style.display = \"none\";\n\n          if (this.props.flag) {\n            Router.push({\n              pathname: this.props.flag,\n              query: { product: this.props.productId },\n            });\n          } else {\n            Router.push({\n              pathname: \"/\",\n            });\n          }\n        }, 50);\n      });\n  };\n\n  login = () => {\n    if (this.props.flag) {\n      Router.push({\n        pathname: \"/login\",\n        query: { flag: this.props.flag, productId: this.props.productId },\n      });\n    } else {\n      Router.push(\"login\");\n    }\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this.errorShow);\n    clearTimeout(this.loginTimeout);\n  }\n\n  render() {\n    return (\n      <>\n        <MediaQuery minWidth={200} maxWidth={400}>\n          <>\n            <Head>\n              <title>PERSONALYZER</title>\n              <link\n                rel=\"stylesheet\"\n                href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                crossorigin=\"anonymous\"\n              />\n              <link\n                rel=\"stylesheet\"\n                href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n              ></link>\n              <meta\n                name=\"viewport\"\n                content=\"width=device-width, initial-scale=1.0\"\n              />\n            </Head>\n\n            <div className={styles.outer}>\n              <p className={styles.hed}>Create account to get started.</p>\n              <hr />\n\n              <div className={styles.divForm}>\n                <form onSubmit={this.register} autoComplete=\"off\">\n                  <p className={styles.reg} onClick={this.login}>\n                    Already have account? Login\n                  </p>\n\n                  <label className={styles.lab}>email</label>\n                  <br />\n                  <input\n                    className={styles.inp}\n                    type=\"text\"\n                    ref={this.user}\n                    onChange={(e) =>\n                      this.setState({ username: e.target.value })\n                    }\n                  />\n                  <br />\n                  <label className={styles.lab1}>password</label>\n                  <br />\n                  <input\n                    className={styles.inp}\n                    type=\"password\"\n                    ref={this.pass}\n                    onChange={(e) =>\n                      this.setState({ password: e.target.value })\n                    }\n                  />\n                  <br />\n                  <br />\n                  <div className={styles.error} ref={this.errorContainer}>\n                    <Message error size=\"mini\">\n                      <Message.Header>\n                        <Icon name=\"warning\" />\n                        {this.state.message}\n                      </Message.Header>\n                    </Message>\n                  </div>\n                  <div className={styles.succe} ref={this.successContainer}>\n                    <Message success size=\"mini\">\n                      <Message.Header>\n                        Account have been created succesful!\n                      </Message.Header>\n                    </Message>\n                  </div>\n                  <button type=\"submit\" className={styles.sub}>\n                    Register here\n                  </button>\n                </form>\n              </div>\n            </div>\n          </>\n        </MediaQuery>\n\n        <MediaQuery minWidth={401}>\n          <>\n            <Head>\n              <title>PERSONALYZER</title>\n              <link\n                rel=\"stylesheet\"\n                href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                crossorigin=\"anonymous\"\n              />\n              <link\n                rel=\"stylesheet\"\n                href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n              ></link>\n              <meta\n                name=\"viewport\"\n                content=\"width=device-width, initial-scale=1.0\"\n              />\n            </Head>\n            <div className={styles.outer}>\n              <p className={styles.hed}>Create account to get started.</p>\n              <hr />\n              <div className={styles.divForm}>\n                <form onSubmit={this.register} autoComplete=\"off\">\n                  <p className={styles.reg} onClick={this.login}>\n                    Already have account? Login\n                  </p>\n\n                  <label className={styles.lab}>email</label>\n                  <br />\n                  <input\n                    className={styles.inp}\n                    type=\"text\"\n                    ref={this.user}\n                    onChange={(e) =>\n                      this.setState({ username: e.target.value })\n                    }\n                  />\n                  <br />\n                  <label className={styles.lab1}>password</label>\n                  <br />\n                  <input\n                    className={styles.inp}\n                    type=\"password\"\n                    ref={this.pass}\n                    onChange={(e) =>\n                      this.setState({ password: e.target.value })\n                    }\n                  />\n                  <br />\n                  <br />\n                  <div className={styles.error} ref={this.errorContainer}>\n                    <Message error size=\"mini\">\n                      <Message.Header>\n                        <Icon name=\"warning\" />\n                        {this.state.message}\n                      </Message.Header>\n                    </Message>\n                  </div>\n\n                  <div className={styles.succe} ref={this.successContainer}>\n                    <Message success size=\"mini\">\n                      <Message.Header>\n                        Account have been created succesful!\n                      </Message.Header>\n                    </Message>\n                  </div>\n                  <button type=\"submit\" className={styles.sub}>\n                    Register here\n                  </button>\n                </form>\n              </div>\n            </div>\n          </>\n        </MediaQuery>\n      </>\n    );\n  }\n}\n\nexport default Jisajili;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/login.js",[],[],"/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/mpesa.js",["226","227"],[],"import React, { Component } from \"react\";\nimport dynamic from \"next/dynamic\";\nimport styles from \"../static/css/mode.module.css\";\nimport Head from \"next/head\";\nimport { Grid, Icon, Segment } from \"semantic-ui-react\";\nimport jwt_decode from \"jwt-decode\";\nimport Router from \"next/router\";\nimport BACKEND_ORIGIN from \"../utils/domain\";\n\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n\nclass MPesa extends Component {\n  state = {\n    isAunthenticated: false,\n    data: [],\n    cart_id: 0,\n    user_id: 0,\n    transactionId: \"\",\n    phone_number: \"\",\n    errorMessage: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.err = React.createRef();\n    this.muamala = React.createRef();\n    this.phone = React.createRef();\n  }\n\n  componentDidMount() {\n    this.executingTokenLogics();\n\n    console.log(this.state.cart_id, this.state.isAunthenticated);\n  }\n\n  onPlaceOrder = async (e) => {\n    e.preventDefault();\n\n    console.log(\"Hellow\", this.state.transactionId, this.state.phone_number);\n\n    if (\n      this.state.transactionId.trim().length === 0 ||\n      this.state.phone_number.trim().length === 0\n    ) {\n      // then return an error that hey we don't accept empty data.\n      console.log(\"we dont accept empty string...\");\n      this.setState({\n        errorMessage: \"Failed, We don't accept empty fields\",\n      });\n\n      this.err.current.style.display = \"block\";\n      this.timeout = setTimeout(() => {\n        this.err.current.style.display = \"none\";\n      }, 5000);\n\n      this.setState({\n        phone_number: \"\",\n        transactionId: \"\",\n      });\n\n      this.muamala.current.value = \"\";\n      this.phone.current.value = \"\";\n\n      return;\n    }\n\n    if (this.state.phone_number.trim().length < 10) {\n      this.setState({\n        errorMessage: \"Failed, phone number looks to be invalid!\",\n      });\n      this.err.current.style.display = \"block\";\n      this.timeout = setTimeout(() => {\n        this.err.current.style.display = \"none\";\n      }, 5000);\n\n      this.setState({\n        phone_number: \"\",\n        transactionId: \"\",\n      });\n\n      this.muamala.current.value = \"\";\n      this.phone.current.value = \"\";\n      return;\n    }\n\n    // I thinks now we should submit the form\n    const response = await fetch(`${BACKEND_ORIGIN}/api/create_order/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        transactionId: this.state.transactionId,\n        mobile: parseInt(this.state.phone_number),\n        id: this.state.user_id,\n        cartId: this.state.cart_id,\n      }),\n    });\n\n    const data = await response.json();\n\n    console.log(\"this is data for you\");\n    console.log(data);\n\n    if (data.success) {\n      return Router.push({\n        pathname: \"/done\",\n        query: {\n          unique_id: data.unique_id,\n         \n        },\n      });\n    } else {\n      console.log(\"Something is wrong here...\");\n    }\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n  }\n\n  updateToken = async (refreshToken) => {\n    let response = await fetch(`${BACKEND_ORIGIN}/api/token/refresh/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ refresh: refreshToken }),\n    });\n\n    let data = await response.json();\n    localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  };\n\n  executingTokenLogics = async () => {\n    try {\n      const tokens = localStorage.getItem(\"authTokens\")\n        ? JSON.parse(localStorage.getItem(\"authTokens\"))\n        : null;\n      if (!tokens) {\n        console.log(\"You needed to login, no records\");\n        this.setState({ isAunthenticated: false });\n        return;\n      }\n      const decodedRefreshToken = jwt_decode(tokens.refresh);\n      const expireRefreshTime = decodedRefreshToken.exp;\n      console.log(\"Hey this is the expire date of the refreshToken\");\n      console.log(expireRefreshTime);\n      console.log(\"Lets try to access the json access token\");\n      console.log(tokens.access);\n      const decodedAccessData = jwt_decode(tokens.access);\n      console.log(\"This is expiring time for you...\");\n      console.log(decodedAccessData);\n      const user_id = decodedAccessData.user_id;\n      this.setState({\n        user_id,\n      });\n      console.log(\"This is user_id for you\");\n      console.log(user_id);\n      const expireAccessTime = decodedAccessData.exp;\n      console.log(expireAccessTime);\n      const diff = expireAccessTime * 1000 - Date.now();\n      if (diff < 1) {\n        console.log(\"Hey we need to either update or make user login again\");\n        if (expireRefreshTime * 1000 - Date.now < 1) {\n          console.log(\n            \"Even ur refresh token has already been expired we need you to login again....\"\n          );\n          this.setState({\n            isAunthenticated: false,\n          });\n          return;\n        }\n        console.log(\n          \"Our refresh token is alive you should use it to update your access token\"\n        );\n\n        this.updateToken(tokens.refresh);\n\n        this.setState({\n          isAunthenticated: true,\n        });\n\n        // Kama amekuwa aunthenticated vilevile inabidi tufetch kama huyu jamaa na products or not...\n\n        let response = await fetch(`${BACKEND_ORIGIN}/api/cartproducts/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: user_id,\n          }),\n        });\n\n        let data = await response.json();\n\n        // somethimes data returned is Object { message: \"No cart by this user\", code: \"Cart matching query does not exist.\" }\n        // if theres is no cart of 'unordered' status by that user so we should deal\n        // with this issue\n        if (!data.message) {\n          this.setState({\n            data,\n            cart_id: data[0].get_cartId,\n          });\n        }\n      } else {\n        this.setState({\n          isAunthenticated: true,\n        });\n\n        let response = await fetch(`${BACKEND_ORIGIN}/api/cartproducts/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: user_id,\n          }),\n        });\n\n        let data = await response.json();\n\n        // somethimes data returned is Object { message: \"No cart by this user\", code: \"Cart matching query does not exist.\" }\n        // if theres is no cart of 'unordered' status by that user so we should deal\n        // with this issue\n        // since our data is the list of cartproducts and there is not way a given cartproducts to come\n        // from the different cart.. all these cproducts are derived from the given one cart...\n        // that how i access cart_id from them\n        if (!data.message) {\n          this.setState({\n            data,\n            cart_id: data[0].get_cartId,\n          });\n        }\n      }\n    } catch (InvalidTokenError) {\n      console.log(InvalidTokenError.message);\n      console.log(\n        \"Invalid token specified since, when the token is expired the jwt automatically change your storage and it ill look like this\"\n      );\n      // authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n      this.setState({\n        isAunthenticated: false,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <MediaQuery maxWidth={899}>\n          <div>\n            <Head>\n              <title>PERSONALYZER</title>\n              <link\n                rel=\"stylesheet\"\n                href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                crossorigin=\"anonymous\"\n              />\n              <link\n                rel=\"stylesheet\"\n                href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n              ></link>\n            </Head>\n            {this.state.isAunthenticated ? (\n              this.state.cart_id > 0 ? (\n                <div className={styles.bothOfUs}>\n                  <div className={styles.main}>\n                    <div className={styles.payMe}>\n                      <p className={styles.pay}>Mode of payment</p>\n                      <div className={styles.reduceMe}>\n                        <Segment>\n                          <Grid>\n                            <Grid.Column width={8}>\n                              <div className={styles.phead}>\n                                <p className={styles.lnamba}>LIPA NAMBA</p>\n                                <p className={styles.aname1}>111000</p>\n                              </div>\n                            </Grid.Column>\n\n                            <Grid.Column width={8}>\n                              <div className={styles.phead2}>\n                                <p className={styles.qr}>QR CODE</p>\n                                <p className={styles.aqr}>\n                                  <img\n                                    width={130}\n                                    height={130}\n                                    src=\"../static/images/frame.png\"\n                                  />\n                                </p>\n                              </div>\n                            </Grid.Column>\n                          </Grid>\n                        </Segment>\n                      </div>\n                    </div>\n                    <div className={styles.out}>\n                      <p className={styles.head}>Jinsi ya kulipia kwa M-Pesa</p>\n                      <div className={styles.meth1}>\n                        <p className={styles.htwo}>Kwa njia ya kawaida.</p>\n                        <div className={styles.para}>\n                          <p>1. Piga *150*01#</p>\n                          <p>2. Chagua 5(Lipa kwa simu) </p>\n                          <p>3. Chagua 1(Kwenda Tigo Pesa)</p>\n                          <p>4. Ingiza lipa namba </p>\n                          <p>5. Ingiza kiasi cha kulipia</p>\n                          <p>6. Ingiza namba ya siri kuthibitisha</p>\n                          <p>\n                            7. Ukishalipia ingiza namba ya muamala(\n                            <b>\n                              <i>Transaction number</i>\n                            </b>\n                            ) na nambako ya simu(\n                            <b>\n                              <i>Phone number</i>\n                            </b>\n                            ) kwenye fomu ya kuweka oda(\n                            <b>\n                              <i>Place order</i>\n                            </b>\n                            ) hapo chini.\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className={styles.meth2}>\n                        <p className={styles.htwo}>Kwa kutumia M-Pesa App</p>\n                        <div className={styles.para}>\n                          <p>1. Fungua app ya TIGO PESA</p>\n                          <p>2.Chagua lipa kwa simu</p>\n                          <p>\n                            3. Changua njia ya kufanya malipo kwa kuingiza lipa\n                            namba au kuskani picha ya QR\n                          </p>\n                          <p>4. Ingiza kiasi cha kulipia</p>\n                          <p>5. Ingiza namba ya siri kuthibitisha</p>\n                          <p>\n                            7. Ukishalipia ingiza namba ya muamala(\n                            <b>\n                              <i>Transaction number</i>\n                            </b>\n                            ) na nambako ya simu(\n                            <b>\n                              <i>Phone number</i>\n                            </b>\n                            ) kwenye fomu ya kuweka oda(\n                            <b>\n                              <i>Place order</i>\n                            </b>\n                            ) hapo chini.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className={styles.moreInfo}>\n                      <div className={styles.help}>\n                        <p className={styles.hin3}>\n                          *** Contact us to deliver a product anywhere in\n                          Tanzania.\n                          <br></br>\n                          *** Contact us if you face any problem about payment\n                        </p>\n                        <br />\n                        <div className={styles.divu}>\n                          <span className={styles.contacts}>\n                            <Icon size=\"large\" name=\"whatsapp\" color=\"grey\" />\n                            +255623317196\n                          </span>\n\n                          <span className={styles.contacts}>\n                            <Icon\n                              size=\"large\"\n                              name=\"mail outline\"\n                              color=\"grey\"\n                            />\n                            support@personalizer.co.tz\n                          </span>\n\n                          <MediaQuery minWidth={700}>\n                            <span>\n                              <Icon\n                                size=\"large\"\n                                name=\"instagram\"\n                                color=\"grey\"\n                              />\n                              support@personalizer.co.tz\n                            </span>\n                          </MediaQuery>\n                        </div>\n                      </div>\n                      <div className={styles.forPick}>\n                        <p className={styles.infoP}>\n                          For picking your product at station use this address:\n                        </p>\n                        <address style={{ color: \"rgb(158, 67, 67)\" }}>\n                          <i>\n                            Kariakoo, Aggrey na Likoma Street,\n                            <br />\n                            Dar es salaam,\n                            <br />\n                            0623317196,\n                            <br />\n                            onlinetek@gmail.com\n                          </i>\n                        </address>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className={styles.imHereToStay}>\n                    <form>\n                      <label className={styles.lab}>Transaction number:</label>\n                      <br />\n                      <input\n                        className={styles.inp}\n                        ref={this.muamala}\n                        onChange={(e) =>\n                          this.setState({ transactionId: e.target.value })\n                        }\n                      />{\" \"}\n                      <br />\n                      <label className={styles.lab1}>Phone number:</label>{\" \"}\n                      <br />\n                      <input\n                        className={styles.inp}\n                        ref={this.phone}\n                        onChange={(e) =>\n                          this.setState({ phone_number: e.target.value })\n                        }\n                      />{\" \"}\n                      <br />\n                      <div className={styles.error} ref={this.err}>\n                        <img src=\"../static/images/warning.png\" width={12} />\n                        <span className={styles.neno1}>\n                          {this.state.errorMessage}\n                        </span>\n                      </div>\n                      <button\n                        className={styles.btn}\n                        onClick={this.onPlaceOrder}\n                      >\n                        Place order\n                      </button>\n                    </form>\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <p>\n                    Sorry your cart appear to be empty. Shop now for you to\n                    place order, we should have a image and a button of shop\n                    now..\n                  </p>\n                </>\n              )\n            ) : (\n              <>\n                <p>Hey you should login to place order. Login here...</p>\n              </>\n            )}\n          </div>\n        </MediaQuery>\n        <MediaQuery minWidth={900}>\n          <h2 style={{ textAlign: \"center\" }}>Out of screen width range...</h2>\n        </MediaQuery>\n      </>\n    );\n  }\n}\n\nexport default MPesa;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/order.js",["228","229","230"],[],"import React, { Component } from \"react\";\nimport styles from \"../static/css/order.module.css\";\nimport {\n  Header,\n  Divider,\n  Button,\n  Grid,\n  Icon,\n  Segment,\n  Form,\n} from \"semantic-ui-react\";\nimport Head from \"next/head\";\nimport jwt_decode from \"jwt-decode\";\nimport BACKEND_ORIGIN from \"../utils/domain\";\nimport Router from \"next/router\";\n\nimport dynamic from \"next/dynamic\";\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n\n// lazima huku uje na id.. Lazima pia uwe aunthenticated....\n// Hata mtu akisend user_id kwenye url inabidi tu-prove if the\n// user is aunthenticated..... But huku inabidi kwenye url a-pass\n// cart id.... Hina haja ya ku-pass cart_id in short kama user amekuwa\n// aunthenticated tutapata card_id yake tu...\n\nclass Order extends Component {\n  state = {\n    isAunthenticated: false,\n    attributeValue: \"Pick at Station\",\n    attributeValue1: \"M-PESA\",\n    data: [],\n    user_id: 0,\n    cart_id: 0,\n    transactionId: \"\",\n    phone_number: \"\",\n    errorMessage: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.err = React.createRef();\n    this.muamala = React.createRef();\n    this.phone = React.createRef();\n  }\n\n  executingTokenLogics = async () => {\n    try {\n      const tokens = localStorage.getItem(\"authTokens\")\n        ? JSON.parse(localStorage.getItem(\"authTokens\"))\n        : null;\n      if (!tokens) {\n        console.log(\"You needed to login, no records\");\n        this.setState({ isAunthenticated: false });\n        return;\n      }\n      const decodedRefreshToken = jwt_decode(tokens.refresh);\n      const expireRefreshTime = decodedRefreshToken.exp;\n      console.log(\"Hey this is the expire date of the refreshToken\");\n      console.log(expireRefreshTime);\n      console.log(\"Lets try to access the json access token\");\n      console.log(tokens.access);\n      const decodedAccessData = jwt_decode(tokens.access);\n      console.log(\"This is expiring time for you...\");\n      console.log(decodedAccessData);\n      const user_id = decodedAccessData.user_id;\n      this.setState({\n        user_id,\n      });\n      console.log(\"This is user_id for you\");\n      console.log(user_id);\n      const expireAccessTime = decodedAccessData.exp;\n      console.log(expireAccessTime);\n      const diff = expireAccessTime * 1000 - Date.now();\n      if (diff < 1) {\n        console.log(\"Hey we need to either update or make user login again\");\n        if (expireRefreshTime * 1000 - Date.now < 1) {\n          console.log(\n            \"Even ur refresh token has already been expired we need you to login again....\"\n          );\n          this.setState({\n            isAunthenticated: false,\n          });\n          return;\n        }\n        console.log(\n          \"Our refresh token is alive you should use it to update your access token\"\n        );\n\n        this.updateToken(tokens.refresh);\n\n        this.setState({\n          isAunthenticated: true,\n        });\n\n        // Kama amekuwa aunthenticated vilevile inabidi tufetch kama huyu jamaa na products or not...\n\n        let response = await fetch(`${BACKEND_ORIGIN}/api/cartproducts/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: user_id,\n          }),\n        });\n\n        let data = await response.json();\n        // somethimes data returned is Object { message: \"No cart by this user\", code: \"Cart matching query does not exist.\" }\n        // if theres is no cart of 'unordered' status by that user so we should deal\n        // with this issue\n        // since our data is the list of cartproducts and there is not way a given cartproducts to come\n        // from the different cart.. all these cproducts are derived from the given one cart...\n        // that how i access cart_id from them\n        if (!data.message) {\n          this.setState({\n            data,\n            cart_id: data[0].get_cartId,\n          });\n        }\n      } else {\n        this.setState({\n          isAunthenticated: true,\n        });\n\n        let response = await fetch(`${BACKEND_ORIGIN}/api/cartproducts/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: user_id,\n          }),\n        });\n\n        let data = await response.json();\n        // somethimes data returned is Object { message: \"No cart by this user\", code: \"Cart matching query does not exist.\" }\n        // if theres is no cart of 'unordered' status by that user so we should deal\n        // with this issue\n        // since our data is the list of cartproducts and there is not way a given cartproducts to come\n        // from the different cart.. all these cproducts are derived from the given one cart...\n        // that how i access cart_id from them\n\n        if (!data.message) {\n          this.setState({\n            data,\n            cart_id: data[0].get_cartId,\n          });\n        }\n      }\n    } catch (InvalidTokenError) {\n      console.log(InvalidTokenError.message);\n      console.log(\n        \"Invalid token specified since, when the token is expired the jwt automatically change your storage and it ill look like this\"\n      );\n      // authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n      this.setState({\n        isAunthenticated: false,\n      });\n    }\n  };\n\n  onPlaceOrder = async (e) => {\n    e.preventDefault();\n\n    if (\n      this.state.transactionId.trim().length === 0 ||\n      this.state.phone_number.trim().length === 0\n    ) {\n      // then return an error that hey we don't accept empty data.\n      console.log(\"we dont accept empty string...\");\n      this.setState({\n        errorMessage: \"Failed, We don't accept empty fields\",\n      });\n\n      this.err.current.style.display = \"block\";\n      this.timeout = setTimeout(() => {\n        this.err.current.style.display = \"none\";\n      }, 5000);\n\n     \n      return;\n    }\n\n    if (this.state.phone_number.trim().length < 10) {\n      this.setState({\n        errorMessage: \"Failed, phone number looks to be invalid!\",\n      });\n      this.err.current.style.display = \"block\";\n      this.timeout = setTimeout(() => {\n        this.err.current.style.display = \"none\";\n      }, 5000);\n\n      \n      return;\n    }\n\n    const response = await fetch(`${BACKEND_ORIGIN}/api/create_order/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        transactionId: this.state.transactionId,\n        mobile: parseInt(this.state.phone_number),\n        id: this.state.user_id,\n        cartId: this.state.cart_id,\n      }),\n    });\n\n    const data = await response.json();\n\n    console.log(\"This is the data you received from the server.....\");\n    console.log(data);\n\n    if (data.success) {\n      return Router.push({\n        pathname: '/done',\n        query: {\n          unique_id : data.unique_id,\n          \n        }\n      });\n    } else {\n      console.log(\"Something is wrong here...\");\n    }\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n  }\n\n  async componentDidMount() {\n    console.log(\n      \"This is value of isAunthenticated \",\n      this.state.isAunthenticated\n    );\n\n    this.executingTokenLogics();\n\n    this.executingTokenLogicsInterval = setInterval(\n      () => this.executingTokenLogics(),\n      1200000\n    );\n  }\n\n  updateToken = async (refreshToken) => {\n    let response = await fetch(`${BACKEND_ORIGIN}/api/token/refresh/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ refresh: refreshToken }),\n    });\n\n    let data = await response.json();\n    localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  };\n\n  render() {\n    return (\n      <div className={styles.baba}>\n        <Head>\n          <title>PERSONALYZER</title>\n          <link\n            rel=\"stylesheet\"\n            href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n            integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n            crossorigin=\"anonymous\"\n          />\n          <link\n            rel=\"stylesheet\"\n            href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n          ></link>\n        </Head>\n        {this.state.isAunthenticated ? (\n          this.state.data.length > 0 ? (\n            <>\n              <MediaQuery maxWidth={899}>\n                <div className={styles.sendMeCenter}>\n                  <div className={styles.mode}>\n                    <p className={styles.titl}>Select mode of payment</p>\n                    <div className={styles.mpe}>\n                      <button\n                        className={styles.mpeBtn}\n                        onClick={() => Router.push(\"/mpesa\")}\n                      >\n                        M-PESA\n                      </button>\n                    </div>\n                    <div className={styles.tigopesa}>\n                      <button\n                        className={styles.tigBtn}\n                        onClick={() => Router.push(\"/tigopesa\")}\n                      >\n                        TIGO PESA\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </MediaQuery>\n\n              <MediaQuery minWidth={900}>\n                <div className={styles.test}>\n                  <div className={styles.toto}>\n                    <div className={styles.topSeg}>\n                      <Header\n                        attached=\"top\"\n                        as=\"h1\"\n                        textAlign=\"center\"\n                        color=\"grey\"\n                        content=\"Place Order by Confirming payment and Delivery method\"\n                      />\n                      <Segment attached placeholder>\n                        <div style={{ marginLeft: \"2%\" }}>\n                          <Grid columns={2}>\n                            <Divider vertical>|</Divider>\n                            <Grid.Row>\n                              <Grid.Column>\n                                <Form>\n                                  <Form.Field>\n                                    <label style={{ color: \"grey\" }}>\n                                      Transaction number/Namba ya muamala\n                                    </label>\n                                    <input\n                                      onChange={(e) =>\n                                        this.setState({\n                                          transactionId: e.target.value,\n                                        })\n                                      }\n                                    />\n                                  </Form.Field>\n                                  <Form.Field>\n                                    <label style={{ color: \"grey\" }}>\n                                      Phone number\n                                    </label>\n                                    <input\n                                      onChange={(e) =>\n                                        this.setState({\n                                          phone_number: e.target.value,\n                                        })\n                                      }\n                                    />\n                                  </Form.Field>\n                                  <div className={styles.error} ref={this.err}>\n                                    <img\n                                      src=\"../static/images/warning.png\"\n                                      width={12}\n                                    />\n                                    <span className={styles.neno1}>\n                                      {this.state.errorMessage}\n                                    </span>\n                                  </div>\n                                  <Button\n                                    color=\"black\"\n                                    fluid\n                                    type=\"submit\"\n                                    onClick={this.onPlaceOrder}\n                                  >\n                                    Place Order\n                                  </Button>\n                                </Form>\n                              </Grid.Column>\n                              <Grid.Column>\n                                <div className={styles.not1Wrapper}>\n                                  <p className={styles.hint}>\n                                    For picking your product at station, use\n                                    this address:\n                                  </p>\n                                  <div className={styles.addr}>\n                                    <address>\n                                      <i>\n                                        Kariakoo, Aggrey na Likoma Street,\n                                        <br />\n                                        Dar es salaam,\n                                        <br />\n                                        0623317196,\n                                        <br />\n                                        onlinetek@gmail.com\n                                      </i>\n                                    </address>\n                                  </div>\n                                </div>\n\n                                <div className={styles.not2Wrapper}>\n                                  <p className={styles.hint2}>\n                                    ***Contact us to deliver a product anywhere\n                                    in Tanzania.\n                                    <br />\n                                    ***Contact us if you face any problem about\n                                    the payment.\n                                  </p>\n                                  <div className={styles.bt}>\n                                    <span\n                                      style={{\n                                        fontWeight: \"bold\",\n                                        color: \"grey\",\n                                        marginRight: \"5%\",\n                                      }}\n                                    >\n                                      <Icon\n                                        size=\"large\"\n                                        name=\"whatsapp\"\n                                        color=\"black\"\n                                      />\n                                      +255623317196\n                                    </span>\n                                    <span\n                                      style={{\n                                        fontWeight: \"bold\",\n                                        color: \"grey\",\n                                        marginRight: \"4%\",\n                                      }}\n                                    >\n                                      <Icon\n                                        size=\"large\"\n                                        name=\"instagram\"\n                                        color=\"black\"\n                                      />\n                                      @personalizer\n                                    </span>\n                                    <span\n                                      style={{\n                                        fontWeight: \"bold\",\n                                        color: \"grey\",\n                                      }}\n                                    >\n                                      <Icon\n                                        size=\"large\"\n                                        name=\"mail outline\"\n                                        color=\"black\"\n                                      />\n                                      support@personalizer.co.tz\n                                    </span>\n                                  </div>\n                                </div>\n                              </Grid.Column>\n                            </Grid.Row>\n                          </Grid>\n                        </div>\n                      </Segment>\n                    </div>\n                    <Grid>\n                      <Grid.Column width={10}>\n                        <div className={styles.seg2}>\n                          <Segment>\n                            <Header\n                              as=\"h1\"\n                              color=\"grey\"\n                              content=\"Mode of Payments\"\n                            />\n                            <hr />\n\n                            <div>\n                              <h3 className={styles.mpesa}>M-PESA</h3>\n                              <Grid>\n                                <Grid.Column width={8}>\n                                  <div style={{ marginLeft: \"5%\" }}>\n                                    <p className={styles.lnamba}>LIPA NAMBA</p>\n                                    <span className={styles.aname1}>\n                                      111000\n                                    </span>\n                                  </div>\n                                </Grid.Column>\n\n                                <Grid.Column width={8}>\n                                  <div style={{ marginLeft: \"5%\" }}>\n                                    <p className={styles.qr}>QR CODE</p>\n                                    <p className={styles.aqr}>\n                                      <img\n                                        width={150}\n                                        height={150}\n                                        src=\"../static/images/frame.png\"\n                                      />\n                                    </p>\n                                  </div>\n                                </Grid.Column>\n                              </Grid>\n                            </div>\n\n                            <div style={{ marginTop: \"2%\" }}>\n                              <h3 className={styles.tpesa}>TIGO PESA</h3>\n                              <Grid>\n                                <Grid.Column width={8}>\n                                  <div style={{ marginLeft: \"5%\" }}>\n                                    <p className={styles.lnamba}>LIPA NAMBA</p>\n                                    <span className={styles.aname}>111234</span>\n                                  </div>\n                                </Grid.Column>\n\n                                <Grid.Column width={8}>\n                                  <div style={{ marginLeft: \"5%\" }}>\n                                    <p className={styles.qr}>QR CODE</p>\n                                    <p className={styles.aqr}>\n                                      <img\n                                        width={150}\n                                        height={150}\n                                        src=\"../static/images/frame.png\"\n                                      />\n                                    </p>\n                                  </div>\n                                </Grid.Column>\n                              </Grid>\n                            </div>\n                          </Segment>\n                        </div>\n                      </Grid.Column>\n\n                      <Grid.Column width={6}>\n                        <div className={styles.p1}>\n                          <Header\n                            as=\"h2\"\n                            color=\"grey\"\n                            attached=\"top\"\n                            content=\"Jinsi ya kulipia kwa M-PESA\"\n                          />\n                          <Segment attached>\n                            <div>\n                              <div className={styles.hd}>\n                                <h3 className={styles.kichwa}>\n                                  Kwa njia ya kawaida\n                                </h3>\n                              </div>\n                              <div className={styles.para}>\n                                <p>1. Piga *150*00#</p>\n                                <p>2. </p>\n                              </div>\n\n                              <div className={styles.hd1}>\n                                <h3 className={styles.kichwa}>\n                                  Kwa kutumia M-PESA app.\n                                </h3>\n                              </div>\n                              <div className={styles.para}>\n                                <p>1. Fungua app yako ya M-PESA</p>\n                                <p>\n                                  2. Juu upande wa kulia bonyeza picha ya QR\n                                  code\n                                </p>\n                              </div>\n                            </div>\n                          </Segment>\n                        </div>\n\n                        <div className={styles.p2}>\n                          <Header\n                            attached=\"top\"\n                            as=\"h2\"\n                            color=\"grey\"\n                            content=\"Jinsi ya kulipia kwa TIGO PESA\"\n                          />\n\n                          <Segment attached>\n                            <div>\n                              <div className={styles.hd2}>\n                                <h3 className={styles.kichwa}>\n                                  Kwa njia ya kawaida\n                                </h3>\n                              </div>\n                              <div className={styles.para}>\n                                <p>1. Piga *150*01#</p>\n                                <p>2. Chagua 5(Lipa kwa simu) </p>\n                                <p>3. Chagua 1(Kwenda Tigo Pesa)</p>\n                                <p>4. Ingiza lipa namba </p>\n                                <p>5. Ingiza kiasi cha kulipia</p>\n                                <p>6. Ingiza namba ya siri kuthibitisha</p>\n                              </div>\n\n                              <div className={styles.hd3}>\n                                <h3 className={styles.kichwa}>\n                                  Kwa kutumia TIGO PESA app.\n                                </h3>\n                              </div>\n                              <div className={styles.para}>\n                                <p>1. Fungua app ya TIGO PESA</p>\n                                <p>2.Chagua lipa kwa simu</p>\n                                <p>\n                                  3. Changua njia ya kufanya malipo kwa kuingiza\n                                  lipa namba au kuskani picha ya QR\n                                </p>\n                                <p>4. Ingiza kiasi cha kulipia</p>\n                                <p>5. Ingiza namba ya siri kuthibitisha</p>\n                              </div>\n                            </div>\n                          </Segment>\n                        </div>\n                      </Grid.Column>\n                    </Grid>\n                  </div>\n                </div>\n              </MediaQuery>\n            </>\n          ) : (\n            <div>\n              Your cart is empty, You can't place order for empty cart...\n            </div>\n          )\n        ) : (\n          <div>You're needed to be Aunthenticated...</div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Order;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/output.js",["231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251"],[],"import React, { Component } from \"react\";\nimport NavBar from \"../components/NavBar\";\nimport Sign from \"../components/Sign\";\nimport styles from \"../static/css/showRoom.module.css\";\nimport {\n  Card,\n  Radio,\n  Form,\n  Segment,\n  Icon,\n  Header,\n  Button,\n  Grid,\n  Message,\n} from \"semantic-ui-react\";\nimport jwt_decode from \"jwt-decode\";\nimport BACKEND_ORIGIN from \"../utils/domain\";\n\nimport dynamic from \"next/dynamic\";\nimport Router from \"next/router\";\n\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n\nclass Output extends Component {\n  state = {\n    isAunthenticated: false,\n    products: [],\n    productQuantity: 1,\n    attributeValue: \"\", // Lazima tuwe na default value hapa.. Yaani pale user anapo-select/click the image/product this value should be updated as the default propertyValue.. Ko hii naweza ikaanza kama '' but baadae ikaja kuwa updated pale user anavyoselect picha....\n    selectedObj: {},\n    selectedObjPrice: 0,\n    selectedObjImages: [],\n    modelOpen: false,\n    customValue: \"\",\n    addedToCart: false,\n    x: 0,\n    y: 0,\n    secondPropsAttributeValue: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.father = React.createRef();\n    this.showRoom = React.createRef();\n    this.small1 = React.createRef();\n    this.small2 = React.createRef();\n    this.small3 = React.createRef();\n    this.preview = React.createRef();\n    this.explain = React.createRef();\n    this.closeBtn = React.createRef();\n    this.err = React.createRef();\n    this.err1 = React.createRef();\n    this.modal = React.createRef();\n    this.closeBtnx = React.createRef();\n    this.uwanja = React.createRef();\n  }\n\n  executingTokenLogics = () => {\n    try {\n      const tokens = localStorage.getItem(\"authTokens\")\n        ? JSON.parse(localStorage.getItem(\"authTokens\"))\n        : null;\n      if (!tokens) {\n        console.log(\"You needed to login, no records\");\n        this.setState({ isAunthenticated: false });\n        return;\n      }\n      const decodedRefreshToken = jwt_decode(tokens.refresh);\n      const expireRefreshTime = decodedRefreshToken.exp;\n      console.log(\"Hey this is the expire date of the refreshToken\");\n      console.log(expireRefreshTime);\n      console.log(\"Lets try to access the json access token\");\n      console.log(tokens.access);\n      const decodedAccessData = jwt_decode(tokens.access);\n      console.log(\"This is expiring time for you...\");\n      console.log(decodedAccessData);\n      const expireAccessTime = decodedAccessData.exp;\n      console.log(expireAccessTime);\n      const diff = expireAccessTime * 1000 - Date.now();\n      if (diff < 1) {\n        console.log(\"Hey we need to either update or make user login again\");\n        if (expireRefreshTime * 1000 - Date.now < 1) {\n          console.log(\n            \"Even ur refresh token has already been expired we need you to login again....\"\n          );\n          this.setState({\n            isAunthenticated: false,\n          });\n          return;\n        }\n        console.log(\n          \"Our refresh token is alive you should use it to update your access token\"\n        );\n\n        this.updateToken(tokens.refresh);\n\n        this.setState({\n          isAunthenticated: true,\n        });\n      } else {\n        this.setState({\n          isAunthenticated: true,\n        });\n      }\n    } catch (InvalidTokenError) {\n      console.log(InvalidTokenError.message);\n      console.log(\n        \"Invalid token specified since, when the token is expired the jwt automatically change your storage and it ill look like this\"\n      );\n      // authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n      this.setState({\n        isAunthenticated: false,\n      });\n    }\n  };\n\n  viewItem = async (e) => {\n    this.setState({\n      y: window.pageYOffset,\n      x: window.pageXOffset,\n    });\n    console.log(e.target.id);\n    // console.log(this.props.products)\n    const product = this.state.products.find(\n      (product) => product.id === parseInt(e.target.id)\n    );\n    console.log(\"This is the product we captured\");\n    console.log(product);\n\n    await this.setState({\n      selectedObj: product,\n      selectedObjPrice: product.price,\n      selectedObjImages: product.get_urls,\n    });\n\n    if (product.hasPropertySelection) {\n      await this.setState({\n        attributeValue: Object.values(\n          this.state.selectedObj.map_property[0]\n        )[0],\n      });\n    }\n\n    if (product.hasSecondPropertySelection) {\n      await this.setState({\n        secondPropsAttributeValue: Object.values(\n          this.state.selectedObj.map_secondProps[0]\n        )[0],\n      });\n    }\n\n    window.scrollTo(0, 0);\n    this.showRoom.current.style.zIndex = \"1\";\n\n    this.father.current.style.display = \"none\";\n    document.body.style.background =\n      \"linear-gradient(rgba(0, 0, 0, .5), rgba(0, 0, 0, .4))\";\n\n    this.showRoom.current.style.display = \"block\";\n  };\n\n  onIncrease = () => {\n    this.setState({\n      productQuantity: this.state.productQuantity + 1,\n    });\n\n    // Hapa itaji-override na kuzidisha another sum used\n    this.setState({\n      selectedObjPrice:\n        this.state.selectedObjPrice + this.state.selectedObj.price,\n    });\n  };\n\n  onDecrease = () => {\n    if (this.state.productQuantity > 1) {\n      this.setState({\n        productQuantity: this.state.productQuantity - 1,\n      });\n\n      this.setState({\n        selectedObjPrice:\n          this.state.selectedObjPrice - this.state.selectedObj.price,\n      });\n    }\n  };\n\n  onRemove = (e) => {\n    // Kuna state hapa inabidi uzibadilishe ziende kwenye default\n    this.setState({\n      selectedObj: {},\n      attributeValue: \"\",\n      customValue: \"\",\n      productQuantity: 1,\n      selectedObjPrice: 0,\n    });\n\n    e.preventDefault();\n    document.body.style.background = \"#fff\";\n    this.father.current.style.display = \"block\";\n    this.father.current.style.opacity = \"1\";\n    this.showRoom.current.style.display = \"none\";\n    this.showRoom.current.style.zIndex = \"0\";\n    window.scrollTo(this.state.x, this.state.y);\n  };\n\n  onRemovex = (e) => {\n    this.setState({\n      modelOpen: false,\n    });\n    // Also check here if user has already login you should update isAunthenticated state\n    // Ko hapa ikisha-execute hizi logic itasaidia ku-update automatically\n    // coz this is the method that run on interval to determine the actual user..\n\n    this.executingTokenLogics();\n\n    this.modal.current.style.display = \"none\";\n    this.showRoom.current.style.opacity = \"1\";\n    this.showRoom.current.style.pointerEvents = \"auto\";\n  };\n\n  selectedOn = (e) => {\n    e.preventDefault();\n    this.preview.current.src = e.target.src;\n  };\n\n  addToCart = async (e) => {\n    e.preventDefault();\n\n    this.executingTokenLogics();\n\n    if (!this.state.isAunthenticated) {\n      this.showRoom.current.style.opacity = \"0.05\";\n      this.showRoom.current.style.pointerEvents = \"none\";\n      this.modal.current.style.display = \"block\";\n    } else {\n      console.log(\"Hey this user has been loged in, worry out\");\n\n      const tokens = localStorage.getItem(\"authTokens\");\n      console.log(\"Hey this is tokens for you...\");\n      console.log(tokens);\n      const json = JSON.parse(tokens);\n      let access = json.access;\n      console.log(\"Hey this is access token for you\");\n      console.log(access);\n      let decodedAccessData = \"\";\n      try {\n        decodedAccessData = jwt_decode(access);\n      } catch (err) {\n        if (this.uwanja.current) {\n          this.uwanja.current.value = \"\";\n          this.setState({\n            customValue: \"\",\n          });\n        }\n      }\n      console.log(\"This is the id of the user who loged in \");\n      console.log(decodedAccessData.user_id);\n      const user_id = decodedAccessData.user_id;\n      const productId = this.state.selectedObj.id;\n      console.log(user_id, productId);\n\n      const id = this.state.selectedObj.id;\n      const price = this.state.selectedObjPrice;\n      const quantity = this.state.productQuantity;\n      const value = this.state.attributeValue;\n      const secondPropsAttributeValue = this.state.secondPropsAttributeValue;\n      const customization = this.state.customValue;\n\n      console.log(\"Hey this is user id for you\");\n      console.log(user_id);\n      let check = await fetch(`${BACKEND_ORIGIN}/api/cartExistOrNot/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          user_id,\n          productId: id,\n          price,\n          quantity,\n          customization,\n          value,\n          secondValue: secondPropsAttributeValue,\n        }),\n      });\n\n      console.log(\"Im outside my nigga\");\n      console.log(check);\n      let output = await check.json();\n\n      console.log(\"This is the output we have\");\n      console.log(output);\n\n      if (output.status == false) {\n        \n        try {\n          let response = await fetch(`${BACKEND_ORIGIN}/api/carts/`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              id: user_id,\n              productId,\n              price,\n              quantity,\n              customization,\n              value,\n              secondValue: secondPropsAttributeValue,\n            }),\n          });\n\n          let data = await response.json();\n          console.log(\"Hey this is the response from the server\");\n          console.log(data);\n          if (this.uwanja.current) {\n            this.uwanja.current.value = \"\";\n            this.setState({\n              customValue: \"\",\n            });\n          }\n\n          console.log(\"Even ma mama thinks that my mind has gone\");\n          this.err1.current.style.display = \"block\";\n          this.successInterval = setTimeout(() => {\n            this.err1.current.style.display = \"none\";\n          }, 5000);\n        } catch (err) {\n          if (this.uwanja.current) {\n            this.uwanja.current.value = \"\";\n            this.setState({\n              customValue: \"\",\n            });\n          }\n        }\n      } else {\n        console.log(\"No need to create a new cart you have one for you....\");\n        let cartByThatUser = output.cart;\n        console.log(\"Hey this is cart by our user....\");\n        console.log(cartByThatUser);\n\n        console.log(\"Even ma mama thinks that my mind has gone\");\n        this.err1.current.style.display = \"block\";\n        this.successInterval = setTimeout(() => {\n          this.err1.current.style.display = \"none\";\n        }, 5000);\n\n        if (this.uwanja.current) {\n          this.uwanja.current.value = \"\";\n          this.setState({\n            customValue: \"\",\n          });\n        }\n      }\n    }\n  };\n\n  static async getInitialProps(props) {\n    const { search } = props.query;\n    // then fetch all product of this category on the database...\n\n    let check = await fetch(`${BACKEND_ORIGIN}/api/output/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        search,\n      }),\n    });\n\n    let products = await check.json();\n    products = products.reverse();\n    console.log(\"This is products fetched for you\");\n    console.log(products);\n    return { search, products };\n  }\n\n  async componentDidMount() {\n    console.log(\n      \"This is value of isAunthenticated \",\n      this.state.isAunthenticated\n    );\n\n    this.executingTokenLogics();\n\n    try {\n      let response = await fetch(`${BACKEND_ORIGIN}/api/products/`);\n\n      let data = await response.json();\n      console.log(\"This is your response from the server about all products\");\n      console.log(data);\n      data = data.reverse();\n\n      await this.setState(\n        {\n          products: data,\n        },\n        () => console.log(this.state.products)\n      ); // this is callback https://stackoverflow.com/questions/42038590/when-to-use-react-setstate-callback\n    } catch (err) {\n      console.log(err.message);\n    }\n\n    this.executingTokenLogicsInterval = setInterval(\n      () => this.executingTokenLogics(),\n      1200000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.executingTokenLogicsInterval);\n    clearTimeout(this.errorTimeout);\n    clearTimeout(this.successInterval);\n    console.log(\"Timeout has been cleared...\");\n    // Also in case we clicked the product to see then the background color is changed\n    // to something like black so when a user click register button from there we shoud\n    // make sure the background color of next body restored back to white(default color)\n\n    document.body.style.background = \"#fff\";\n    document.body.style.overflow = \"visible\";\n  }\n\n  updateToken = async (refreshToken) => {\n    let response = await fetch(`${BACKEND_ORIGIN}/api/token/refresh/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ refresh: refreshToken }),\n    });\n\n    let data = await response.json();\n    localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  };\n\n  render() {\n    return (\n      <NavBar isAunthenticated={this.state.isAunthenticated}>\n        <div className={styles.baba} ref={this.father}>\n          {this.props.products.length > 0 ? (\n            <div className={styles.conte}>\n              <p\n                className={styles.hek}\n              >{`Pick your choice you want then shop now.`}</p>\n              <MediaQuery minWidth={200} maxWidth={400}>\n                <hr className={styles.ab} />\n              </MediaQuery>\n              <MediaQuery minWidth={401} maxWidth={576}>\n                <hr className={styles.ab} />\n              </MediaQuery>\n              <MediaQuery minWidth={577} maxWidth={899}>\n                <hr className={styles.ab} />\n              </MediaQuery>\n              <MediaQuery minWidth={900}>\n                <hr className={styles.ab} />\n              </MediaQuery>\n\n              <MediaQuery minWidth={200} maxWidth={400}>\n                <Card.Group itemsPerRow={1}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <img\n                        src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        height={200}\n                      />\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          {/* <Header color=\"grey\" content={product.title} /> */}\n                          <MediaQuery maxWidth={319}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 25\n                                ? product.title.substr(0, 24) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={320} maxWidth={350}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 29\n                                ? product.title.substr(0, 28) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={351}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 37\n                                ? product.title.substr(0, 35) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={() =>\n                            Router.push({\n                              pathname: \"/preview\",\n                              query: { product: product.id },\n                            })\n                          }\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n\n              <MediaQuery minWidth={401} maxWidth={576}>\n                <Card.Group itemsPerRow={2}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <MediaQuery maxWidth={499}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={140}\n                        />\n                      </MediaQuery>\n                      <MediaQuery minWidth={500}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={170}\n                        />\n                      </MediaQuery>\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          {/* <Header color=\"grey\" content={product.title} /> */}\n                          <MediaQuery maxWidth={500}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 19\n                                ? product.title.substr(0, 17) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                          <MediaQuery minWidth={501}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 25\n                                ? product.title.substr(0, 24) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={() =>\n                            Router.push({\n                              pathname: \"/preview\",\n                              query: { product: product.id },\n                            })\n                          }\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n\n              <MediaQuery minWidth={577} maxWidth={899}>\n                <Card.Group itemsPerRow={3}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <MediaQuery maxWidth={650}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={140}\n                        />\n                      </MediaQuery>\n                      <MediaQuery minWidth={651} maxWidth={700}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={150}\n                        />\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={701}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={170}\n                        />\n                      </MediaQuery>\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          {/* <Header color=\"grey\" content={product.title} /> */}\n                          <MediaQuery maxWidth={650}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 17\n                                ? product.title.substr(0, 16) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={651}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 20\n                                ? product.title.substr(0, 20) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={() =>\n                            Router.push({\n                              pathname: \"/preview\",\n                              query: { product: product.id },\n                            })\n                          }\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n\n              <MediaQuery minWidth={900} maxWidth={1100}>\n                <Card.Group itemsPerRow={4}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <img\n                        src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        height={150}\n                      />\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          {/* <Header color=\"grey\" content={product.title} /> */}\n                          <MediaQuery maxWidth={990}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 15\n                                ? product.title.substr(0, 15) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                          <MediaQuery minWidth={991}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 23\n                                ? product.title.substr(0, 23) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={this.viewItem}\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n\n              <MediaQuery minWidth={1101}>\n                <Card.Group itemsPerRow={5}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <MediaQuery maxWidth={1200}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={150}\n                        />\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={1201}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={170}\n                        />\n                      </MediaQuery>\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          {/* <Header color=\"grey\" content={product.title} /> */}\n                          <MediaQuery maxWidth={1199}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 15\n                                ? product.title.substr(0, 15) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                          <MediaQuery minWidth={1200}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 23\n                                ? product.title.substr(0, 23) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={this.viewItem}\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n            </div>\n          ) : (\n            <div className={styles.conte}>\n              <MediaQuery maxWidth={899}>\n                <div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      width: \"100%\",\n\n                      justifyContent: \"center\",\n                      overflowX: \"hidden\",\n                    }}\n                  >\n                    <img\n                      src=\"../static/images/notHere.gif\"\n                      width={200}\n                      height={200}\n                    />\n                  </div>\n                  <div>\n                    <p\n                      style={{\n                        textAlign: \"center\",\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                        fontSize: \"110%\",\n                      }}\n                    >\n                      Oops! No results, Please try a more general word\n                      <br />\n                      <button\n                        className=\"btn btn-info\"\n                        style={{ marginTop: \"2%\", fontWeight: \"bold\" }}\n                        onClick={() => Router.push(\"/products\")}\n                      >\n                        Explore all Products\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              </MediaQuery>\n\n              <MediaQuery minWidth={900} maxWidth={1199}>\n                <div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      width: \"100%\",\n\n                      justifyContent: \"center\",\n                      overflowX: \"hidden\",\n                    }}\n                  >\n                    <img\n                      src=\"../static/images/notHere.gif\"\n                      width={200}\n                      height={200}\n                    />\n                  </div>\n                  <div>\n                    <p\n                      style={{\n                        textAlign: \"center\",\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                        fontSize: \"120%\",\n                      }}\n                    >\n                      Oops! No results, Please try a more general word\n                      <br />\n                      <button\n                        className=\"btn btn-info\"\n                        style={{ marginTop: \"2%\", fontWeight: \"bold\" }}\n                        onClick={() => Router.push(\"/products\")}\n                      >\n                        {\" \"}\n                        Explore all Products\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              </MediaQuery>\n              <MediaQuery minWidth={1200}>\n                <div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      width: \"100%\",\n\n                      justifyContent: \"center\",\n                      overflowX: \"hidden\",\n                    }}\n                  >\n                    <img\n                      src=\"../static/images/notHere.gif\"\n                      width={300}\n                      height={300}\n                    />\n                  </div>\n                  <div>\n                    <p\n                      style={{\n                        textAlign: \"center\",\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                        fontSize: \"130%\",\n                      }}\n                    >\n                      Oops! No results, Please try a more general word\n                      <br />\n                      <button\n                        className=\"btn btn-info\"\n                        style={{ marginTop: \"2%\", fontWeight: \"bold\" }}\n                        onClick={() => Router.push(\"/products\")}\n                      >\n                        Explore all Products\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              </MediaQuery>\n\n              {/* <Header\n                as=\"h1\"\n                color=\"grey\"\n                content=\"Ooops!!! No Results,  Please try a more general word\"\n              /> */}\n            </div>\n          )}\n        </div>\n\n        <MediaQuery minWidth={900} maxWidth={1199}>\n          <div className={styles.showRoom} ref={this.showRoom}>\n            <div\n              className={styles.closeBtn}\n              onClick={this.onRemove}\n              ref={this.closeBtn}\n            >\n              &times;\n            </div>\n\n            <MediaQuery minWidth={900} maxWidth={1000}>\n              <Segment>\n                <Grid>\n                  {/* By default first image is the one placed first at canvas/preview section */}\n\n                  <Grid.Column width={9}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"300px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n\n                    <div className={styles.smallImage}>\n                      {this.state.selectedObjImages.map((url) => (\n                        <img\n                          className={styles.smaI}\n                          key={url}\n                          src={`${BACKEND_ORIGIN}${url}`}\n                          width={60}\n                          height={50}\n                          onClick={this.selectedOn}\n                        />\n                      ))}\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width={7}>\n                    <div className={styles.dodo}>\n                      <Header as=\"h3\">\n                        {this.state.selectedObj.title}\n                        <Header.Subheader color=\"orange\">\n                          {this.state.selectedObj.description}\n                        </Header.Subheader>\n                      </Header>\n\n                      <hr />\n                      <span>\n                        <Grid>\n                          <Grid.Column width={9}>\n                            Price:{\" \"}\n                            <Header\n                              as=\"h3\"\n                              color=\"grey\"\n                              content={`${new Intl.NumberFormat(\"en-US\", {\n                                style: \"currency\",\n                                currency: \"Tsh\",\n                                minimumFractionDigits: 0,\n                              }).format(\n                                parseInt(this.state.selectedObjPrice)\n                              )}/=`}\n                            />\n                          </Grid.Column>\n                          <Grid.Column width={7}>\n                            <span className={styles.sp}>\n                              Quantity:{\" \"}\n                              <span className={styles.idadi}>\n                                {this.state.productQuantity}\n                              </span>\n                            </span>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"80%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </Grid.Column>\n                        </Grid>\n                      </span>\n                    </div>\n                    <div>\n                      <div className={styles.customizations}>\n                        {this.state.selectedObj.hasPropertySelection ===\n                          false &&\n                        this.state.selectedObj.isCustomized === false &&\n                        this.state.selectedObj.hasSecondPropertySelection ===\n                          false ? (\n                          <> </>\n                        ) : (\n                          <div className={styles.top}>\n                            <p\n                              className={styles.h}\n                              style={{ fontWeight: \"bold\", fontSize: \"120%\" }}\n                            >\n                              User Customizations\n                            </p>\n\n                            <hr className={styles.hr1} />\n                          </div>\n                        )}\n\n                        <div className={styles.sec}>\n                          <>\n                            <Grid>\n                              {this.state.selectedObj.hasPropertySelection ? (\n                                <Grid.Column width={9}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_property[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.attributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.property_values.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state.attributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    attributeValue: prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {/* lets check for secondPropertySelection 900 - 1200 */}\n                              {this.state.selectedObj\n                                .hasSecondPropertySelection ? (\n                                <Grid.Column width={7}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_secondProps[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.secondPropsAttributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.second_propsValue.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state\n                                                    .secondPropsAttributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    secondPropsAttributeValue:\n                                                      prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {this.state.selectedObj.isCustomized ? (\n                                <>\n                                  <span\n                                    className={styles.bichwa}\n                                    style={{ fontSize: \"15px\" }}\n                                  >\n                                    Customize product's image/text.\n                                  </span>\n                                  <p className={styles.sub}>\n                                    *** Leave blank to use default one.\n                                    <br />\n                                    *** In case of image write a web link to\n                                    that image\n                                  </p>\n                                  <textarea\n                                    row={2}\n                                    cols={30}\n                                    className={this.tarea}\n                                    onChange={(event) =>\n                                      this.setState({\n                                        customValue: event.target.value,\n                                      })\n                                    }\n                                    style={{\n                                      marginBottom: \"3%\",\n                                      marginLeft: \"3%\",\n                                    }}\n                                    ref={this.uwanja}\n                                  ></textarea>\n                                </>\n                              ) : (\n                                <></>\n                              )}\n                            </Grid>\n                          </>\n                        </div>\n                      </div>\n                      <div className={styles.down}>\n                        <div className={styles.err} ref={this.err}>\n                          <Message error>\n                            <Message.Header>\n                              Error, You needed to login\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click login button above and login to enable add to\n                            cart feature.\n                          </Message>\n                        </div>\n\n                        <div className={styles.err1} ref={this.err1}>\n                          <Message success>\n                            <Message.Header>\n                              Success, Item has been added to cart\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click the cart icon above to preview your cart.\n                          </Message>\n                        </div>\n\n                        <Button\n                          animated\n                          primary\n                          size=\"medium\"\n                          fluid\n                          onClick={this.addToCart}\n                        >\n                          <Button.Content visible>Add to Cart</Button.Content>\n                          <Button.Content hidden>\n                            <Icon name=\"shop\" />\n                          </Button.Content>\n                        </Button>\n                      </div>\n                    </div>\n                  </Grid.Column>\n                </Grid>\n\n                <div className={styles.footerSec} style={{ marginTop: \"5%\" }}>\n                  <hr className={styles.footerHr} />\n                  <Header\n                    textAlign=\"center\"\n                    content=\"Powered by Online Tec\"\n                    color=\"grey\"\n                  />\n                </div>\n              </Segment>\n            </MediaQuery>\n\n            <MediaQuery minWidth={1001}>\n              <Segment>\n                <Grid>\n                  {/* By default first image is the one placed first at canvas/preview section */}\n\n                  <Grid.Column width={9}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"400px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n\n                    <div className={styles.smallImage}>\n                      {this.state.selectedObjImages.map((url) => (\n                        <img\n                          className={styles.smaI}\n                          key={url}\n                          src={`${BACKEND_ORIGIN}${url}`}\n                          width={60}\n                          height={50}\n                          onClick={this.selectedOn}\n                        />\n                      ))}\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width={7}>\n                    <div className={styles.dodo}>\n                      <Header as=\"h3\">\n                        {this.state.selectedObj.title}\n                        <Header.Subheader color=\"orange\">\n                          {this.state.selectedObj.description}\n                        </Header.Subheader>\n                      </Header>\n\n                      <hr />\n                      <span>\n                        <Grid>\n                          <Grid.Column width={9}>\n                            Price:{\" \"}\n                            <Header\n                              as=\"h3\"\n                              color=\"grey\"\n                              content={`${new Intl.NumberFormat(\"en-US\", {\n                                style: \"currency\",\n                                currency: \"Tsh\",\n                                minimumFractionDigits: 0,\n                              }).format(\n                                parseInt(this.state.selectedObjPrice)\n                              )}/=`}\n                            />\n                          </Grid.Column>\n                          <Grid.Column width={7}>\n                            <span className={styles.sp}>\n                              Quantity:{\" \"}\n                              <span className={styles.idadi}>\n                                {this.state.productQuantity}\n                              </span>\n                            </span>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"72%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </Grid.Column>\n                        </Grid>\n                      </span>\n                    </div>\n                    <div>\n                      <div className={styles.customizations}>\n                        {this.state.selectedObj.hasPropertySelection ===\n                          false &&\n                        this.state.selectedObj.isCustomized === false &&\n                        this.state.selectedObj.hasSecondPropertySelection ===\n                          false ? (\n                          <> </>\n                        ) : (\n                          <div className={styles.top}>\n                            <h2\n                              className={styles.h}\n                              style={{ fontWeight: \"bold\", fontSize: \"130%\" }}\n                            >\n                              User Customizations\n                            </h2>\n\n                            <hr className={styles.hr1} />\n                          </div>\n                        )}\n\n                        <div className={styles.sec}>\n                          <>\n                            <Grid>\n                              {this.state.selectedObj.hasPropertySelection ? (\n                                <Grid.Column width={9}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_property[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.attributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.property_values.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state.attributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    attributeValue: prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {/* lets check for secondPropertySelection 900 - 1200 */}\n                              {this.state.selectedObj\n                                .hasSecondPropertySelection ? (\n                                <Grid.Column width={7}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_secondProps[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.secondPropsAttributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.second_propsValue.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state\n                                                    .secondPropsAttributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    secondPropsAttributeValue:\n                                                      prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {this.state.selectedObj.isCustomized ? (\n                                <>\n                                  <span\n                                    className={styles.bichwa}\n                                    style={{ fontSize: \"15px\" }}\n                                  >\n                                    Customize product's image/text.\n                                  </span>\n                                  <p className={styles.sub}>\n                                    *** Leave blank to use default one.\n                                    <br />\n                                    *** In case of image write a web link to\n                                    that image\n                                  </p>\n                                  <textarea\n                                    row={2}\n                                    cols={32}\n                                    className={this.tarea}\n                                    onChange={(event) =>\n                                      this.setState({\n                                        customValue: event.target.value,\n                                      })\n                                    }\n                                    style={{\n                                      marginBottom: \"3%\",\n                                      marginLeft: \"3%\",\n                                    }}\n                                    ref={this.uwanja}\n                                  ></textarea>\n                                </>\n                              ) : (\n                                <></>\n                              )}\n                            </Grid>\n                          </>\n                        </div>\n                      </div>\n                      <div className={styles.down}>\n                        <div className={styles.err} ref={this.err}>\n                          <Message error>\n                            <Message.Header>\n                              Error, You needed to login\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click login button above and login to enable add to\n                            cart feature.\n                          </Message>\n                        </div>\n\n                        <div className={styles.err1} ref={this.err1}>\n                          <Message success>\n                            <Message.Header>\n                              Success, Item has been added to cart\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click the cart icon above to preview your cart.\n                          </Message>\n                        </div>\n\n                        <Button\n                          animated\n                          primary\n                          size=\"medium\"\n                          fluid\n                          onClick={this.addToCart}\n                        >\n                          <Button.Content visible>Add to Cart</Button.Content>\n                          <Button.Content hidden>\n                            <Icon name=\"shop\" />\n                          </Button.Content>\n                        </Button>\n                      </div>\n                    </div>\n                  </Grid.Column>\n                </Grid>\n\n                <div className={styles.footerSec} style={{ marginTop: \"2%\" }}>\n                  <hr className={styles.footerHr} />\n                  <Header\n                    textAlign=\"center\"\n                    content=\"Powered by Online Tec\"\n                    color=\"grey\"\n                  />\n                </div>\n              </Segment>\n            </MediaQuery>\n          </div>\n        </MediaQuery>\n\n        <MediaQuery minWidth={1200}>\n          <div className={styles.showRoom} ref={this.showRoom}>\n            <div\n              className={styles.closeBtn}\n              onClick={this.onRemove}\n              ref={this.closeBtn}\n            >\n              &times;\n            </div>\n\n            <Segment>\n              <Grid>\n                {/* By default first image is the one placed first at canvas/preview section */}\n\n                <Grid.Column width={9}>\n                  <MediaQuery minWidth={1200} maxWidth={1340}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"380px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={1341} maxWidth={1500}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"400px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={1501}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"500px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <div className={styles.smallImage}>\n                    {this.state.selectedObjImages.map((url) => (\n                      <img\n                        className={styles.smaI}\n                        key={url}\n                        src={`${BACKEND_ORIGIN}${url}`}\n                        width={60}\n                        height={50}\n                        onClick={this.selectedOn}\n                      />\n                    ))}\n                  </div>\n                </Grid.Column>\n                <Grid.Column width={7}>\n                  <div className={styles.dodo}>\n                    <Header as=\"h3\">\n                      {this.state.selectedObj.title}\n                      <Header.Subheader color=\"orange\">\n                        {this.state.selectedObj.description}\n                      </Header.Subheader>\n                    </Header>\n\n                    <hr />\n                    <span>\n                      <Grid>\n                        <Grid.Column width={9}>\n                          Price:{\" \"}\n                          <Header\n                            as=\"h3\"\n                            color=\"grey\"\n                            content={`${new Intl.NumberFormat(\"en-US\", {\n                              style: \"currency\",\n                              currency: \"Tsh\",\n                              minimumFractionDigits: 0,\n                            }).format(\n                              parseInt(this.state.selectedObjPrice)\n                            )}/=`}\n                          />\n                        </Grid.Column>\n                        <Grid.Column width={7}>\n                          <span className={styles.sp}>\n                            Quantity:{\" \"}\n                            <span className={styles.idadi}>\n                              {this.state.productQuantity}\n                            </span>\n                          </span>\n                          <MediaQuery minWidth={1200} maxWidth={1340}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"58%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={1341} maxWidth={1500}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"52%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={1501}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"46%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n                        </Grid.Column>\n                      </Grid>\n                    </span>\n                  </div>\n                  <div>\n                    <div className={styles.customizations}>\n                      {this.state.selectedObj.hasPropertySelection === false &&\n                      this.state.selectedObj.isCustomized === false &&\n                      this.state.selectedObj.hasSecondPropertySelection ===\n                        false ? (\n                        <> </>\n                      ) : (\n                        <div className={styles.top}>\n                          <h2\n                            className={styles.h}\n                            style={{ fontWeight: \"bold\", fontSize: \"130%\" }}\n                          >\n                            User Customizations\n                          </h2>\n\n                          <hr className={styles.hr1} />\n                        </div>\n                      )}\n\n                      <div className={styles.sec}>\n                        <>\n                          <Grid>\n                            {this.state.selectedObj.hasPropertySelection ? (\n                              <Grid.Column width={9}>\n                                <>\n                                  <span>\n                                    <span\n                                      className={styles.pName}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {\n                                        Object.keys(\n                                          this.state.selectedObj.map_property[0]\n                                        )[0]\n                                      }\n                                      :\n                                    </span>\n                                    <span\n                                      className={styles.pValue}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {this.state.attributeValue}\n                                    </span>\n                                  </span>\n                                  <Form>\n                                    {this.state.selectedObj.property_values.map(\n                                      (prop) => (\n                                        <div\n                                          key={prop}\n                                          className={styles.pullUp}\n                                        >\n                                          <Form.Field>\n                                            <Radio\n                                              label={prop}\n                                              name=\"radioGroup\"\n                                              value={prop}\n                                              checked={\n                                                this.state.attributeValue ===\n                                                prop\n                                              }\n                                              onChange={() =>\n                                                this.setState({\n                                                  attributeValue: prop,\n                                                })\n                                              }\n                                            />\n                                          </Form.Field>\n                                        </div>\n                                      )\n                                    )}\n                                  </Form>\n                                </>\n                              </Grid.Column>\n                            ) : (\n                              <></>\n                            )}\n\n                            {/* lets check for secondPropertySelection 900 - 1200 */}\n                            {this.state.selectedObj\n                              .hasSecondPropertySelection ? (\n                              <Grid.Column width={7}>\n                                <>\n                                  <span>\n                                    <span\n                                      className={styles.pName}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {\n                                        Object.keys(\n                                          this.state.selectedObj\n                                            .map_secondProps[0]\n                                        )[0]\n                                      }\n                                      :\n                                    </span>\n                                    <span\n                                      className={styles.pValue}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {this.state.secondPropsAttributeValue}\n                                    </span>\n                                  </span>\n                                  <Form>\n                                    {this.state.selectedObj.second_propsValue.map(\n                                      (prop) => (\n                                        <div\n                                          key={prop}\n                                          className={styles.pullUp}\n                                        >\n                                          <Form.Field>\n                                            <Radio\n                                              label={prop}\n                                              name=\"radioGroup\"\n                                              value={prop}\n                                              checked={\n                                                this.state\n                                                  .secondPropsAttributeValue ===\n                                                prop\n                                              }\n                                              onChange={() =>\n                                                this.setState({\n                                                  secondPropsAttributeValue:\n                                                    prop,\n                                                })\n                                              }\n                                            />\n                                          </Form.Field>\n                                        </div>\n                                      )\n                                    )}\n                                  </Form>\n                                </>\n                              </Grid.Column>\n                            ) : (\n                              <></>\n                            )}\n\n                            {this.state.selectedObj.isCustomized ? (\n                              <>\n                                <span\n                                  className={styles.bichwa}\n                                  style={{ fontSize: \"15px\" }}\n                                >\n                                  Customize product's image/text.\n                                </span>\n                                <p className={styles.sub}>\n                                  *** Leave blank to use default one.\n                                  <br />\n                                  *** In case of image write a web link to that\n                                  image\n                                </p>\n                                <textarea\n                                  row={2}\n                                  cols={32}\n                                  className={this.tarea}\n                                  onChange={(event) =>\n                                    this.setState({\n                                      customValue: event.target.value,\n                                    })\n                                  }\n                                  style={{\n                                    marginBottom: \"3%\",\n                                    marginLeft: \"3%\",\n                                  }}\n                                  ref={this.uwanja}\n                                ></textarea>\n                              </>\n                            ) : (\n                              <></>\n                            )}\n                          </Grid>\n                        </>\n                      </div>\n                    </div>\n                    <div className={styles.down}>\n                      <div className={styles.err} ref={this.err}>\n                        <Message error>\n                          <Message.Header>\n                            Error, You needed to login\n                          </Message.Header>\n                          <Icon name=\"warning sign\" />\n                          Click login button above and login to enable add to\n                          cart feature.\n                        </Message>\n                      </div>\n\n                      <div className={styles.err1} ref={this.err1}>\n                        <Message success>\n                          <Message.Header>\n                            Success, Item has been added to cart\n                          </Message.Header>\n                          <Icon name=\"warning sign\" />\n                          Click the cart icon above to preview your cart.\n                        </Message>\n                      </div>\n\n                      <Button\n                        animated\n                        primary\n                        size=\"medium\"\n                        fluid\n                        onClick={this.addToCart}\n                      >\n                        <Button.Content visible>Add to Cart</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"shop\" />\n                        </Button.Content>\n                      </Button>\n                    </div>\n                  </div>\n                </Grid.Column>\n              </Grid>\n\n              <div className={styles.footerSec} style={{ marginTop: \"2%\" }}>\n                <hr className={styles.footerHr} />\n                <Header\n                  textAlign=\"center\"\n                  content=\"Powered by Online Tec\"\n                  color=\"grey\"\n                />\n              </div>\n            </Segment>\n          </div>\n        </MediaQuery>\n\n        <div className={styles.model} ref={this.modal}>\n          <div\n            className={styles.closeBtnx}\n            onClick={this.onRemovex}\n            ref={this.closeBtnx}\n          >\n            &times;\n          </div>\n\n          <Sign closeLoginPanel={this.onRemovex} />\n        </div>\n\n        <style jsx global>{`\n          body {\n            background: rgb(236, 236, 236);\n          }\n        `}</style>\n      </NavBar>\n    );\n  }\n}\n\nexport default Output;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/preview.js",["252","253","254","255","256","257","258","259","260","261","262","263"],[],"import React, { Component } from \"react\";\nimport NavBar from \"../components/NavBar3\";\nimport Sign from \"../components/Sign\";\nimport jwt_decode from \"jwt-decode\";\nimport { Icon, Button, Message, Grid } from \"semantic-ui-react\";\nimport styles from \"../static/css/preview.module.css\";\nimport Router from \"next/router\";\nimport BACKEND_ORIGIN from \"../utils/domain\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport \"swiper/css\";\nimport { Navigation, EffectFade } from \"swiper\";\nimport \"swiper/css/navigation\";\nimport \"swiper/css/effect-fade\";\nimport \"swiper/css/pagination\";\nimport { Pagination } from \"swiper\";\n\nimport dynamic from \"next/dynamic\";\n\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n// THIS IS ONLY FOR PHONES 200px to 576px devices but not for tablet\n// and pc or other large devices\n\nclass Preview extends Component {\n  state = {\n    isAunthenticated: false,\n    selectedProp: \"\",\n    customValue: \"\",\n    index: 1,\n    productQuantity: 1,\n    selectedObjPrice: 0, //Hii kazi yake ni ku-tract total amount of the product placed to the cart.So its changed when user add or reduce quantity/amount of the product..\n    productPrice: 0, // I use this only to know the original price of single product.. So this is static\n    secondPropsAttributeValue: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.initialProp = React.createRef();\n    this.imageConte = React.createRef();\n    this.err1 = React.createRef();\n    this.uwanja = React.createRef();\n  }\n\n  static async getInitialProps(props) {\n    const { product } = props.query;\n\n    const response = await fetch(`${BACKEND_ORIGIN}/api/product/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        product,\n      }),\n    });\n\n    const data = await response.json();\n\n    return { data, product };\n  }\n\n  addToCart = async (e) => {\n    e.preventDefault();\n\n    console.log(\"Im adding something to cart..\");\n    // first detect if the user has login or not\n    // if not redirect them to /login...\n    await this.executingTokenLogics(); // Hii ishu ya ku-setState inatu-chelewesha\n    // coz ina some delay.. Ko nifanyeje hapa hata user akiwa amelogin anakuwa\n    // anaambiwa ni anonymous...\n\n    if (!this.state.isAunthenticated) {\n      console.log(\"You're anonymous user.\");\n      Router.push({\n        pathname: \"/login\",\n        query: { flag: \"/preview\", productId: this.props.product },\n      });\n      return;\n    }\n\n    console.log(\"You've been authenticated.\");\n\n    // I don't know but I think access_token will be decoded...\n    const tokens = localStorage.getItem(\"authTokens\");\n    const json = JSON.parse(tokens);\n    let access = json.access;\n    let decodedAccessData = \"\";\n    try {\n      decodedAccessData = jwt_decode(access);\n    } catch (err) {\n      if (this.uwanja.current) {\n        this.uwanja.current.value = \"\";\n        this.setState({\n          customValue: \"\",\n        });\n      }\n    }\n\n    const user_id = decodedAccessData.user_id;\n\n    const id = this.props.product;\n    const price = this.state.selectedObjPrice;\n    const quantity = this.state.productQuantity;\n    const value = this.state.selectedProp;\n    const secondPropsAttributeValue = this.state.secondPropsAttributeValue;\n    const customization = this.state.customValue;\n\n    console.log(\"This is data i need to post..\");\n    console.log(id, price, quantity, value, customization);\n\n    let check = await fetch(`${BACKEND_ORIGIN}/api/cartExistOrNot/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user_id,\n        productId: id,\n        price,\n        quantity,\n        customization,\n        value,\n        secondValue: secondPropsAttributeValue,\n      }),\n    });\n\n    let output = await check.json();\n\n    if (output.status == false) {\n      // then either huyu mtu hana cart au kuna error imekuwa imetokea hata kama mtu ana cart..\n      // then hii itarukia on creating a new cart...\n      // this request create a new cart..\n      try {\n        let response = await fetch(`${BACKEND_ORIGIN}/api/carts/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: user_id,\n            productId: id,\n            price,\n            quantity,\n            customization,\n            value,\n            secondValue: secondPropsAttributeValue,\n          }),\n        });\n\n        let data = await response.json();\n        console.log(\"Hey this is the response from the server\");\n        console.log(data);\n        if (this.uwanja.current) {\n          this.uwanja.current.value = \"\";\n          this.setState({\n            customValue: \"\",\n          });\n        }\n\n        console.log(\"This is success for you...\");\n        this.err1.current.style.display = \"block\";\n        this.successInterval = setTimeout(() => {\n          this.err1.current.style.display = \"none\";\n        }, 5000);\n\n        // Redirect user to the cart component....\n        // Router.push({ pathname: \"/cart\" });\n      } catch (err) {\n        if (this.uwanja.current) {\n          this.uwanja.current.value = \"\";\n          this.setState({\n            customValue: \"\",\n          });\n        }\n      }\n    } else {\n      // Lakni ni sahihi kama status huko juu sio False then hii item ishakuwa\n      // added to the cart so we also need to return the success message this is\n      // logic behind having success in else statement...\n      console.log(\"No need to create a new cart you have one for you....\");\n\n      let cartByThatUser = output.cart;\n      console.log(\"Hey this is cart by our user....\");\n      console.log(cartByThatUser);\n\n      console.log(\"Even ma mama thinks that my mind has gone\");\n      this.err1.current.style.display = \"block\";\n      this.successInterval = setTimeout(() => {\n        this.err1.current.style.display = \"none\";\n      }, 5000);\n\n      if (this.uwanja.current) {\n        this.uwanja.current.value = \"\";\n        this.setState({\n          customValue: \"\",\n        });\n      }\n\n      // Redirect user to the cart component....\n      // Router.push({ pathname: \"/cart\" });\n    }\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this.successInterval);\n  }\n\n  executingTokenLogics = () => {\n    try {\n      const tokens = localStorage.getItem(\"authTokens\")\n        ? JSON.parse(localStorage.getItem(\"authTokens\"))\n        : null;\n      if (!tokens) {\n        console.log(\"You needed to login, no records\");\n        this.setState({ isAunthenticated: false });\n        return;\n      }\n      const decodedRefreshToken = jwt_decode(tokens.refresh);\n      const expireRefreshTime = decodedRefreshToken.exp;\n      console.log(\"Hey this is the expire date of the refreshToken\");\n      console.log(expireRefreshTime);\n      console.log(\"Lets try to access the json access token\");\n      console.log(tokens.access);\n      const decodedAccessData = jwt_decode(tokens.access);\n      console.log(\"This is expiring time for you...\");\n      console.log(decodedAccessData);\n      const expireAccessTime = decodedAccessData.exp;\n      console.log(expireAccessTime);\n      const diff = expireAccessTime * 1000 - Date.now();\n      if (diff < 1) {\n        console.log(\"Hey we need to either update or make user login again\");\n        if (expireRefreshTime * 1000 - Date.now < 1) {\n          console.log(\n            \"Even ur refresh token has already been expired we need you to login again....\"\n          );\n          this.setState({\n            isAunthenticated: false,\n          });\n          return;\n        }\n        console.log(\n          \"Our refresh token is alive you should use it to update your access token\"\n        );\n\n        this.updateToken(tokens.refresh);\n\n        this.setState({\n          isAunthenticated: true,\n        });\n      } else {\n        this.setState({\n          isAunthenticated: true,\n        });\n      }\n    } catch (InvalidTokenError) {\n      // so this will only capture the InvalidTokenError which is caused by using already expired-token because and I said automatically when\n      // we made request to the jwd to decode it will return error that our token is already expired and by default as we coded it will update\n      // our localstorage to look like >>> authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n\n      console.log(InvalidTokenError.message);\n      console.log(\n        \"Invalid token specified since, when the token is expired the jwt automatically change your storage and it ill look like this\"\n      );\n      // authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n      this.setState({\n        isAunthenticated: false,\n      });\n    }\n  };\n\n  updateToken = async (refreshToken) => {\n    let response = await fetch(`${BACKEND_ORIGIN}/api/token/refresh/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ refresh: refreshToken }),\n    });\n\n    let data = await response.json();\n    localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  };\n\n  // this function will get called everytime we click the next or prev\n  // button... Dont forget this....\n  detectIndexOfImageOnPreview = () => {\n    // image in focus\n    const path = this.imageConte.current.src;\n    const imageInFocus = path.substr(21);\n    const allImages = this.props.data.get_urls;\n\n    const imageIndex = allImages.indexOf(imageInFocus);\n    console.log(\"This is imageIndex for you \", imageIndex);\n    this.setState({\n      index: imageIndex + 1,\n    });\n  };\n\n  next = () => {\n    // first get all images found...\n    console.log(this.props.data.get_urls);\n    // first get the image in preview then you should detect if\n    // its the last one or not.. If its the last one when the\n    // user click next you should change src to first index or\n    // image.. But what if its not the last one if its not the\n    // last one then its easier change it to next image of it..\n    const imageInAction = this.props.data.get_urls.indexOf(\n      this.imageConte.current.src.substr(21)\n    );\n    console.log(\"This is the index of image in action...\", imageInAction);\n\n    if (imageInAction + 1 === this.props.data.get_urls.length) {\n      console.log(\"Your the last image...\");\n      this.imageConte.current.src = `${BACKEND_ORIGIN}${this.props.data.get_urls[0]}`;\n    } else {\n      console.log(\"Your not the last image...\");\n      this.imageConte.current.src = `${BACKEND_ORIGIN}${\n        this.props.data.get_urls[imageInAction + 1]\n      }`;\n    }\n\n    this.detectIndexOfImageOnPreview();\n  };\n\n  prev = () => {\n    console.log(this.props.data.get_urls);\n    // first get all images found...\n    console.log(this.props.data.get_urls);\n\n    const imageInAction = this.props.data.get_urls.indexOf(\n      this.imageConte.current.src.substr(21)\n    );\n    console.log(\"This is the index of image in action...\", imageInAction);\n\n    if (imageInAction === 0) {\n      console.log(\"Your the first image...\");\n      this.imageConte.current.src = `${BACKEND_ORIGIN}${\n        this.props.data.get_urls[this.props.data.get_urls.length - 1]\n      }`;\n    } else {\n      console.log(\"Your not the first image...\");\n      this.imageConte.current.src = `${BACKEND_ORIGIN}${\n        this.props.data.get_urls[imageInAction - 1]\n      }`;\n    }\n\n    this.detectIndexOfImageOnPreview();\n  };\n\n  onIncrease = () => {\n    this.setState({\n      productQuantity: this.state.productQuantity + 1,\n    });\n\n    this.setState({\n      selectedObjPrice: this.state.selectedObjPrice + this.state.productPrice,\n    });\n  };\n\n  onDecrease = () => {\n    if (this.state.productQuantity > 1) {\n      this.setState({\n        productQuantity: this.state.productQuantity - 1,\n      });\n\n      this.setState({\n        selectedObjPrice: this.state.selectedObjPrice - this.state.productPrice,\n      });\n    }\n  };\n\n  async componentDidMount() {\n    // NIMEGUNDUA LEO KUWA getInitialProps() ndo inayoanza ku-run before\n    // componentDidMount.. So you can now take data from getInitialProps and\n    // assign them to the state by using the componentDidMount()\n    this.executingTokenLogics();\n\n    const { data } = this.props;\n\n    // I think this condition should be checked because eti if it does not\n    // has property selection it will not set the price...\n    if (data.hasPropertySelection) {\n      this.setState({\n        selectedProp: Object.values(data.map_property[0])[0],\n        selectedObjPrice: data.price,\n        productPrice: data.price,\n      });\n    } else {\n      this.setState({\n        selectedObjPrice: data.price,\n        productPrice: data.price,\n      });\n    }\n\n    if (data.hasSecondPropertySelection) {\n      this.setState({\n        secondPropsAttributeValue: Object.values(data.map_secondProps[0])[0],\n      });\n    }\n  }\n\n  render() {\n    return (\n      <NavBar isAunthenticated={this.state.isAunthenticated}>\n        <div>\n          <MediaQuery minWidth={200} maxWidth={400}>\n            <div className={styles.odb}>\n              {/* <p className={styles.pre}>prev</p> */}\n\n              {/* https://codesandbox.io/s/20hp51?file=/src/App.jsx\n              https://www.youtube.com/watch?v=4aJPgKLwAGY */}\n              {this.props.data.get_urls.length > 1 ? (\n                <Swiper\n                  modules={[Navigation, EffectFade, Pagination]}\n                  navigation\n                  effect={\"fade\"}\n                  speed={300}\n                  slidesPerView={1}\n                  loop\n                  className={styles.myswiper}\n                  pagination={{ clickable: true }}\n                >\n                  {this.props.data.get_urls.map((image) => (\n                    <SwiperSlide>\n                      <img\n                        src={`${BACKEND_ORIGIN}${image}`}\n                        className={styles.ima}\n                        // ref={this.imageConte}\n                        height={280}\n                        key={image}\n                      />\n                    </SwiperSlide>\n                  ))}\n                </Swiper>\n              ) : (\n                <img\n                  className={styles.ima}\n                  ref={this.imageConte}\n                  src={`${BACKEND_ORIGIN}${this.props.data.get_urls[0]}`}\n                  height={280}\n                />\n              )}\n\n              {/* <p className={styles.imgNo}>\n                <img src=\"../static/images/image.png\" width={20} height={20} />\n                {`${this.state.index}/${this.props.data.get_urls.length}`}\n              </p> */}\n              <div className={styles.tit}>\n                <p className={styles.main}>{this.props.data.title}</p>\n                <span className={styles.sub}>\n                  {this.props.data.description}\n                </span>\n                <hr />\n              </div>\n\n              <div className={styles.priQuan}>\n                <Grid>\n                  <Grid.Column width={8}>\n                    <p className={styles.price}>Price:</p>\n                    <MediaQuery minWidth={200} maxWidth={349}>\n                      <span\n                        className={styles.beiNdogo}\n                      >{`${new Intl.NumberFormat(\"en-US\", {\n                        style: \"currency\",\n                        currency: \"Tsh\",\n                        minimumFractionDigits: 0,\n                      }).format(parseInt(this.state.selectedObjPrice))}`}</span>\n                    </MediaQuery>\n                    <MediaQuery minWidth={350}>\n                      <span className={styles.bei}>{`${new Intl.NumberFormat(\n                        \"en-US\",\n                        {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }\n                      ).format(parseInt(this.state.selectedObjPrice))}`}</span>\n                    </MediaQuery>\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <p className={styles.qua}>\n                      Quantity:{\" \"}\n                      <span className={styles.namba}>\n                        {this.state.productQuantity}\n                      </span>\n                    </p>\n                    <div className={styles.amountWrapper}>\n                      <span className={styles.plus} onClick={this.onDecrease}>\n                        <Icon size=\"small\" name=\"minus\" />\n                      </span>\n                      <span className={styles.actualAmount}>\n                        {this.state.productQuantity}\n                      </span>\n                      <span className={styles.minus} onClick={this.onIncrease}>\n                        <Icon size=\"small\" name=\"plus\" />\n                      </span>\n                    </div>\n                  </Grid.Column>\n                </Grid>\n                <hr />\n              </div>\n\n              <div className={styles.customizations}>\n                {this.props.data.hasPropertySelection === false &&\n                this.props.data.isCustomized === false &&\n                this.props.data.hasSecondPropertySelection === false ? (\n                  <> </>\n                ) : (\n                  <div className={styles.holder}>\n                    <p className={styles.custom}>User Customizations</p>\n                    <hr className={styles.ch} />\n                    <Grid>\n                      {this.props.data.hasPropertySelection ? (\n                        <Grid.Column width={9}>\n                          <>\n                            <span className={styles.pName}>\n                              {Object.keys(this.props.data.map_property[0])[0]}:\n                            </span>\n                            <span\n                              className={styles.pValue}\n                              name={\n                                Object.values(\n                                  this.props.data.map_property[0]\n                                )[0]\n                              }\n                              style={{ fontSize: \"12px\" }}\n                              ref={this.initialProp}\n                            >\n                              {/* {Object.values(this.props.data.map_property[0])[0]} */}\n                              {this.state.selectedProp.length > 10\n                                ? this.state.selectedProp.substr(0, 9) + \"..\"\n                                : this.state.selectedProp}\n                            </span>\n                            <div className={styles.radioContainer}>\n                              {this.props.data.property_values.map((prop) => (\n                                <div key={prop}>\n                                  <input\n                                    className={styles.rad}\n                                    type=\"radio\"\n                                    id={prop}\n                                    name=\"property\"\n                                    checked={this.state.selectedProp === prop}\n                                    onChange={() =>\n                                      this.setState({ selectedProp: prop })\n                                    }\n                                  />\n                                  <label\n                                    className={styles.label}\n                                    htmlFor={prop}\n                                  >\n                                    {prop}\n                                  </label>\n                                </div>\n                              ))}\n                            </div>\n                          </>\n                        </Grid.Column>\n                      ) : (\n                        <></>\n                      )}\n\n                      {this.props.data.hasSecondPropertySelection ? (\n                        <Grid.Column width={7}>\n                          <>\n                            <span>\n                              <span\n                                className={styles.pName}\n                                style={{ fontSize: \"15px\" }}\n                              >\n                                {\n                                  Object.keys(\n                                    this.props.data.map_secondProps[0]\n                                  )[0]\n                                }\n                                :\n                              </span>\n                              <span\n                                className={styles.pValue}\n                                style={{ fontSize: \"12px\" }}\n                              >\n                                {this.state.secondPropsAttributeValue.length > 7\n                                  ? this.state.secondPropsAttributeValue.substr(\n                                      0,\n                                      6\n                                    ) + \"..\"\n                                  : this.state.secondPropsAttributeValue}\n                              </span>\n                            </span>\n\n                            {this.props.data.second_propsValue.map((propa) => (\n                              <div key={propa}>\n                                <input\n                                  className={styles.rad}\n                                  type=\"radio\"\n                                  id={propa}\n                                  name=\"propa\"\n                                  checked={\n                                    this.state.secondPropsAttributeValue ===\n                                    propa\n                                  }\n                                  onChange={() =>\n                                    this.setState({\n                                      secondPropsAttributeValue: propa,\n                                    })\n                                  }\n                                />\n                                <label className={styles.label} htmlFor={propa}>\n                                  {propa}\n                                </label>\n                              </div>\n                            ))}\n                          </>\n                        </Grid.Column>\n                      ) : (\n                        <></>\n                      )}\n                    </Grid>\n\n                    {this.props.data.isCustomized ? (\n                      <>\n                        <div className={styles.text}>\n                          <p className={styles.head}>\n                            Customize product's image/text.\n                          </p>\n                          <p className={styles.ason}>\n                            *** Leave blank to use default one.\n                            <br />\n                            *** In case of image write a web link to that image\n                          </p>\n\n                          <MediaQuery minWidth={200} maxWidth={340}>\n                            <textarea\n                              row={2}\n                              cols={28}\n                              className={this.tarea}\n                              onChange={(e) =>\n                                this.setState({ customValue: e.target.value })\n                              }\n                              ref={this.uwanja}\n                            ></textarea>\n                          </MediaQuery>\n                          <MediaQuery minWidth={341} maxWidth={360}>\n                            <textarea\n                              row={2}\n                              cols={30}\n                              className={this.tarea}\n                              onChange={(e) =>\n                                this.setState({ customValue: e.target.value })\n                              }\n                              ref={this.uwanja}\n                            ></textarea>\n                          </MediaQuery>\n                          <MediaQuery minWidth={361} maxWidth={380}>\n                            <textarea\n                              row={2}\n                              cols={32}\n                              className={this.tarea}\n                              onChange={(e) =>\n                                this.setState({ customValue: e.target.value })\n                              }\n                              ref={this.uwanja}\n                            ></textarea>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={381}>\n                            <textarea\n                              row={2}\n                              cols={34}\n                              className={this.tarea}\n                              onChange={(e) =>\n                                this.setState({ customValue: e.target.value })\n                              }\n                              ref={this.uwanja}\n                            ></textarea>\n                          </MediaQuery>\n                        </div>\n                      </>\n                    ) : (\n                      <></>\n                    )}\n                  </div>\n                )}\n                {/* Hii button inabidi iwe nje ya checking ya hasPropSelection & isCustomized.. */}\n                <div className={styles.err1} ref={this.err1}>\n                  <Message success size=\"mini\">\n                    <Message.Header>\n                      Success, Item has been added to cart\n                    </Message.Header>\n                    <Icon name=\"warning sign\" />\n                    Click the cart icon above to preview your cart.\n                  </Message>\n                </div>\n                <div style={{ marginBottom: \"2%\" }}>\n                  <Button\n                    animated\n                    primary\n                    size=\"medium\"\n                    fluid\n                    onClick={this.addToCart}\n                  >\n                    <Button.Content visible>Add to Cart</Button.Content>\n                    <Button.Content hidden>\n                      <Icon name=\"shop\" />\n                    </Button.Content>\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </MediaQuery>\n\n          <MediaQuery minWidth={401} maxWidth={576}>\n            <div className={styles.odb}>\n              {this.props.data.get_urls.length > 1 ? (\n                <Swiper\n                  modules={[Navigation, EffectFade, Pagination]}\n                  navigation\n                  effect={\"fade\"}\n                  speed={300}\n                  slidesPerView={1}\n                  loop\n                  className={styles.myswiper}\n                  pagination={{ clickable: true }}\n                  //onSlideChangeTransitionEnd={this.slideChange}\n                >\n                  {this.props.data.get_urls.map((image) => (\n                    <SwiperSlide>\n                      <img\n                        src={`${BACKEND_ORIGIN}${image}`}\n                        className={styles.ima}\n                        // ref={this.imageConte}\n                        height={350}\n                        key={image}\n                      />\n                    </SwiperSlide>\n                  ))}\n                </Swiper>\n              ) : (\n                <img\n                  className={styles.ima}\n                  ref={this.imageConte}\n                  src={`${BACKEND_ORIGIN}${this.props.data.get_urls[0]}`}\n                  height={350}\n                />\n              )}\n\n              <div className={styles.tit}>\n                <p className={styles.main}>{this.props.data.title}</p>\n                <span className={styles.sub}>\n                  {this.props.data.description}\n                </span>\n                <hr />\n              </div>\n\n              <div className={styles.priQuan}>\n                <Grid>\n                  <Grid.Column width={8}>\n                    <p className={styles.price}>Price:</p>\n\n                    <span className={styles.bei}>{`${new Intl.NumberFormat(\n                      \"en-US\",\n                      {\n                        style: \"currency\",\n                        currency: \"Tsh\",\n                        minimumFractionDigits: 0,\n                      }\n                    ).format(parseInt(this.state.selectedObjPrice))}`}</span>\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <p className={styles.qua}>\n                      Quantity:{\" \"}\n                      <span className={styles.namba}>\n                        {this.state.productQuantity}\n                      </span>\n                    </p>\n                    <div className={styles.amountWrapper}>\n                      <span className={styles.plus} onClick={this.onDecrease}>\n                        <Icon size=\"small\" name=\"minus\" />\n                      </span>\n                      <span className={styles.actualAmount}>\n                        {this.state.productQuantity}\n                      </span>\n                      <span className={styles.minus} onClick={this.onIncrease}>\n                        <Icon size=\"small\" name=\"plus\" />\n                      </span>\n                    </div>\n                  </Grid.Column>\n                </Grid>\n                <hr />\n              </div>\n\n              <div className={styles.customizations}>\n                {this.props.data.hasPropertySelection === false &&\n                this.props.data.isCustomized === false &&\n                this.props.data.hasSecondPropertySelection === false ? (\n                  <> </>\n                ) : (\n                  <div className={styles.holder}>\n                    <p className={styles.custom}>User Customizations</p>\n                    <hr className={styles.ch} />\n\n                    <Grid>\n                      {this.props.data.hasPropertySelection ? (\n                        <Grid.Column width={9}>\n                          <>\n                            <span className={styles.pName}>\n                              {Object.keys(this.props.data.map_property[0])[0]}:\n                            </span>\n                            <span\n                              className={styles.pValue}\n                              style={{ fontSize: \"13px\" }}\n                            >\n                              {this.state.selectedProp.length > 12\n                                ? this.state.selectedProp.substr(0, 11) + \"..\"\n                                : this.state.selectedProp}\n                            </span>\n                            <div className={styles.radioContainer}>\n                              {this.props.data.property_values.map((prop) => (\n                                <div key={prop}>\n                                  <input\n                                    className={styles.rad}\n                                    type=\"radio\"\n                                    id={prop}\n                                    name=\"property\"\n                                    checked={this.state.selectedProp == prop}\n                                    onChange={() =>\n                                      this.setState({ selectedProp: prop })\n                                    }\n                                  />\n                                  <label\n                                    className={styles.label}\n                                    htmlFor={prop}\n                                  >\n                                    {prop}\n                                  </label>\n                                </div>\n                              ))}\n                            </div>\n                          </>\n                        </Grid.Column>\n                      ) : (\n                        <></>\n                      )}\n\n                      {this.props.data.hasSecondPropertySelection ? (\n                        <Grid.Column width={7}>\n                          <>\n                            <span>\n                              <span\n                                className={styles.pName}\n                                style={{ fontSize: \"15px\" }}\n                              >\n                                {\n                                  Object.keys(\n                                    this.props.data.map_secondProps[0]\n                                  )[0]\n                                }\n                                :\n                              </span>\n                              <span\n                                className={styles.pValue}\n                                style={{ fontSize: \"13px\" }}\n                              >\n                                {this.state.secondPropsAttributeValue.length > 7\n                                  ? this.state.secondPropsAttributeValue.substr(\n                                      0,\n                                      6\n                                    ) + \"..\"\n                                  : this.state.secondPropsAttributeValue}\n                              </span>\n                            </span>\n\n                            {this.props.data.second_propsValue.map((propa) => (\n                              <div key={propa}>\n                                <input\n                                  className={styles.rad}\n                                  type=\"radio\"\n                                  id={propa}\n                                  name=\"propa\"\n                                  checked={\n                                    this.state.secondPropsAttributeValue ===\n                                    propa\n                                  }\n                                  onChange={() =>\n                                    this.setState({\n                                      secondPropsAttributeValue: propa,\n                                    })\n                                  }\n                                />\n                                <label className={styles.label} htmlFor={propa}>\n                                  {propa}\n                                </label>\n                              </div>\n                              // MIMI NI PASKO\n                            ))}\n                          </>\n                        </Grid.Column>\n                      ) : (\n                        <></>\n                      )}\n                    </Grid>\n\n                    {this.props.data.isCustomized ? (\n                      <>\n                        <div className={styles.text}>\n                          <p className={styles.head}>\n                            Customize product's image/text.\n                          </p>\n                          <p className={styles.ason}>\n                            *** Leave blank to use default one.\n                            <br />\n                            *** In case of image write a web link to that image\n                          </p>\n                          <MediaQuery minWidth={401} maxWidth={450}>\n                            <textarea\n                              row={2}\n                              cols={36}\n                              className={this.tarea}\n                              onChange={(e) =>\n                                this.setState({ customValue: e.target.value })\n                              }\n                              ref={this.uwanja}\n                            ></textarea>\n                          </MediaQuery>\n                          <MediaQuery minWidth={451} maxWidth={500}>\n                            <textarea\n                              row={2}\n                              cols={40}\n                              className={this.tarea}\n                              onChange={(e) =>\n                                this.setState({ customValue: e.target.value })\n                              }\n                              ref={this.uwanja}\n                            ></textarea>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={501} maxWidth={576}>\n                            <textarea\n                              row={2}\n                              cols={45}\n                              className={this.tarea}\n                              onChange={(e) =>\n                                this.setState({ customValue: e.target.value })\n                              }\n                              ref={this.uwanja}\n                            ></textarea>\n                          </MediaQuery>\n                        </div>\n                      </>\n                    ) : (\n                      <></>\n                    )}\n                  </div>\n                )}\n                <div className={styles.err1} ref={this.err1}>\n                  <Message success size=\"mini\">\n                    <Message.Header>\n                      Success, Item has been added to cart\n                    </Message.Header>\n                    <Icon name=\"warning sign\" />\n                    Click the cart icon above to preview your cart.\n                  </Message>\n                </div>\n                <div style={{ marginBottom: \"2%\" }}>\n                  <Button\n                    animated\n                    primary\n                    size=\"medium\"\n                    fluid\n                    onClick={this.addToCart}\n                  >\n                    <Button.Content visible>Add to Cart</Button.Content>\n                    <Button.Content hidden>\n                      <Icon name=\"shop\" />\n                    </Button.Content>\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </MediaQuery>\n\n          <MediaQuery minWidth={577} maxWidth={899}>\n            <div className={styles.odb}>\n              {this.props.data.get_urls.length > 1 ? (\n                <Swiper\n                  modules={[Navigation, EffectFade, Pagination]}\n                  navigation\n                  effect={\"fade\"}\n                  speed={300}\n                  slidesPerView={1}\n                  loop\n                  className={styles.myswiper}\n                  pagination={{ clickable: true }}\n                  //onSlideChangeTransitionEnd={this.slideChange}\n                >\n                  {this.props.data.get_urls.map((image) => (\n                    <SwiperSlide>\n                      <img\n                        src={`${BACKEND_ORIGIN}${image}`}\n                        className={styles.ima}\n                        // ref={this.imageConte}\n                        height={450}\n                        key={image}\n                      />\n                    </SwiperSlide>\n                  ))}\n                </Swiper>\n              ) : (\n                <img\n                  className={styles.ima}\n                  ref={this.imageConte}\n                  src={`${BACKEND_ORIGIN}${this.props.data.get_urls[0]}`}\n                  height={450}\n                />\n              )}\n\n              <div className={styles.tit}>\n                <p className={styles.main}>{this.props.data.title}</p>\n                <span className={styles.sub}>\n                  {this.props.data.description}\n                </span>\n                <hr />\n              </div>\n\n              <div className={styles.priQuan}>\n                <Grid>\n                  <Grid.Column width={8}>\n                    <p className={styles.price}>Price:</p>\n\n                    <span className={styles.bei}>{`${new Intl.NumberFormat(\n                      \"en-US\",\n                      {\n                        style: \"currency\",\n                        currency: \"Tsh\",\n                        minimumFractionDigits: 0,\n                      }\n                    ).format(parseInt(this.state.selectedObjPrice))}`}</span>\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <p className={styles.qua}>\n                      Quantity:{\" \"}\n                      <span className={styles.namba}>\n                        {this.state.productQuantity}\n                      </span>\n                    </p>\n                    <div className={styles.amountWrapper}>\n                      <span className={styles.plus} onClick={this.onDecrease}>\n                        <Icon size=\"small\" name=\"minus\" />\n                      </span>\n                      <span className={styles.actualAmount}>\n                        {this.state.productQuantity}\n                      </span>\n                      <span className={styles.minus} onClick={this.onIncrease}>\n                        <Icon size=\"small\" name=\"plus\" />\n                      </span>\n                    </div>\n                  </Grid.Column>\n                </Grid>\n                <hr />\n              </div>\n\n              <div className={styles.customizations}>\n                {this.props.data.hasPropertySelection === false &&\n                this.props.data.isCustomized === false &&\n                this.props.data.hasSecondPropertySelection === false ? (\n                  <> </>\n                ) : (\n                  <div className={styles.holder}>\n                    <p className={styles.custom}>User Customizations</p>\n                    <hr className={styles.ch} />\n\n                    <MediaQuery maxWidth={699}>\n                      <Grid>\n                        {this.props.data.hasPropertySelection ? (\n                          <Grid.Column width={9}>\n                            <>\n                              <span className={styles.pName}>\n                                {\n                                  Object.keys(\n                                    this.props.data.map_property[0]\n                                  )[0]\n                                }\n                                :\n                              </span>\n                              <span\n                                className={styles.pValue}\n                                style={{ fontSize: \"14px\" }}\n                              >\n                                {this.state.selectedProp > 18\n                                  ? this.state.selectedProp.substr(0, 17) + \"..\"\n                                  : this.state.selectedProp}\n                              </span>\n                              <div className={styles.radioContainer}>\n                                {this.props.data.property_values.map((prop) => (\n                                  <div key={prop}>\n                                    <input\n                                      className={styles.rad}\n                                      type=\"radio\"\n                                      id={prop}\n                                      name=\"property\"\n                                      checked={this.state.selectedProp == prop}\n                                      onChange={() =>\n                                        this.setState({ selectedProp: prop })\n                                      }\n                                    />\n                                    <label\n                                      className={styles.label}\n                                      htmlFor={prop}\n                                    >\n                                      {prop}\n                                    </label>\n                                  </div>\n                                ))}\n                              </div>\n                            </>\n                          </Grid.Column>\n                        ) : (\n                          <></>\n                        )}\n\n                        {this.props.data.hasSecondPropertySelection ? (\n                          <Grid.Column width={7}>\n                            <>\n                              <span>\n                                <span\n                                  className={styles.pName}\n                                  style={{ fontSize: \"15px\" }}\n                                >\n                                  {\n                                    Object.keys(\n                                      this.props.data.map_secondProps[0]\n                                    )[0]\n                                  }\n                                  :\n                                </span>\n                                <span\n                                  className={styles.pValue}\n                                  style={{ fontSize: \"14px\" }}\n                                >\n                                  {this.state.secondPropsAttributeValue.length >\n                                  15\n                                    ? this.state.secondPropsAttributeValue.substr(\n                                        0,\n                                        14\n                                      ) + \"..\"\n                                    : this.state.secondPropsAttributeValue}\n                                </span>\n                              </span>\n\n                              {this.props.data.second_propsValue.map(\n                                (propa) => (\n                                  <div key={propa}>\n                                    <input\n                                      className={styles.rad}\n                                      type=\"radio\"\n                                      id={propa}\n                                      name=\"propa\"\n                                      checked={\n                                        this.state.secondPropsAttributeValue ===\n                                        propa\n                                      }\n                                      onChange={() =>\n                                        this.setState({\n                                          secondPropsAttributeValue: propa,\n                                        })\n                                      }\n                                    />\n                                    <label\n                                      className={styles.label}\n                                      htmlFor={propa}\n                                    >\n                                      {propa}\n                                    </label>\n                                  </div>\n                                )\n                              )}\n                            </>\n                          </Grid.Column>\n                        ) : (\n                          <></>\n                        )}\n                      </Grid>\n                      {/* FUCK THE OPS */}\n\n                      {this.props.data.isCustomized ? (\n                        <>\n                          <div className={styles.text}>\n                            <p className={styles.head}>\n                              Customize product's image/text.\n                            </p>\n                            <p className={styles.ason}>\n                              *** Leave blank to use default one.\n                              <br />\n                              *** In case of image write a web link to that\n                              image\n                            </p>\n\n                            <textarea\n                              row={2}\n                              cols={45}\n                              className={this.tarea}\n                              onChange={(e) =>\n                                this.setState({ customValue: e.target.value })\n                              }\n                              ref={this.uwanja}\n                            ></textarea>\n                          </div>\n                        </>\n                      ) : (\n                        <></>\n                      )}\n                    </MediaQuery>\n\n                    <MediaQuery minWidth={700}>\n                      {/* You should have the condition to check if all three props exist ...\n                        so i will say if either one of hasPropsValue or secondPropsValue exist\n                        then if either one exit i need to to have one row of hasPropsVAlue/secProps\n                        together with isCustomized... But in other case if both of em hasPropsValue and\n                        hasSecProps value exist then we should have isCustomized in second row...\n\n                        so if first && secValue exist { then Two rows} else\n                        if either one exist then one row....\n                      */}\n                      {this.props.data.hasPropertySelection &&\n                      this.props.data.secondPropsAttributeValue ? (\n                        <>\n                          <Grid>\n                            <Grid.Column width={9}>\n                              <span className={styles.pName}>\n                                {\n                                  Object.keys(\n                                    this.props.data.map_property[0]\n                                  )[0]\n                                }\n                                :\n                              </span>\n                              <span className={styles.pValue}>\n                                {this.state.selectedProp}\n                              </span>\n                              <div className={styles.radioContainer}>\n                                {this.props.data.property_values.map((prop) => (\n                                  <div key={prop}>\n                                    <input\n                                      className={styles.rad}\n                                      type=\"radio\"\n                                      id={prop}\n                                      name=\"property\"\n                                      checked={this.state.selectedProp == prop}\n                                      onChange={() =>\n                                        this.setState({ selectedProp: prop })\n                                      }\n                                    />\n                                    <label\n                                      className={styles.label}\n                                      htmlFor={prop}\n                                    >\n                                      {prop}\n                                    </label>\n                                  </div>\n                                ))}\n                              </div>\n                            </Grid.Column>\n\n                            <Grid.Column width={7}>\n                              <>\n                                <span>\n                                  <span\n                                    className={styles.pName}\n                                    style={{ fontSize: \"15px\" }}\n                                  >\n                                    {\n                                      Object.keys(\n                                        this.props.data.map_secondProps[0]\n                                      )[0]\n                                    }\n                                    :\n                                  </span>\n                                  <span\n                                    className={styles.pValue}\n                                    style={{ fontSize: \"14px\" }}\n                                  >\n                                    {this.state.secondPropsAttributeValue\n                                      .length > 15\n                                      ? this.state.secondPropsAttributeValue.substr(\n                                          0,\n                                          14\n                                        ) + \"..\"\n                                      : this.state.secondPropsAttributeValue}\n                                  </span>\n                                </span>\n\n                                {this.props.data.second_propsValue.map(\n                                  (propa) => (\n                                    <div key={propa}>\n                                      <input\n                                        className={styles.rad}\n                                        type=\"radio\"\n                                        id={propa}\n                                        name=\"propa\"\n                                        checked={\n                                          this.state\n                                            .secondPropsAttributeValue === propa\n                                        }\n                                        onChange={() =>\n                                          this.setState({\n                                            secondPropsAttributeValue: propa,\n                                          })\n                                        }\n                                      />\n                                      <label\n                                        className={styles.label}\n                                        htmlFor={propa}\n                                      >\n                                        {propa}\n                                      </label>\n                                    </div>\n                                  )\n                                )}\n                              </>\n                            </Grid.Column>\n                          </Grid>\n                          {/* FUCK THE OPS */}\n\n                          {this.props.data.isCustomized ? (\n                            <div className={styles.text}>\n                              <p className={styles.head}>\n                                Customize product's image/text.\n                              </p>\n                              <p className={styles.ason}>\n                                *** Leave blank to use default one.\n                                <br />\n                                *** In case of image write a web link to that\n                                image\n                              </p>\n\n                              <MediaQuery minWidth={700} maxWidth={800}>\n                                <textarea\n                                  row={2}\n                                  cols={33}\n                                  className={this.tarea}\n                                  onChange={(e) =>\n                                    this.setState({\n                                      customValue: e.target.value,\n                                    })\n                                  }\n                                  ref={this.uwanja}\n                                ></textarea>\n                              </MediaQuery>\n\n                              <MediaQuery minWidth={801}>\n                                <textarea\n                                  row={2}\n                                  cols={45}\n                                  className={this.tarea}\n                                  onChange={(e) =>\n                                    this.setState({\n                                      customValue: e.target.value,\n                                    })\n                                  }\n                                  ref={this.uwanja}\n                                ></textarea>\n                              </MediaQuery>\n                            </div>\n                          ) : (\n                            <></>\n                          )}\n                        </>\n                      ) : (\n                        <>\n                          {/* this is else condition if we have either none of first and secProps\n                            also or if we have one of em */}\n\n                          <Grid>\n                            {this.props.data.hasPropertySelection ? (\n                              <Grid.Column width={7}>\n                                <span className={styles.pName}>\n                                  {\n                                    Object.keys(\n                                      this.props.data.map_property[0]\n                                    )[0]\n                                  }\n                                  :\n                                </span>\n                                <span className={styles.pValue}>\n                                  {this.state.selectedProp}\n                                </span>\n                                <div className={styles.radioContainer}>\n                                  {this.props.data.property_values.map(\n                                    (prop) => (\n                                      <div key={prop}>\n                                        <input\n                                          className={styles.rad}\n                                          type=\"radio\"\n                                          id={prop}\n                                          name=\"property\"\n                                          checked={\n                                            this.state.selectedProp == prop\n                                          }\n                                          onChange={() =>\n                                            this.setState({\n                                              selectedProp: prop,\n                                            })\n                                          }\n                                        />\n                                        <label\n                                          className={styles.label}\n                                          htmlFor={prop}\n                                        >\n                                          {prop}\n                                        </label>\n                                      </div>\n                                    )\n                                  )}\n                                </div>\n                              </Grid.Column>\n                            ) : (\n                              <></>\n                            )}\n\n                            {this.props.data.hasSecondPropertySelection ? (\n                              <Grid.Column width={7}>\n                                <>\n                                  <span>\n                                    <span\n                                      className={styles.pName}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {\n                                        Object.keys(\n                                          this.props.data.map_secondProps[0]\n                                        )[0]\n                                      }\n                                      :\n                                    </span>\n                                    <span\n                                      className={styles.pValue}\n                                      style={{ fontSize: \"14px\" }}\n                                    >\n                                      {this.state.secondPropsAttributeValue\n                                        .length > 18\n                                        ? this.state.secondPropsAttributeValue.substr(\n                                            0,\n                                            17\n                                          ) + \"..\"\n                                        : this.state.secondPropsAttributeValue}\n                                    </span>\n                                  </span>\n\n                                  {this.props.data.second_propsValue.map(\n                                    (propa) => (\n                                      <div key={propa}>\n                                        <input\n                                          className={styles.rad}\n                                          type=\"radio\"\n                                          id={propa}\n                                          name=\"propa\"\n                                          checked={\n                                            this.state\n                                              .secondPropsAttributeValue ===\n                                            propa\n                                          }\n                                          onChange={() =>\n                                            this.setState({\n                                              secondPropsAttributeValue: propa,\n                                            })\n                                          }\n                                        />\n                                        <label\n                                          className={styles.label}\n                                          htmlFor={propa}\n                                        >\n                                          {propa}\n                                        </label>\n                                      </div>\n                                    )\n                                  )}\n                                </>\n                              </Grid.Column>\n                            ) : (\n                              <></>\n                            )}\n\n                            {this.props.data.isCustomized ? (\n                              <Grid.Column width={9}>\n                                <div className={styles.text}>\n                                  <p className={styles.head}>\n                                    Customize product's image/text.\n                                  </p>\n                                  <p className={styles.ason}>\n                                    *** Leave blank to use default one.\n                                    <br />\n                                    *** In case of image write a web link to\n                                    that image\n                                  </p>\n\n                                  <MediaQuery minWidth={700} maxWidth={800}>\n                                    <textarea\n                                      row={2}\n                                      cols={33}\n                                      className={this.tarea}\n                                      onChange={(e) =>\n                                        this.setState({\n                                          customValue: e.target.value,\n                                        })\n                                      }\n                                      ref={this.uwanja}\n                                    ></textarea>\n                                  </MediaQuery>\n\n                                  <MediaQuery minWidth={801}>\n                                    <textarea\n                                      row={2}\n                                      cols={36}\n                                      className={this.tarea}\n                                      onChange={(e) =>\n                                        this.setState({\n                                          customValue: e.target.value,\n                                        })\n                                      }\n                                      ref={this.uwanja}\n                                    ></textarea>\n                                  </MediaQuery>\n                                </div>\n                              </Grid.Column>\n                            ) : (\n                              <></>\n                            )}\n                          </Grid>\n                        </>\n                      )}\n\n                      {/* <Grid>\n                        {this.props.data.hasPropertySelection ? (\n                          <Grid.Column width={7}>\n                            <span className={styles.pName}>\n                              {Object.keys(this.props.data.map_property[0])[0]}:\n                            </span>\n                            <span className={styles.pValue}>\n                              {this.state.selectedProp}\n                            </span>\n                            <div className={styles.radioContainer}>\n                              {this.props.data.property_values.map((prop) => (\n                                <div key={prop}>\n                                  <input\n                                    className={styles.rad}\n                                    type=\"radio\"\n                                    id={prop}\n                                    name=\"property\"\n                                    checked={this.state.selectedProp == prop}\n                                    onChange={() =>\n                                      this.setState({ selectedProp: prop })\n                                    }\n                                  />\n                                  <label\n                                    className={styles.label}\n                                    htmlFor={prop}\n                                  >\n                                    {prop}\n                                  </label>\n                                </div>\n                              ))}\n                            </div>\n                          </Grid.Column>\n\n\n\n\n                        ) : (\n                          <></>\n                        )}\n\n                        {this.props.data.isCustomized ? (\n                          <Grid.Column width={9}>\n                            <div className={styles.text}>\n                              <p className={styles.head}>\n                                Customize product's image/text.\n                              </p>\n                              <p className={styles.ason}>\n                                *** Leave blank to use default one.\n                                <br />\n                                *** In case of image write a web link to that\n                                image\n                              </p>\n\n                              <MediaQuery minWidth={700} maxWidth={800}>\n                                <textarea\n                                  row={2}\n                                  cols={33}\n                                  className={this.tarea}\n                                  onChange={(e) =>\n                                    this.setState({\n                                      customValue: e.target.value,\n                                    })\n                                  }\n                                ></textarea>\n                              </MediaQuery>\n\n                              <MediaQuery minWidth={801}>\n                                <textarea\n                                  row={2}\n                                  cols={45}\n                                  className={this.tarea}\n                                  onChange={(e) =>\n                                    this.setState({\n                                      customValue: e.target.value,\n                                    })\n                                  }\n                                ></textarea>\n                              </MediaQuery>\n                            </div>\n                          </Grid.Column>\n                        ) : (\n                          <></>\n                        )}\n                      </Grid> */}\n\n                      {/* {this.props.data.hasPropertySelection ? (\n                        <>\n                          \n\n                          <Grid>\n                            <Grid.Column width={7}>\n                              \n                            </Grid.Column>\n\n                            <Grid.Column width={9}>\n                              {this.props.data.isCustomized ? (\n                                <>\n                                  <div className={styles.text}>\n                                    <p className={styles.head}>\n                                      Customize product's image/text.\n                                    </p>\n                                    <p className={styles.ason}>\n                                      *** Leave blank to use default one.\n                                      <br />\n                                      *** In case of image write a web link to\n                                      that image\n                                    </p>\n\n                                    <MediaQuery minWidth={700} maxWidth={800}>\n                                      <textarea\n                                        row={2}\n                                        cols={33}\n                                        className={this.tarea}\n                                      ></textarea>\n                                    </MediaQuery>\n\n                                    <MediaQuery minWidth={801}>\n                                      <textarea\n                                        row={2}\n                                        cols={45}\n                                        className={this.tarea}\n                                      ></textarea>\n                                    </MediaQuery>\n                                  </div>\n                                </>\n                              ) : (\n                                <></>\n                              )}\n                            </Grid.Column>\n                          </Grid>\n                        </>\n                      ) : (\n                        <></>\n                      )} */}\n                    </MediaQuery>\n                  </div>\n                )}\n\n                <div className={styles.err1} ref={this.err1}>\n                  <Message success size=\"mini\">\n                    <Message.Header>\n                      Success, Item has been added to cart\n                    </Message.Header>\n                    <Icon name=\"warning sign\" />\n                    Click the cart icon above to preview your cart.\n                  </Message>\n                </div>\n                <div style={{ marginBottom: \"2%\" }}>\n                  <Button\n                    animated\n                    primary\n                    size=\"medium\"\n                    fluid\n                    onClick={this.addToCart}\n                  >\n                    <Button.Content visible>Add to Cart</Button.Content>\n                    <Button.Content hidden>\n                      <Icon name=\"shop\" />\n                    </Button.Content>\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </MediaQuery>\n\n          <MediaQuery minWidth={900}>\n            This page is only reserved for small screen devices ranging from\n            200px to 400px... So your device is out of bound\n          </MediaQuery>\n        </div>\n      </NavBar>\n    );\n  }\n}\n\nexport default Preview;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/products.js",["264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281"],[],"import React, { Component } from \"react\";\nimport NavBar from \"../components/NavBar\";\nimport Sign from \"../components/Sign\";\nimport styles from \"../static/css/showRoom.module.css\";\nimport {\n  Card,\n  Radio,\n  Form,\n  Segment,\n  Icon,\n  Header,\n  Button,\n  Grid,\n  Message,\n} from \"semantic-ui-react\";\nimport jwt_decode from \"jwt-decode\";\nimport dynamic from \"next/dynamic\";\nimport Router from \"next/router\";\nimport BACKEND_ORIGIN from \"../utils/domain\";\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n\nclass Products extends Component {\n  state = {\n    isAunthenticated: false,\n    products: [],\n    productQuantity: 1,\n    attributeValue: \"\", // Lazima tuwe na default value hapa.. Yaani pale user anapo-select/click the image/product this value should be updated as the default propertyValue.. Ko hii naweza ikaanza kama '' but baadae ikaja kuwa updated pale user anavyoselect picha....\n    selectedObj: {},\n    selectedObjPrice: 0,\n    selectedObjImages: [],\n    modelOpen: false,\n    customValue: \"\",\n    addedToCart: false,\n    x: 0,\n    y: 0,\n  };\n\n  constructor(props) {\n    super(props);\n    this.father = React.createRef();\n    this.showRoom = React.createRef();\n    this.small1 = React.createRef();\n    this.small2 = React.createRef();\n    this.small3 = React.createRef();\n    this.preview = React.createRef();\n    this.explain = React.createRef();\n    this.closeBtn = React.createRef();\n    this.err = React.createRef();\n    this.err1 = React.createRef();\n    this.modal = React.createRef();\n    this.closeBtnx = React.createRef();\n  }\n\n  executingTokenLogics = () => {\n    try {\n      const tokens = localStorage.getItem(\"authTokens\")\n        ? JSON.parse(localStorage.getItem(\"authTokens\"))\n        : null;\n      if (!tokens) {\n        console.log(\"You needed to login, no records\");\n        this.setState({ isAunthenticated: false });\n        return;\n      }\n      const decodedRefreshToken = jwt_decode(tokens.refresh);\n      const expireRefreshTime = decodedRefreshToken.exp;\n      console.log(\"Hey this is the expire date of the refreshToken\");\n      console.log(expireRefreshTime);\n      console.log(\"Lets try to access the json access token\");\n      console.log(tokens.access);\n      const decodedAccessData = jwt_decode(tokens.access);\n      console.log(\"This is expiring time for you...\");\n      console.log(decodedAccessData);\n      const expireAccessTime = decodedAccessData.exp;\n      console.log(expireAccessTime);\n      const diff = expireAccessTime * 1000 - Date.now();\n      if (diff < 1) {\n        console.log(\"Hey we need to either update or make user login again\");\n        if (expireRefreshTime * 1000 - Date.now < 1) {\n          console.log(\n            \"Even ur refresh token has already been expired we need you to login again....\"\n          );\n          this.setState({\n            isAunthenticated: false,\n          });\n          return;\n        }\n        console.log(\n          \"Our refresh token is alive you should use it to update your access token\"\n        );\n\n        this.updateToken(tokens.refresh);\n\n        this.setState({\n          isAunthenticated: true,\n        });\n      } else {\n        this.setState({\n          isAunthenticated: true,\n        });\n      }\n    } catch (InvalidTokenError) {\n      console.log(InvalidTokenError.message);\n      console.log(\n        \"Invalid token specified since, when the token is expired the jwt automatically change your storage and it ill look like this\"\n      );\n      // authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n      this.setState({\n        isAunthenticated: false,\n      });\n    }\n  };\n\n  viewItem = async (e) => {\n    this.setState({\n      y: window.pageYOffset,\n      x: window.pageXOffset,\n    });\n    console.log(e.target.id);\n    const product = this.state.products.find(\n      (product) => product.id === parseInt(e.target.id)\n    );\n    console.log(\"This is the product we captured\");\n    console.log(product);\n\n    await this.setState({\n      selectedObj: product,\n      selectedObjPrice: product.price,\n      selectedObjImages: product.get_urls,\n    });\n\n    if (product.hasPropertySelection) {\n      await this.setState({\n        attributeValue: Object.values(\n          this.state.selectedObj.map_property[0]\n        )[0],\n      });\n    }\n\n    window.scrollTo(0, 0);\n    document.body.style.overflow = \"hidden\";\n    // Hapa hapa coz hizi product zina id kabisa inabidi mtu aselect then mambo mengine yaendelee\n    this.father.current.style.opacity = \"0.1\";\n    document.body.style.background =\n      \"linear-gradient(rgba(0, 0, 0, .5), rgba(0, 0, 0, .4))\";\n    this.father.current.style.pointerEvents = \"none\";\n\n    this.showRoom.current.style.display = \"block\";\n  };\n\n  onIncrease = () => {\n    this.setState({\n      productQuantity: this.state.productQuantity + 1,\n    });\n\n    // Hapa itaji-override na kuzidisha another sum used\n    this.setState({\n      selectedObjPrice:\n        this.state.selectedObjPrice + this.state.selectedObj.price,\n    });\n  };\n\n  onDecrease = () => {\n    if (this.state.productQuantity > 1) {\n      this.setState({\n        productQuantity: this.state.productQuantity - 1,\n      });\n\n      this.setState({\n        selectedObjPrice:\n          this.state.selectedObjPrice - this.state.selectedObj.price,\n      });\n    }\n  };\n\n  onRemove = (e) => {\n    // Kuna state hapa inabidi uzibadilishe ziende kwenye default\n    this.setState({\n      selectedObj: {},\n      attributeValue: \"\",\n      customValue: \"\",\n      productQuantity: 1,\n      selectedObjPrice: 0,\n    });\n\n    e.preventDefault();\n    document.body.style.overflow = \"visible\";\n    this.father.current.style.opacity = \"1\";\n    document.body.style.background = \"#fff\";\n    this.father.current.style.pointerEvents = \"auto\";\n    this.showRoom.current.style.display = \"none\";\n    window.scrollTo(this.state.x, this.state.y);\n  };\n\n  onRemovex = (e) => {\n    this.setState({\n      modelOpen: false,\n    });\n    // Also check here if user has already login you should update isAunthenticated state\n    // Ko hapa ikisha-execute hizi logic itasaidia ku-update automatically\n    // coz this is the method that run on interval to determine the actual user..\n\n    this.executingTokenLogics();\n\n    this.modal.current.style.display = \"none\";\n    this.showRoom.current.style.opacity = \"1\";\n    this.showRoom.current.style.pointerEvents = \"auto\";\n  };\n\n  selectedOn = (e) => {\n    e.preventDefault();\n    this.preview.current.src = e.target.src;\n  };\n\n  addToCart = async (e) => {\n    e.preventDefault();\n\n    this.executingTokenLogics();\n\n    if (!this.state.isAunthenticated) {\n      this.showRoom.current.style.opacity = \"0.05\";\n      this.showRoom.current.style.pointerEvents = \"none\";\n      this.modal.current.style.display = \"block\";\n    } else {\n      console.log(\"Hey this user has been loged in, worry out\");\n\n      const tokens = localStorage.getItem(\"authTokens\");\n      console.log(\"Hey this is tokens for you...\");\n      console.log(tokens);\n      const json = JSON.parse(tokens);\n      let access = json.access;\n      console.log(\"Hey this is access token for you\");\n      console.log(access);\n      let decodedAccessData = \"\";\n      try {\n        decodedAccessData = jwt_decode(access);\n      } catch (err) {\n        console.log(err.message);\n      }\n      console.log(\"This is the id of the user who loged in \");\n      console.log(decodedAccessData.user_id);\n      const user_id = decodedAccessData.user_id;\n      const productId = this.state.selectedObj.id;\n      console.log(user_id, productId);\n\n      const id = this.state.selectedObj.id;\n      const price = this.state.selectedObjPrice;\n      const quantity = this.state.productQuantity;\n      const value = this.state.attributeValue;\n      const customization = this.state.customValue;\n\n      console.log(\"Hey this is user id for you\");\n      console.log(user_id);\n      let check = await fetch(`${BACKEND_ORIGIN}/api/cartExistOrNot/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          user_id,\n          productId: id,\n          price,\n          quantity,\n          customization,\n          value,\n        }),\n      });\n\n      console.log(\"Im outside my nigga\");\n      console.log(check);\n      let output = await check.json();\n\n      console.log(\"This is the output we have\");\n      console.log(output);\n\n      if (output.status == false) {\n        \n        try {\n          let response = await fetch(`${BACKEND_ORIGIN}/api/carts/`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              id: user_id,\n              productId,\n              price,\n              quantity,\n              customization,\n              value,\n            }),\n          });\n\n          let data = await response.json();\n          console.log(\"Hey this is the response from the server\");\n          console.log(data);\n\n          console.log(\"Even ma mama thinks that my mind has gone\");\n          this.err1.current.style.display = \"block\";\n          this.successInterval = setTimeout(() => {\n            this.err1.current.style.display = \"none\";\n          }, 5000);\n        } catch (err) {\n          console.log(err.message);\n        }\n      } else {\n        console.log(\"No need to create a new cart you have one for you....\");\n        let cartByThatUser = output.cart;\n        console.log(\"Hey this is cart by our user....\");\n        console.log(cartByThatUser);\n\n        console.log(\"Even ma mama thinks that my mind has gone\");\n        this.err1.current.style.display = \"block\";\n        this.successInterval = setTimeout(() => {\n          this.err1.current.style.display = \"none\";\n        }, 5000);\n      }\n    }\n  };\n\n  async componentDidMount() {\n    console.log(\n      \"This is value of isAunthenticated \",\n      this.state.isAunthenticated\n    );\n\n    this.executingTokenLogics();\n\n    try {\n      let response = await fetch(`${BACKEND_ORIGIN}/api/products/`);\n\n      let data = await response.json();\n      console.log(\"This is your response from the server about all products\");\n      console.log(data);\n      data = data.reverse();\n\n      await this.setState(\n        {\n          products: data,\n        },\n        () => console.log(this.state.products)\n      ); // this is callback https://stackoverflow.com/questions/42038590/when-to-use-react-setstate-callback\n    } catch (err) {\n      console.log(err.message);\n    }\n\n    this.executingTokenLogicsInterval = setInterval(\n      () => this.executingTokenLogics(),\n      1200000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.executingTokenLogicsInterval);\n    clearTimeout(this.errorTimeout);\n    clearTimeout(this.successInterval);\n    console.log(\"Timeout has been cleared...\");\n    // Also in case we clicked the product to see then the background color is changed\n    // to something like black so when a user click register button from there we shoud\n    // make sure the background color of next body restored back to white(default color)\n\n    document.body.style.background = \"#fff\";\n    document.body.style.overflow = \"visible\";\n  }\n\n  updateToken = async (refreshToken) => {\n    let response = await fetch(`${BACKEND_ORIGIN}/api/token/refresh/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ refresh: refreshToken }),\n    });\n\n    let data = await response.json();\n    localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  };\n\n  render() {\n    return (\n      <NavBar isAunthenticated={this.state.isAunthenticated}>\n        <div className={styles.baba} ref={this.father}>\n          <div className={styles.conte}>\n            <p\n              className={styles.hek}\n            >{`Explore different products, pick and shop now.`}</p>\n            <MediaQuery minWidth={200} maxWidth={400}>\n              <hr className={styles.ab} />\n            </MediaQuery>\n            <MediaQuery minWidth={401} maxWidth={576}>\n              <hr className={styles.ab} />\n            </MediaQuery>\n            <MediaQuery minWidth={577} maxWidth={899}>\n              <hr className={styles.ab} />\n            </MediaQuery>\n            <MediaQuery minWidth={900}>\n              <hr className={styles.ab} />\n            </MediaQuery>\n\n            <MediaQuery minWidth={200} maxWidth={400}>\n              <Card.Group itemsPerRow={1}>\n                {this.state.products.map((product) => (\n                  <Card key={product.id}>\n                    <img\n                      src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                      height={200}\n                    />\n                    <Card.Content>\n                      <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                        style: \"currency\",\n                        currency: \"Tsh\",\n                        minimumFractionDigits: 0,\n                      }).format(parseInt(product.price))}/=`}</Card.Header>\n                      <Card.Description>\n                        {/* <Header color=\"grey\" content={product.title} /> */}\n                        <MediaQuery maxWidth={319}>\n                          <span className={styles.lebo}>\n                            {product.title.length > 25\n                              ? product.title.substr(0, 24) + \"...\"\n                              : product.title}\n                          </span>\n                        </MediaQuery>\n\n                        <MediaQuery minWidth={320} maxWidth={350}>\n                          <span className={styles.lebo}>\n                            {product.title.length > 29\n                              ? product.title.substr(0, 28) + \"...\"\n                              : product.title}\n                          </span>\n                        </MediaQuery>\n\n                        <MediaQuery minWidth={351}>\n                          <span className={styles.lebo}>\n                            {product.title.length > 37\n                              ? product.title.substr(0, 35) + \"...\"\n                              : product.title}\n                          </span>\n                        </MediaQuery>\n                      </Card.Description>\n                    </Card.Content>\n                    <Card.Content extra>\n                      <Button\n                        onClick={() =>\n                          Router.push({\n                            pathname: \"/preview\",\n                            query: { product: product.id },\n                          })\n                        }\n                        content=\"Shop now\"\n                        color=\"teal\"\n                        id={product.id}\n                        fluid\n                      />\n                    </Card.Content>\n                  </Card>\n                ))}\n              </Card.Group>\n            </MediaQuery>\n\n            <MediaQuery minWidth={401} maxWidth={576}>\n              <Card.Group itemsPerRow={2}>\n                {this.state.products.map((product) => (\n                  <Card key={product.id}>\n                    <MediaQuery maxWidth={499}>\n                      <img\n                        src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        height={140}\n                      />\n                    </MediaQuery>\n                    <MediaQuery minWidth={500}>\n                      <img\n                        src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        height={170}\n                      />\n                    </MediaQuery>\n                    <Card.Content>\n                      <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                        style: \"currency\",\n                        currency: \"Tsh\",\n                        minimumFractionDigits: 0,\n                      }).format(parseInt(product.price))}/=`}</Card.Header>\n                      <Card.Description>\n                        {/* <Header color=\"grey\" content={product.title} /> */}\n                        <MediaQuery maxWidth={500}>\n                          <span className={styles.lebo}>\n                            {product.title.length > 19\n                              ? product.title.substr(0, 17) + \"...\"\n                              : product.title}\n                          </span>\n                        </MediaQuery>\n                        <MediaQuery minWidth={501}>\n                          <span className={styles.lebo}>\n                            {product.title.length > 25\n                              ? product.title.substr(0, 24) + \"...\"\n                              : product.title}\n                          </span>\n                        </MediaQuery>\n                      </Card.Description>\n                    </Card.Content>\n                    <Card.Content extra>\n                      <Button\n                        onClick={() =>\n                          Router.push({\n                            pathname: \"/preview\",\n                            query: { product: product.id },\n                          })\n                        }\n                        content=\"Shop now\"\n                        color=\"teal\"\n                        id={product.id}\n                        fluid\n                      />\n                    </Card.Content>\n                  </Card>\n                ))}\n              </Card.Group>\n            </MediaQuery>\n\n            <MediaQuery minWidth={577} maxWidth={899}>\n              <Card.Group itemsPerRow={3}>\n                {this.state.products.map((product) => (\n                  <Card key={product.id}>\n                    <MediaQuery maxWidth={650}>\n                      <img\n                        src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        height={140}\n                      />\n                    </MediaQuery>\n                    <MediaQuery minWidth={651} maxWidth={700}>\n                      <img\n                        src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        height={150}\n                      />\n                    </MediaQuery>\n\n                    <MediaQuery minWidth={701}>\n                      <img\n                        src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        height={170}\n                      />\n                    </MediaQuery>\n                    <Card.Content>\n                      <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                        style: \"currency\",\n                        currency: \"Tsh\",\n                        minimumFractionDigits: 0,\n                      }).format(parseInt(product.price))}/=`}</Card.Header>\n                      <Card.Description>\n                        {/* <Header color=\"grey\" content={product.title} /> */}\n                        <MediaQuery maxWidth={650}>\n                          <span className={styles.lebo}>\n                            {product.title.length > 17\n                              ? product.title.substr(0, 16) + \"...\"\n                              : product.title}\n                          </span>\n                        </MediaQuery>\n\n                        <MediaQuery minWidth={651}>\n                          <span className={styles.lebo}>\n                            {product.title.length > 20\n                              ? product.title.substr(0, 20) + \"...\"\n                              : product.title}\n                          </span>\n                        </MediaQuery>\n                      </Card.Description>\n                    </Card.Content>\n                    <Card.Content extra>\n                      <Button\n                        onClick={() =>\n                          Router.push({\n                            pathname: \"/preview\",\n                            query: { product: product.id },\n                          })\n                        }\n                        content=\"Shop now\"\n                        color=\"teal\"\n                        id={product.id}\n                        fluid\n                      />\n                    </Card.Content>\n                  </Card>\n                ))}\n              </Card.Group>\n            </MediaQuery>\n\n            <MediaQuery minWidth={900} maxWidth={1100}>\n              <Card.Group itemsPerRow={4}>\n                {this.state.products.map((product) => (\n                  <Card key={product.id}>\n                    <img\n                      src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                      height={150}\n                    />\n                    <Card.Content>\n                      <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                        style: \"currency\",\n                        currency: \"Tsh\",\n                        minimumFractionDigits: 0,\n                      }).format(parseInt(product.price))}/=`}</Card.Header>\n                      <Card.Description>\n                        {/* <Header color=\"grey\" content={product.title} /> */}\n                        <MediaQuery maxWidth={990}>\n                          <span className={styles.lebo}>\n                            {product.title.length > 15\n                              ? product.title.substr(0, 15) + \"...\"\n                              : product.title}\n                          </span>\n                        </MediaQuery>\n                        <MediaQuery minWidth={991}>\n                          <span className={styles.lebo}>\n                            {product.title.length > 23\n                              ? product.title.substr(0, 23) + \"...\"\n                              : product.title}\n                          </span>\n                        </MediaQuery>\n                      </Card.Description>\n                    </Card.Content>\n                    <Card.Content extra>\n                      <Button\n                        onClick={this.viewItem}\n                        content=\"Shop now\"\n                        color=\"teal\"\n                        id={product.id}\n                        fluid\n                      />\n                    </Card.Content>\n                  </Card>\n                ))}\n              </Card.Group>\n            </MediaQuery>\n\n            <MediaQuery minWidth={1101}>\n              <Card.Group itemsPerRow={5}>\n                {this.state.products.map((product) => (\n                  <Card key={product.id}>\n                    <MediaQuery maxWidth={1200}>\n                      <img\n                        src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        height={150}\n                      />\n                    </MediaQuery>\n\n                    <MediaQuery minWidth={1201}>\n                      <img\n                        src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        height={170}\n                      />\n                    </MediaQuery>\n                    <Card.Content>\n                      <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                        style: \"currency\",\n                        currency: \"Tsh\",\n                        minimumFractionDigits: 0,\n                      }).format(parseInt(product.price))}/=`}</Card.Header>\n                      <Card.Description>\n                        {/* <Header color=\"grey\" content={product.title} /> */}\n                        <MediaQuery maxWidth={1199}>\n                          <span className={styles.lebo}>\n                            {product.title.length > 15\n                              ? product.title.substr(0, 15) + \"...\"\n                              : product.title}\n                          </span>\n                        </MediaQuery>\n                        <MediaQuery minWidth={1200}>\n                          <span className={styles.lebo}>\n                            {product.title.length > 23\n                              ? product.title.substr(0, 23) + \"...\"\n                              : product.title}\n                          </span>\n                        </MediaQuery>\n                      </Card.Description>\n                    </Card.Content>\n                    <Card.Content extra>\n                      <Button\n                        onClick={this.viewItem}\n                        content=\"Shop now\"\n                        color=\"teal\"\n                        id={product.id}\n                        fluid\n                      />\n                    </Card.Content>\n                  </Card>\n                ))}\n              </Card.Group>\n            </MediaQuery>\n          </div>\n        </div>\n\n        <MediaQuery minWidth={900} maxWidth={1199}>\n          <div className={styles.showRoom} ref={this.showRoom}>\n            <div\n              className={styles.closeBtn}\n              onClick={this.onRemove}\n              ref={this.closeBtn}\n            >\n              &times;\n            </div>\n\n            <MediaQuery minWidth={900} maxWidth={1000}>\n              <Segment>\n                <Grid>\n                  {/* By default first image is the one placed first at canvas/preview section */}\n\n                  <Grid.Column width={9}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"300px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n\n                    <div className={styles.smallImage}>\n                      {this.state.selectedObjImages.map((url) => (\n                        <img\n                          className={styles.smaI}\n                          key={url}\n                          src={`${BACKEND_ORIGIN}${url}`}\n                          width={60}\n                          height={50}\n                          onClick={this.selectedOn}\n                        />\n                      ))}\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width={7}>\n                    <div className={styles.dodo}>\n                      <Header as=\"h3\">\n                        {this.state.selectedObj.title}\n                        <Header.Subheader color=\"orange\">\n                          {this.state.selectedObj.description}\n                        </Header.Subheader>\n                      </Header>\n\n                      <hr />\n                      <span>\n                        <Grid>\n                          <Grid.Column width={9}>\n                            Price:{\" \"}\n                            <Header\n                              as=\"h3\"\n                              color=\"grey\"\n                              content={`${new Intl.NumberFormat(\"en-US\", {\n                                style: \"currency\",\n                                currency: \"Tsh\",\n                                minimumFractionDigits: 0,\n                              }).format(\n                                parseInt(this.state.selectedObjPrice)\n                              )}/=`}\n                            />\n                          </Grid.Column>\n                          <Grid.Column width={7}>\n                            <span className={styles.sp}>\n                              Quantity:{\" \"}\n                              <span className={styles.idadi}>\n                                {this.state.productQuantity}\n                              </span>\n                            </span>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"80%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </Grid.Column>\n                        </Grid>\n                      </span>\n                    </div>\n                    <div>\n                      <div className={styles.customizations}>\n                        {this.state.selectedObj.hasPropertySelection ===\n                          false &&\n                        this.state.selectedObj.isCustomized === false ? (\n                          <> </>\n                        ) : (\n                          <div className={styles.top}>\n                            <p\n                              className={styles.h}\n                              style={{ fontWeight: \"bold\", fontSize: \"120%\" }}\n                            >\n                              User Customizations\n                            </p>\n\n                            <hr className={styles.hr1} />\n                          </div>\n                        )}\n\n                        <div className={styles.sec}>\n                          <>\n                            {this.state.selectedObj.hasPropertySelection ? (\n                              <>\n                                <span>\n                                  <span\n                                    className={styles.pName}\n                                    style={{ fontSize: \"15px\" }}\n                                  >\n                                    {\n                                      Object.keys(\n                                        this.state.selectedObj.map_property[0]\n                                      )[0]\n                                    }\n                                    :\n                                  </span>\n                                  <span\n                                    className={styles.pValue}\n                                    style={{ fontSize: \"15px\" }}\n                                  >\n                                    {this.state.attributeValue}\n                                  </span>\n                                </span>\n                                <Form>\n                                  {this.state.selectedObj.property_values.map(\n                                    (prop) => (\n                                      <div key={prop} className={styles.pullUp}>\n                                        <Form.Field>\n                                          <Radio\n                                            label={prop}\n                                            name=\"radioGroup\"\n                                            value={prop}\n                                            checked={\n                                              this.state.attributeValue === prop\n                                            }\n                                            onChange={() =>\n                                              this.setState({\n                                                attributeValue: prop,\n                                              })\n                                            }\n                                          />\n                                        </Form.Field>\n                                      </div>\n                                    )\n                                  )}\n                                </Form>\n                              </>\n                            ) : (\n                              <></>\n                            )}\n\n                            {this.state.selectedObj.isCustomized ? (\n                              <>\n                                <span\n                                  className={styles.bichwa}\n                                  style={{ fontSize: \"15px\" }}\n                                >\n                                  Customize product's image/text.\n                                </span>\n                                <p className={styles.sub}>\n                                  *** Leave blank to use default one.\n                                  <br />\n                                  *** In case of image write a web link to that\n                                  image\n                                </p>\n                                <textarea\n                                  row={2}\n                                  cols={30}\n                                  className={this.tarea}\n                                  onChange={(event) =>\n                                    this.setState({\n                                      customValue: event.target.value,\n                                    })\n                                  }\n                                  style={{ marginBottom: \"3%\" }}\n                                ></textarea>\n                              </>\n                            ) : (\n                              <></>\n                            )}\n                          </>\n                        </div>\n                      </div>\n                      <div className={styles.down}>\n                        <div className={styles.err} ref={this.err}>\n                          <Message error>\n                            <Message.Header>\n                              Error, You needed to login\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click login button above and login to enable add to\n                            cart feature.\n                          </Message>\n                        </div>\n\n                        <div className={styles.err1} ref={this.err1}>\n                          <Message success>\n                            <Message.Header>\n                              Success, Item has been added to cart\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click the cart icon above to preview your cart.\n                          </Message>\n                        </div>\n\n                        <Button\n                          animated\n                          primary\n                          size=\"medium\"\n                          fluid\n                          onClick={this.addToCart}\n                        >\n                          <Button.Content visible>Add to Cart</Button.Content>\n                          <Button.Content hidden>\n                            <Icon name=\"shop\" />\n                          </Button.Content>\n                        </Button>\n                      </div>\n                    </div>\n                  </Grid.Column>\n                </Grid>\n\n                <div className={styles.footerSec} style={{ marginTop: \"5%\" }}>\n                  <hr className={styles.footerHr} />\n                  <Header\n                    textAlign=\"center\"\n                    content=\"Powered by Online Tec\"\n                    color=\"grey\"\n                  />\n                </div>\n              </Segment>\n            </MediaQuery>\n\n            <MediaQuery minWidth={1001}>\n              <Segment>\n                <Grid>\n                  {/* By default first image is the one placed first at canvas/preview section */}\n\n                  <Grid.Column width={9}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"400px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n\n                    <div className={styles.smallImage}>\n                      {this.state.selectedObjImages.map((url) => (\n                        <img\n                          className={styles.smaI}\n                          key={url}\n                          src={`${BACKEND_ORIGIN}${url}`}\n                          width={60}\n                          height={50}\n                          onClick={this.selectedOn}\n                        />\n                      ))}\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width={7}>\n                    <div className={styles.dodo}>\n                      <Header as=\"h3\">\n                        {this.state.selectedObj.title}\n                        <Header.Subheader color=\"orange\">\n                          {this.state.selectedObj.description}\n                        </Header.Subheader>\n                      </Header>\n\n                      <hr />\n                      <span>\n                        <Grid>\n                          <Grid.Column width={9}>\n                            Price:{\" \"}\n                            <Header\n                              as=\"h3\"\n                              color=\"grey\"\n                              content={`${new Intl.NumberFormat(\"en-US\", {\n                                style: \"currency\",\n                                currency: \"Tsh\",\n                                minimumFractionDigits: 0,\n                              }).format(\n                                parseInt(this.state.selectedObjPrice)\n                              )}/=`}\n                            />\n                          </Grid.Column>\n                          <Grid.Column width={7}>\n                            <span className={styles.sp}>\n                              Quantity:{\" \"}\n                              <span className={styles.idadi}>\n                                {this.state.productQuantity}\n                              </span>\n                            </span>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"72%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </Grid.Column>\n                        </Grid>\n                      </span>\n                    </div>\n                    <div>\n                      <div className={styles.customizations}>\n                        {this.state.selectedObj.hasPropertySelection ===\n                          false &&\n                        this.state.selectedObj.isCustomized === false ? (\n                          <> </>\n                        ) : (\n                          <div className={styles.top}>\n                            <h2\n                              className={styles.h}\n                              style={{ fontWeight: \"bold\", fontSize: \"130%\" }}\n                            >\n                              User Customizations\n                            </h2>\n\n                            <hr className={styles.hr1} />\n                          </div>\n                        )}\n\n                        <div className={styles.sec}>\n                          <>\n                            {this.state.selectedObj.hasPropertySelection ? (\n                              <>\n                                <span>\n                                  <span\n                                    className={styles.pName}\n                                    style={{ fontSize: \"15px\" }}\n                                  >\n                                    {\n                                      Object.keys(\n                                        this.state.selectedObj.map_property[0]\n                                      )[0]\n                                    }\n                                    :\n                                  </span>\n                                  <span\n                                    className={styles.pValue}\n                                    style={{ fontSize: \"15px\" }}\n                                  >\n                                    {this.state.attributeValue}\n                                  </span>\n                                </span>\n                                <Form>\n                                  {this.state.selectedObj.property_values.map(\n                                    (prop) => (\n                                      <div key={prop} className={styles.pullUp}>\n                                        <Form.Field>\n                                          <Radio\n                                            label={prop}\n                                            name=\"radioGroup\"\n                                            value={prop}\n                                            checked={\n                                              this.state.attributeValue === prop\n                                            }\n                                            onChange={() =>\n                                              this.setState({\n                                                attributeValue: prop,\n                                              })\n                                            }\n                                          />\n                                        </Form.Field>\n                                      </div>\n                                    )\n                                  )}\n                                </Form>\n                              </>\n                            ) : (\n                              <></>\n                            )}\n\n                            {this.state.selectedObj.isCustomized ? (\n                              <>\n                                <span\n                                  className={styles.bichwa}\n                                  style={{ fontSize: \"15px\" }}\n                                >\n                                  Customize product's image/text.\n                                </span>\n                                <p className={styles.sub}>\n                                  *** Leave blank to use default one.\n                                  <br />\n                                  *** In case of image write a web link to that\n                                  image\n                                </p>\n                                <textarea\n                                  row={2}\n                                  cols={32}\n                                  className={this.tarea}\n                                  onChange={(event) =>\n                                    this.setState({\n                                      customValue: event.target.value,\n                                    })\n                                  }\n                                  style={{ marginBottom: \"3%\" }}\n                                ></textarea>\n                              </>\n                            ) : (\n                              <></>\n                            )}\n                          </>\n                        </div>\n                      </div>\n                      <div className={styles.down}>\n                        <div className={styles.err} ref={this.err}>\n                          <Message error>\n                            <Message.Header>\n                              Error, You needed to login\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click login button above and login to enable add to\n                            cart feature.\n                          </Message>\n                        </div>\n\n                        <div className={styles.err1} ref={this.err1}>\n                          <Message success>\n                            <Message.Header>\n                              Success, Item has been added to cart\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click the cart icon above to preview your cart.\n                          </Message>\n                        </div>\n\n                        <Button\n                          animated\n                          primary\n                          size=\"medium\"\n                          fluid\n                          onClick={this.addToCart}\n                        >\n                          <Button.Content visible>Add to Cart</Button.Content>\n                          <Button.Content hidden>\n                            <Icon name=\"shop\" />\n                          </Button.Content>\n                        </Button>\n                      </div>\n                    </div>\n                  </Grid.Column>\n                </Grid>\n\n                <div className={styles.footerSec} style={{ marginTop: \"2%\" }}>\n                  <hr className={styles.footerHr} />\n                  <Header\n                    textAlign=\"center\"\n                    content=\"Powered by Online Tec\"\n                    color=\"grey\"\n                  />\n                </div>\n              </Segment>\n            </MediaQuery>\n          </div>\n        </MediaQuery>\n\n        <MediaQuery minWidth={1200}>\n          <div className={styles.showRoom} ref={this.showRoom}>\n            <div\n              className={styles.closeBtn}\n              onClick={this.onRemove}\n              ref={this.closeBtn}\n            >\n              &times;\n            </div>\n\n            <Segment>\n              <Grid>\n                {/* By default first image is the one placed first at canvas/preview section */}\n\n                <Grid.Column width={9}>\n                  <MediaQuery minWidth={1200} maxWidth={1340}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"380px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={1341} maxWidth={1500}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"400px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={1501}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"500px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <div className={styles.smallImage}>\n                    {this.state.selectedObjImages.map((url) => (\n                      <img\n                        className={styles.smaI}\n                        key={url}\n                        src={`${BACKEND_ORIGIN}${url}`}\n                        width={60}\n                        height={50}\n                        onClick={this.selectedOn}\n                      />\n                    ))}\n                  </div>\n                </Grid.Column>\n                <Grid.Column width={7}>\n                  <div className={styles.dodo}>\n                    <Header as=\"h3\">\n                      {this.state.selectedObj.title}\n                      <Header.Subheader color=\"orange\">\n                        {this.state.selectedObj.description}\n                      </Header.Subheader>\n                    </Header>\n\n                    <hr />\n                    <span>\n                      <Grid>\n                        <Grid.Column width={9}>\n                          Price:{\" \"}\n                          <Header\n                            as=\"h3\"\n                            color=\"grey\"\n                            content={`${new Intl.NumberFormat(\"en-US\", {\n                              style: \"currency\",\n                              currency: \"Tsh\",\n                              minimumFractionDigits: 0,\n                            }).format(\n                              parseInt(this.state.selectedObjPrice)\n                            )}/=`}\n                          />\n                        </Grid.Column>\n                        <Grid.Column width={7}>\n                          <span className={styles.sp}>\n                            Quantity:{\" \"}\n                            <span className={styles.idadi}>\n                              {this.state.productQuantity}\n                            </span>\n                          </span>\n                          <MediaQuery minWidth={1200} maxWidth={1340}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"58%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={1341} maxWidth={1500}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"52%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={1501}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"46%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n                        </Grid.Column>\n                      </Grid>\n                    </span>\n                  </div>\n                  <div>\n                    <div className={styles.customizations}>\n                      {this.state.selectedObj.hasPropertySelection === false &&\n                      this.state.selectedObj.isCustomized === false ? (\n                        <> </>\n                      ) : (\n                        <div className={styles.top}>\n                          <h2\n                            className={styles.h}\n                            style={{ fontWeight: \"bold\", fontSize: \"130%\" }}\n                          >\n                            User Customizations\n                          </h2>\n\n                          <hr className={styles.hr1} />\n                        </div>\n                      )}\n\n                      <div className={styles.sec}>\n                        <>\n                          {this.state.selectedObj.hasPropertySelection ? (\n                            <>\n                              <span>\n                                <span\n                                  className={styles.pName}\n                                  style={{ fontSize: \"15px\" }}\n                                >\n                                  {\n                                    Object.keys(\n                                      this.state.selectedObj.map_property[0]\n                                    )[0]\n                                  }\n                                  :\n                                </span>\n                                <span\n                                  className={styles.pValue}\n                                  style={{ fontSize: \"15px\" }}\n                                >\n                                  {this.state.attributeValue}\n                                </span>\n                              </span>\n                              <Form>\n                                {this.state.selectedObj.property_values.map(\n                                  (prop) => (\n                                    <div key={prop} className={styles.pullUp}>\n                                      <Form.Field>\n                                        <Radio\n                                          label={prop}\n                                          name=\"radioGroup\"\n                                          value={prop}\n                                          checked={\n                                            this.state.attributeValue === prop\n                                          }\n                                          onChange={() =>\n                                            this.setState({\n                                              attributeValue: prop,\n                                            })\n                                          }\n                                        />\n                                      </Form.Field>\n                                    </div>\n                                  )\n                                )}\n                              </Form>\n                            </>\n                          ) : (\n                            <></>\n                          )}\n\n                          {this.state.selectedObj.isCustomized ? (\n                            <>\n                              <span\n                                className={styles.bichwa}\n                                style={{ fontSize: \"15px\" }}\n                              >\n                                Customize product's image/text.\n                              </span>\n                              <p className={styles.sub}>\n                                *** Leave blank to use default one.\n                                <br />\n                                *** In case of image write a web link to that\n                                image\n                              </p>\n                              <textarea\n                                row={2}\n                                cols={32}\n                                className={this.tarea}\n                                onChange={(event) =>\n                                  this.setState({\n                                    customValue: event.target.value,\n                                  })\n                                }\n                                style={{ marginBottom: \"3%\" }}\n                              ></textarea>\n                            </>\n                          ) : (\n                            <></>\n                          )}\n                        </>\n                      </div>\n                    </div>\n                    <div className={styles.down}>\n                      <div className={styles.err} ref={this.err}>\n                        <Message error>\n                          <Message.Header>\n                            Error, You needed to login\n                          </Message.Header>\n                          <Icon name=\"warning sign\" />\n                          Click login button above and login to enable add to\n                          cart feature.\n                        </Message>\n                      </div>\n\n                      <div className={styles.err1} ref={this.err1}>\n                        <Message success>\n                          <Message.Header>\n                            Success, Item has been added to cart\n                          </Message.Header>\n                          <Icon name=\"warning sign\" />\n                          Click the cart icon above to preview your cart.\n                        </Message>\n                      </div>\n\n                      <Button\n                        animated\n                        primary\n                        size=\"medium\"\n                        fluid\n                        onClick={this.addToCart}\n                      >\n                        <Button.Content visible>Add to Cart</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"shop\" />\n                        </Button.Content>\n                      </Button>\n                    </div>\n                  </div>\n                </Grid.Column>\n              </Grid>\n\n              <div className={styles.footerSec} style={{ marginTop: \"2%\" }}>\n                <hr className={styles.footerHr} />\n                <Header\n                  textAlign=\"center\"\n                  content=\"Powered by Online Tec\"\n                  color=\"grey\"\n                />\n              </div>\n            </Segment>\n          </div>\n        </MediaQuery>\n\n        <div className={styles.model} ref={this.modal}>\n          <div\n            className={styles.closeBtnx}\n            onClick={this.onRemovex}\n            ref={this.closeBtnx}\n          >\n            &times;\n          </div>\n\n          <Sign closeLoginPanel={this.onRemovex} />\n        </div>\n\n        <style jsx global>{`\n          body {\n            background: rgb(236, 236, 236);\n          }\n        `}</style>\n      </NavBar>\n    );\n  }\n}\n\nexport default Products;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/profile.js",["282","283","284","285","286","287","288","289","290"],[],"import React, { Component } from \"react\";\nimport NavBar from \"../components/NavBar\";\nimport jwt_decode from \"jwt-decode\";\nimport styles from \"../static/css/profile.module.css\";\nimport Router from \"next/router\";\nimport { Header, Grid, Icon } from \"semantic-ui-react\";\nimport BACKEND_ORIGIN from \"../utils/domain\";\nimport dynamic from \"next/dynamic\";\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n\nclass Profile extends Component {\n  state = {\n    isAunthenticated: false,\n    cartproducts: [],\n    user_id: null,\n    net_price: 0,\n    net_quantity: 0,\n    profile: [],\n    profile_pic: null,\n    profile_file: null,\n    username: \"\",\n    password: \"\",\n    oldPassword: \"\",\n    errorMessage: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.para1 = React.createRef();\n    this.para2 = React.createRef();\n    this.para3 = React.createRef();\n    this.para4 = React.createRef();\n    this.profile = React.createRef();\n    this.cartSummary = React.createRef();\n    this.notification = React.createRef();\n    this.password = React.createRef();\n    this.editProfile = React.createRef();\n    this.actualPreview = React.createRef();\n    this.success = React.createRef();\n    this.err = React.createRef();\n    this.inp = React.createRef();\n    this.inpOld = React.createRef();\n    this.updateUsername = React.createRef();\n  }\n\n  preview = (e) => {\n    // YOU SHOULD GIVE THE CREDI TO THIS VIDEO\n    // https://www.youtube.com/watch?v=BPUgM1Ig4Po\n    e.preventDefault();\n    // console.log(e.target.value);\n\n    const file = e.target.files[0];\n    // this is what we get C:\\fakepath\\cat.jpeg .. its not a full path of the image..\n    // https://stackoverflow.com/questions/4851595/how-to-resolve-the-c-fakepath\n    if (file && file.type.substr(0, 5) === \"image\") {\n      this.setState({\n        profile_file: file,\n      });\n\n      // Nilichogundua kazi ya hii FileReader ni kwamba inaichukua uploaded\n      // image holded in the file input then since the browser for security\n      // reason they didn't give us a full path of the uploaded image for us\n      // to preview it to user.. This file reader takes that uploaded image then\n      // it encode it or convert it in the actual image then it gives it the url or\n      // string which is .readAsDataUrl() then after that I think we send that encoded\n      // base64 data of image/actual image as url to the browser/client where it will\n      // get loaded as background.. this is what happens but for more mimi hapa hizi ni\n      // logic zangu tu inabd ufatilie kwa kina kuhusu hii FileReader()....\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.setState({\n          profile_pic: reader.result,\n        });\n\n        console.log(\"This is the new image\");\n        this.actualPreview.current.style.backgroundImage = `url(${reader.result})`;\n        this.actualPreview.current.style.backgroundSize = \"100% 100%\";\n        this.actualPreview.current.style.backgroundRepeat = \"no-repeat\";\n      };\n      reader.readAsDataURL(file);\n    } else {\n      this.setState({\n        profile_pic: null\n      })\n      \n    }\n  };\n\n  editPro = async (e) => {\n    e.preventDefault();\n    console.log(\"Hey im in clicking the button...\");\n    const file = this.state.profile_file;\n\n    if (file || this.state.username.length > 0) {\n      const image = file;\n\n      const uploadData = new FormData();\n      uploadData.append(\"id\", this.state.user_id);\n      uploadData.append(\"image\", image);\n\n      this.state.username.trim().length > 1\n        ? uploadData.append(\"name\", this.state.username)\n        : uploadData.append(\"name\", \"431EFD#\");\n      //uploadData.append(\"name\", this.state.username);\n\n      console.log(\"Thsi is upload data for you\");\n      console.log(uploadData);\n\n      const response = await fetch(`${BACKEND_ORIGIN}/api/edit/`, {\n        method: \"POST\",\n        body: uploadData,\n      });\n      // Unavyo-upload image/formData mara nyingi image usiweke headers of\n      // of { Content-Type: application/json} because remember file is not\n      // the application/json ..\n      // Also hii FormData() inabidi uifatilie coz ndo iliyokusaidia hapa\n      // vilevile toa some credit to this guy for helping you\n      // https://www.youtube.com/watch?v=Sc1KKe1Pguw\n\n      const data = await response.json();\n\n      window.location.reload();\n    }\n  };\n\n  paraO = () => {\n    this.para1.current.style.background = \"rgb(221, 221, 221)\";\n    this.para1.current.style.borderRight = \"1px solid grey\";\n    this.para2.current.style.background = \"none\";\n    this.para2.current.style.borderRight = \"none\";\n    this.para3.current.style.background = \"none\";\n    this.para3.current.style.borderRight = \"none\";\n    this.para4.current.style.background = \"none\";\n    this.para4.current.style.borderRight = \"none\";\n\n    this.profile.current.style.display = \"block\";\n    this.cartSummary.current.style.display = \"none\";\n    this.notification.current.style.display = \"none\";\n    this.password.current.style.display = \"none\";\n    this.editProfile.current.style.display = \"none\";\n    this.success.current.style.display = \"none\";\n    this.err.current.style.display = \"none\";\n  };\n\n  paraT = () => {\n    console.log(\"IM para2\");\n    this.para2.current.style.background = \"rgb(221, 221, 221)\";\n    this.para2.current.style.borderRight = \"1px solid grey\";\n    this.para1.current.style.background = \"none\";\n    this.para1.current.style.borderRight = \"none\";\n    this.para3.current.style.background = \"none\";\n    this.para3.current.style.borderRight = \"none\";\n    this.para4.current.style.background = \"none\";\n    this.para4.current.style.borderRight = \"none\";\n\n    this.profile.current.style.display = \"none\";\n    this.cartSummary.current.style.display = \"block\";\n    this.notification.current.style.display = \"none\";\n    this.password.current.style.display = \"none\";\n    this.editProfile.current.style.display = \"none\";\n    this.success.current.style.display = \"none\";\n    this.err.current.style.display = \"none\";\n  };\n\n  paraTh = () => {\n    this.para3.current.style.background = \"rgb(221, 221, 221)\";\n    this.para3.current.style.borderRight = \"1px solid grey\";\n    this.para2.current.style.background = \"none\";\n    this.para2.current.style.borderRight = \"none\";\n    this.para1.current.style.background = \"none\";\n    this.para1.current.style.borderRight = \"none\";\n    this.para4.current.style.background = \"none\";\n    this.para4.current.style.borderRight = \"none\";\n\n    this.profile.current.style.display = \"none\";\n    this.cartSummary.current.style.display = \"none\";\n    this.notification.current.style.display = \"block\";\n    this.password.current.style.display = \"none\";\n    this.editProfile.current.style.display = \"none\";\n    this.success.current.style.display = \"none\";\n    this.err.current.style.display = \"none\";\n  };\n\n  paraF = () => {\n    this.para4.current.style.background = \"rgb(221, 221, 221)\";\n    this.para4.current.style.borderRight = \"1px solid grey\";\n    this.para2.current.style.background = \"none\";\n    this.para2.current.style.borderRight = \"none\";\n    this.para3.current.style.background = \"none\";\n    this.para3.current.style.borderRight = \"none\";\n    this.para1.current.style.background = \"none\";\n    this.para1.current.style.borderRight = \"none\";\n\n    this.profile.current.style.display = \"none\";\n    this.cartSummary.current.style.display = \"none\";\n    this.notification.current.style.display = \"none\";\n    this.password.current.style.display = \"block\";\n    this.editProfile.current.style.display = \"none\";\n    this.success.current.style.display = \"none\";\n    this.err.current.style.display = \"none\";\n  };\n\n  executingTokenLogics = async () => {\n    try {\n      const tokens = localStorage.getItem(\"authTokens\")\n        ? JSON.parse(localStorage.getItem(\"authTokens\"))\n        : null;\n      if (!tokens) {\n        console.log(\"You needed to login, no records\");\n        this.setState({ isAunthenticated: false });\n        return;\n      }\n      const decodedRefreshToken = jwt_decode(tokens.refresh);\n      const expireRefreshTime = decodedRefreshToken.exp;\n      console.log(\"Hey this is the expire date of the refreshToken\");\n      console.log(expireRefreshTime);\n      console.log(\"Lets try to access the json access token\");\n      console.log(tokens.access);\n      const decodedAccessData = jwt_decode(tokens.access);\n      const user = decodedAccessData.user_id;\n      this.setState({\n        user_id: user,\n      });\n      console.log(\"This is expiring time for you...\");\n      console.log(decodedAccessData);\n      const expireAccessTime = decodedAccessData.exp;\n      console.log(expireAccessTime);\n      const diff = expireAccessTime * 1000 - Date.now();\n      if (diff < 1) {\n        console.log(\"Hey we need to either update or make user login again\");\n        if (expireRefreshTime * 1000 - Date.now < 1) {\n          console.log(\n            \"Even ur refresh token has already been expired we need you to login again....\"\n          );\n          this.setState({\n            isAunthenticated: false,\n          });\n          return;\n        }\n        console.log(\n          \"Our refresh token is alive you should use it to update your access token\"\n        );\n\n        this.updateToken(tokens.refresh);\n\n        this.setState({\n          isAunthenticated: true,\n          user_id: user,\n        });\n      } else {\n        this.setState({\n          isAunthenticated: true,\n          user_id: user,\n        });\n      }\n\n      let check = await fetch(`${BACKEND_ORIGIN}/api/cartproducts/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          id: user,\n        }),\n      });\n\n      let output = await check.json();\n\n      if (output.message) {\n        // the message is returned when the logged on user has not created\n        // cart for him/her\n        let crack = await fetch(`${BACKEND_ORIGIN}/api/profile/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: user,\n          }),\n        });\n\n        let profile = await crack.json();\n\n        // sometimes user anaweza akawa hana profile... ikareturn error like this\n        // { error: \"No profile by that user\"} then for this case it will be difficult\n        // to reference some data like name, picture and so on but my aim is when user is\n        // created to create the profile for him by any means.... In order to avoid this\n        // kind of issues... Hii imetokea kwa 'amos@gmail.com' naona hii mwanzo kule\n        // siku-add this functionality on creating user to create profile for him.....\n        // also remember if you created the user in admin panel then there is no any\n        // logics executed to create profile\n\n        this.setState({\n          profile,\n          profile_pic: profile.profile_picture,\n        });\n\n        console.log(\"THIS IS THE PROFILE FOR YOU....\");\n        console.log(profile);\n        return;\n      }\n\n      if (output.length < 1) {\n        // a user can have cart but zero cart products..\n\n        let crack = await fetch(`${BACKEND_ORIGIN}/api/profile/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: user,\n          }),\n        });\n\n        // sometimes user anaweza akawa hana profile... ikareturn error like this\n        // { error: \"No profile by that user\"} then for this case it will be difficult\n        // to reference some data like name, picture and so on but my aim is when user is\n        // created to create the profile for him by any means.... In order to avoid this\n        // kind of issues... Hii imetokea kwa 'amos@gmail.com' naona hii mwanzo kule\n        // siku-add this functionality on creating user to create profile for him.....\n        // also remember if you created the user in admin panel then there is no any\n        // logics executed to create profile\n\n        let profile = await crack.json();\n\n        this.setState({\n          profile,\n          profile_pic: profile.profile_picture,\n        });\n\n        console.log(\"THIS IS THE PROFILE FOR YOU....\");\n        console.log(profile);\n        return;\n      }\n\n      let net_quantity = 0;\n      let net_price = 0;\n      for (let out of output) {\n        net_quantity = out.quantity + net_quantity;\n        net_price = out.subTotal + net_price;\n      }\n\n      this.setState({\n        cartproducts: output.reverse(),\n        net_price: net_price,\n        net_quantity: net_quantity,\n      });\n\n      let crack = await fetch(`${BACKEND_ORIGIN}/api/profile/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          id: user,\n        }),\n      });\n\n      let profile = await crack.json();\n\n      this.setState({\n        profile,\n        profile_pic: profile.profile_picture,\n      });\n\n      console.log(\"THIS IS THE PROFILE FOR YOU....\");\n      console.log(profile);\n    } catch (InvalidTokenError) {\n      // so this will only capture the InvalidTokenError which is caused by using already expired-token because and I said automatically when\n      // we made request to the jwd to decode it will return error that our token is already expired and by default as we coded it will update\n      // our localstorage to look like >>> authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n\n      console.log(InvalidTokenError.message);\n      console.log(\n        \"Invalid token specified since, when the token is expired the jwt automatically change your storage and it ill look like this\"\n      );\n      // authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n      this.setState({\n        isAunthenticated: false,\n      });\n    }\n  };\n\n  edit = () => {\n    this.profile.current.style.display = \"none\";\n    this.cartSummary.current.style.display = \"none\";\n    this.notification.current.style.display = \"none\";\n    this.password.current.style.display = \"none\";\n    this.editProfile.current.style.display = \"block\";\n    this.updateUsername.current.value = this.state.profile.full_name\n  };\n\n  changePassword = async (e) => {\n    e.preventDefault();\n\n    \n    if (\n      this.state.password.trim().length === 0 ||\n      this.state.oldPassword.trim().length === 0\n    ) {\n      this.setState({\n        errorMessage: \"We don't accept empty field\",\n      });\n      this.success.current.style.display = \"none\";\n      this.err.current.style.display = \"block\";\n\n      this.showError = setTimeout(() => {\n        this.err.current.style.display = \"none\";\n      }, 5000);\n\n      return;\n    }\n\n    if (\n      this.state.password.trim().length > 6 &&\n      this.state.oldPassword.trim().length > 0\n    ) {\n      const response = await fetch(\n        `${BACKEND_ORIGIN}/api/change_password/`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: this.state.user_id,\n            password: this.state.password,\n            old: this.state.oldPassword,\n          }),\n        }\n      );\n\n      let data = await response.json();\n      console.log(\"This is the data from the server\");\n      console.log(data);\n\n      // show success\n\n      if (data.message) {\n        this.success.current.style.display = \"block\";\n        this.err.current.style.display = \"none\";\n\n        this.showSuccess = setTimeout(() => {\n          this.success.current.style.display = \"none\";\n        }, 5000);\n\n        this.inp.current.value = \"\";\n        this.inpOld.current.value = \"\";\n      } else {\n        // raise error that password change request failed....\n        console.log(\"I thinks you passed wrong old password\");\n        this.setState({\n          errorMessage:\n            \"Password change request failed, use correct credentials\",\n        });\n        this.success.current.style.display = \"none\";\n        this.err.current.style.display = \"block\";\n\n        this.showError = setTimeout(() => {\n          this.err.current.style.display = \"none\";\n        }, 5000);\n      }\n    } else {\n      // show fails message\n      console.log(\"Weak password\");\n      this.setState({\n        errorMessage: \"Use strong password\",\n      });\n      this.success.current.style.display = \"none\";\n      this.err.current.style.display = \"block\";\n\n      this.showError = setTimeout(() => {\n        this.err.current.style.display = \"none\";\n      }, 5000);\n    }\n  };\n\n  \n  async componentDidMount() {\n    this.executingTokenLogics();\n\n    this.executingTokenLogicsInterval = setInterval(\n      () => this.executingTokenLogics(),\n      1200000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.executingTokenLogics);\n    clearTimeout(this.success);\n    clearTimeout(this.showError);\n  }\n\n  \n\n  updateToken = async (refreshToken) => {\n    let response = await fetch(`${BACKEND_ORIGIN}/api/token/refresh/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ refresh: refreshToken }),\n    });\n\n    let data = await response.json();\n    localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  };\n\n  onLogout = (e) => {\n    e.preventDefault();\n    localStorage.removeItem('authTokens')\n    // window.location.reload();\n    Router.push('/')\n  }\n\n  render() {\n    return (\n      <NavBar isAunthenticated={this.state.isAunthenticated}>\n        <MediaQuery minWidth={900}>\n          {this.state.isAunthenticated ? (\n            <>\n              <p\n                style={{\n                  marginTop: \"10%\",\n                  fontWeight: \"bold\",\n                  color: \"blue\",\n                  textDecoration: \"underline\",\n                  cursor: \"pointer\",\n                }}\n\n                onClick ={this.onLogout}\n              >\n                logout\n              </p>\n              <div className={styles.pro}>\n                <Grid>\n                  <Grid.Column width={6}>\n                    <div className={styles.col1}>\n                      <p\n                        className={styles.para1}\n                        ref={this.para1}\n                        onClick={this.paraO}\n                      >\n                        <Icon size=\"large\" name=\"user circle\" />\n                        Profile\n                      </p>\n                      <p\n                        className={styles.para}\n                        ref={this.para2}\n                        onClick={this.paraT}\n                      >\n                        <Icon size=\"large\" name=\"shopping cart\" />\n                        My Cart\n                      </p>\n                      <p\n                        className={styles.para}\n                        ref={this.para3}\n                        onClick={this.paraTh}\n                      >\n                        <Icon size=\"large\" name=\"bell\" />\n                        Notifications\n                      </p>\n                      <p\n                        className={styles.para4}\n                        ref={this.para4}\n                        onClick={this.paraF}\n                      >\n                        <Icon size=\"large\" name=\"lock\" />\n                        Change Password\n                      </p>\n                    </div>\n                  </Grid.Column>\n\n                  <Grid.Column width={10}>\n                    <div className={styles.col2}>\n                      <div className={styles.profile} ref={this.profile}>\n                        <MediaQuery maxWidth={1000}>\n                          <img\n                            className={styles.wrapperImage}\n                            src={`${BACKEND_ORIGIN}${this.state.profile_pic}`}\n                            width={180}\n                            height={180}\n                          />\n                        </MediaQuery>\n                        <MediaQuery minWidth={1001}>\n                          <img\n                            className={styles.wrapperImage}\n                            src={`${BACKEND_ORIGIN}${this.state.profile_pic}`}\n                            width={200}\n                            height={200}\n                          />\n                        </MediaQuery>\n                        <MediaQuery minWidth={900} maxWidth={991}>\n                          <div className={styles.pos}>\n                            <div className={styles.nameWrapper}>\n                              <span className={styles.actualname1}></span>\n                              <span className={styles.actualValue}>\n                                {this.state.profile.full_name}\n                              </span>\n                              <hr className={styles.nl} />\n                            </div>\n                            <div className={styles.emailWrapper}>\n                              <span className={styles.mail}>\n                                <span className={styles.mvalue}>email: </span>\n                                <span className={styles.mname}>\n                                  {/* {this.state.profile.get_email.length > 25 ? (\n                                    this.state.profile.get_email.substr(0, 25) + '...'\n                                ): (\n                                    this.state.profile.get_email\n                                )} */}\n                                  {this.state.profile.get_email}\n                                </span>\n                              </span>\n                            </div>\n                            <div className={styles.catWrapper}>\n                              <span className={styles.mail}>\n                                <span className={styles.mvalue}>\n                                  category:{\" \"}\n                                </span>\n                                <span className={styles.mname}>customer</span>\n                              </span>\n                            </div>\n                            <div className={styles.orderWrapper}>\n                              {/* <span className={styles.mail}><span className={styles.mvalue}>Number of orders:</span><span className={styles.mname}>0</span></span> */}\n                            </div>\n                            <div className={styles.chName}>\n                              <span\n                                className={styles.changeName}\n                                onClick={this.edit}\n                              >\n                                Edit profile\n                              </span>\n                              {/* <span className={styles.changeName1}>Change image</span> */}\n                            </div>\n                          </div>\n                        </MediaQuery>\n                        <MediaQuery minWidth={992} maxWidth={1200}>\n                          <div className={styles.pos} style={{ left: \"40%\" }}>\n                            <div className={styles.nameWrapper}>\n                              <span className={styles.actualname1}></span>\n                              <span className={styles.actualValue}>\n                                {this.state.profile.full_name}\n                              </span>\n                              <hr className={styles.nl} />\n                            </div>\n                            <div className={styles.emailWrapper}>\n                              <span className={styles.mail}>\n                                <span className={styles.mvalue}>email: </span>\n                                <span className={styles.mname}>\n                                  {this.state.profile.get_email}\n                                </span>\n                              </span>\n                            </div>\n                            <div className={styles.catWrapper}>\n                              <span className={styles.mail}>\n                                <span className={styles.mvalue}>\n                                  category:{\" \"}\n                                </span>\n                                <span className={styles.mname}>customer</span>\n                              </span>\n                            </div>\n                            <div className={styles.orderWrapper}>\n                              {/* <span className={styles.mail}><span className={styles.mvalue}>Number of orders:</span><span className={styles.mname}>0</span></span> */}\n                            </div>\n                            <div className={styles.chName}>\n                              <span\n                                className={styles.changeName}\n                                onClick={this.edit}\n                              >\n                                Edit profile\n                              </span>\n                              {/* <span className={styles.changeName1}>Change image</span> */}\n                            </div>\n                          </div>\n                        </MediaQuery>\n\n                        <MediaQuery minWidth={1201}>\n                          <div className={styles.pos} style={{ left: \"33%\" }}>\n                            <div className={styles.nameWrapper}>\n                              <span className={styles.actualname1}></span>\n                              <span className={styles.actualValue}>\n                                {this.state.profile.full_name}\n                              </span>\n                              <hr className={styles.nl} />\n                            </div>\n                            <div className={styles.emailWrapper}>\n                              <span className={styles.mail}>\n                                <span className={styles.mvalue}>email: </span>\n                                <span className={styles.mname}>\n                                  {this.state.profile.get_email}\n                                </span>\n                              </span>\n                            </div>\n                            <div className={styles.catWrapper}>\n                              <span className={styles.mail}>\n                                <span className={styles.mvalue}>\n                                  category:{\" \"}\n                                </span>\n                                <span className={styles.mname}>customer</span>\n                              </span>\n                            </div>\n                            <div className={styles.orderWrapper}>\n                              {/* <span className={styles.mail}><span className={styles.mvalue}>Number of orders:</span><span className={styles.mname}>0</span></span> */}\n                            </div>\n                            <div className={styles.chName}>\n                              <span\n                                className={styles.changeName}\n                                onClick={this.edit}\n                              >\n                                Edit profile\n                              </span>\n                              {/* <span className={styles.changeName1}>Change image</span> */}\n                            </div>\n                          </div>\n                        </MediaQuery>\n                      </div>\n\n                      <div className={styles.cartSum} ref={this.cartSummary}>\n                        {this.state.cartproducts.length > 0 ? (\n                          <div>\n                            <Header as=\"h2\" color=\"grey\">\n                              <Icon name=\"tags\" size=\"tiny\" />\n                              <Header.Content>Cart summary.</Header.Content>\n                            </Header>\n                            <hr className={styles.hl} />\n                            <div className={styles.itemsWrapper}>\n                              <div className={styles.cs}>\n                                <span className={styles.tit}>\n                                  Number of items:\n                                </span>\n                                <span className={this.state.nq}>\n                                  {this.state.net_quantity}\n                                </span>\n                              </div>\n                              <div className={styles.cs1}>\n                                <span className={styles.tit1}>\n                                  Total Price:\n                                </span>\n                                <span\n                                  className={this.state.np}\n                                >{`${new Intl.NumberFormat(\"en-US\", {\n                                  style: \"currency\",\n                                  currency: \"Tsh\",\n                                  minimumFractionDigits: 0,\n                                }).format(this.state.net_price)}/=`}</span>\n                              </div>\n                            </div>\n                          </div>\n                        ) : (\n                          <div>\n                            <Header as=\"h2\" color=\"grey\">\n                              <Icon name=\"tags\" size=\"tiny\" />\n                              <Header.Content>Cart summary.</Header.Content>\n                            </Header>\n                            <hr className={styles.hl} />\n                            <div className={styles.itemsWrapper}>\n                              <Header as=\"h4\" color=\"grey\">\n                                <Header.Content>\n                                  Your cart appear to be empty, add some\n                                  products in your cart.\n                                </Header.Content>\n                              </Header>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n\n                      <div\n                        className={styles.notiWrapper}\n                        ref={this.notification}\n                      >\n                        <Header as=\"h2\" color=\"grey\">\n                          <Icon name=\"tags\" size=\"tiny\" />\n                          <Header.Content>Notification center</Header.Content>\n                        </Header>\n                        <hr className={styles.hl} />\n                        <div className={styles.itemsWrapper}>\n                          <Header as=\"h4\" color=\"grey\">\n                            <Icon name=\"bars\" />\n                            <Header.Content>\n                              Currenly you have no any notification.\n                            </Header.Content>\n                          </Header>\n                        </div>\n                      </div>\n\n                      <div className={styles.passWrapper} ref={this.password}>\n                        <Header as=\"h2\" color=\"grey\">\n                          <Icon name=\"tags\" size=\"tiny\" />\n                          <Header.Content>Change password.</Header.Content>\n                        </Header>\n                        <hr className={styles.hl} />\n                        <form className={styles.passForm}>\n                          <label className={styles.lab}>Old password</label>\n                          <br />\n                          <input\n                            className={styles.inp}\n                            type=\"password\"\n                            ref={this.inpOld}\n                            onChange={(event) =>\n                              this.setState({ oldPassword: event.target.value })\n                            }\n                          />\n                          <br />\n                          <label className={styles.lab1}>New password</label>\n                          <br />\n                          <input\n                            className={styles.inp}\n                            type=\"password\"\n                            ref={this.inp}\n                            onChange={(event) =>\n                              this.setState({ password: event.target.value })\n                            }\n                          />{\" \"}\n                          <br />\n                          <div className={styles.success} ref={this.success}>\n                            <img\n                              src=\"../static/images/check-mark.png\"\n                              width={12}\n                            />\n                            <span className={styles.neno}>\n                              Password changes successful\n                            </span>\n                          </div>\n                          <div className={styles.error} ref={this.err}>\n                            <img\n                              src=\"../static/images/warning.png\"\n                              width={12}\n                            />\n                            <span className={styles.neno1}>\n                              {this.state.errorMessage}\n                            </span>\n                          </div>\n                          <button\n                            className={styles.btn}\n                            type=\"submit\"\n                            onClick={this.changePassword}\n                          >\n                            Submit\n                          </button>\n                        </form>\n                      </div>\n\n                      <div\n                        className={styles.editProfile}\n                        ref={this.editProfile}\n                      >\n                        <Header as=\"h2\" color=\"grey\">\n                          <Icon name=\"edit outline\" size=\"tiny\" />\n                          <Header.Content>Edit Profile</Header.Content>\n                        </Header>\n                        <hr className={styles.hl} />\n                        <Grid>\n                          <Grid.Column width={8}>\n                            <div className={styles.ediProfileWrapper}>\n                              <label className={styles.jina}>USERNAME:</label>\n                              <br />\n                              <input\n                                ref={this.updateUsername}\n                                className={styles.jinaInp}\n                                onChange={(event) =>\n                                  this.setState({\n                                    username: event.target.value,\n                                  })\n                                }\n                              />\n                            </div>\n                          </Grid.Column>\n                          <Grid.Column width={8}>\n                            <div className={styles.ediProfileWrapper}>\n                              <label className={styles.jina}>\n                                CHANGE AVATAR:\n                              </label>\n                              <br />\n                              {/* // YOU SHOULD GIVE THE CREDI TO THIS VIDEO\n                                                // https://www.youtube.com/watch?v=BPUgM1Ig4Po \n                                                 Ukiangalia hii video utagundua jamaa jinsi alivyofanya\n                                                 validation ya image using accept=images/* ... For more angalia\n                                                 hiyo video.....    */}\n                              <input\n                                accept=\"images/*\"\n                                id=\"upload\"\n                                className={styles.upload}\n                                type=\"file\"\n                                onChange={this.preview}\n                              />\n                              <label\n                                ref={this.actualPreview}\n                                htmlFor=\"upload\"\n                                className={styles.chan}\n                                style={{\n                                  backgroundImage: `${BACKEND_ORIGIN}${this.state.profile.profile_picture})`,\n                                  backgroundSize: \"100% 100%\",\n                                  backgroundRepeat: \"no-repeat\",\n                                }}\n                              >\n                                <img\n                                  src=\"../static/images/imag.png\"\n                                  width={25}\n                                  height={25}\n                                />\n                              </label>\n                            </div>\n                          </Grid.Column>\n                          <button\n                            type=\"submit\"\n                            className={styles.sub}\n                            onClick={this.editPro}\n                          >\n                            Save\n                          </button>\n                        </Grid>\n                      </div>\n                    </div>\n                  </Grid.Column>\n                </Grid>\n              </div>\n            </>\n          ) : (\n            <div style={{ paddingTop: \"15%\" }}>\n              <MediaQuery maxWidth={899}>\n                <div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      width: \"100%\",\n\n                      justifyContent: \"center\",\n                      overflowX: \"hidden\",\n                    }}\n                  >\n                    <img\n                      src=\"../static/images/demon.gif\"\n                      width={200}\n                      height={200}\n                    />\n                  </div>\n                  <div>\n                    <p\n                      style={{\n                        textAlign: \"center\",\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                        fontSize: \"110%\",\n                      }}\n                    >\n                      <MediaQuery maxWidth={450}>\n                        We don't accept anonymous user to view profile.\n                        Login/Register here{\" \"}\n                      </MediaQuery>\n                      <MediaQuery minWidth={451}>\n                        We don't accept anonymous user to view profile.\n                        <br /> Login/Register here{\" \"}\n                      </MediaQuery>\n                      <br />\n                      <button\n                        style={{\n                          marginTop: \"1%\",\n                          fontWeight: \"bold\",\n                        }}\n                        className=\"btn btn-warning\"\n                        onClick={() => Router.push(\"/jisajili\")}\n                      >\n                        Register\n                      </button>\n                      <button\n                        style={{\n                          marginLeft: \"5%\",\n                          marginTop: \"1%\",\n                          fontWeight: \"bold\",\n                        }}\n                        className=\"btn btn-info\"\n                        onClick={() => Router.push(\"/login\")}\n                      >\n                        Login\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              </MediaQuery>\n\n              <MediaQuery minWidth={900} maxWidth={1199}>\n                <div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      width: \"100%\",\n\n                      justifyContent: \"center\",\n                      overflowX: \"hidden\",\n                    }}\n                  >\n                    <img\n                      src=\"../static/images/demon.gif\"\n                      width={200}\n                      height={200}\n                    />\n                  </div>\n                  <div>\n                    <p\n                      style={{\n                        textAlign: \"center\",\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                        fontSize: \"120%\",\n                      }}\n                    >\n                      We don't accept anonymous user to view profile. <br />{\" \"}\n                      Login/Register here <br />\n                      <button\n                        style={{\n                          marginTop: \"1%\",\n                          fontWeight: \"bold\",\n                        }}\n                        className=\"btn btn-info\"\n                        onClick={() => Router.push(\"/register\")}\n                      >\n                        Sign in\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              </MediaQuery>\n              <MediaQuery minWidth={1200}>\n                <div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      width: \"100%\",\n\n                      justifyContent: \"center\",\n                      overflowX: \"hidden\",\n                    }}\n                  >\n                    <img\n                      src=\"../static/images/demon.gif\"\n                      width={300}\n                      height={300}\n                    />\n                  </div>\n                  <div>\n                    <p\n                      style={{\n                        textAlign: \"center\",\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                        fontSize: \"130%\",\n                      }}\n                    >\n                      We don't accept anonymous user to view profile. <br />{\" \"}\n                      Login/Register here <br />\n                      <button\n                        style={{\n                          marginTop: \"1%\",\n                          fontWeight: \"bold\",\n                        }}\n                        className=\"btn btn-info\"\n                        onClick={() => Router.push(\"/register\")}\n                      >\n                        Sign in\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              </MediaQuery>\n              {/* <Header\n                color=\"grey\"\n                textAlign=\"center\"\n                as=\"h1\"\n                content=\"You should login to view your profile...\"\n              /> */}\n            </div>\n          )}\n        </MediaQuery>\n      </NavBar>\n    );\n  }\n}\n\nexport default Profile;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/register.js",[],[],"/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/reset.js",["291"],[],"import React, { Component } from \"react\";\nimport Head from \"next/head\";\nimport dynamic from \"next/dynamic\";\nimport Router from \"next/router\";\nimport BACKEND_ORIGIN from \"../utils/domain\";\nimport { Message } from \"semantic-ui-react\";\n\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n\nclass ResetPassword extends Component {\n  state = {\n    email: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.succ = React.createRef();\n    this.emailInp = React.createRef();\n  }\n\n  reset = async (e) => {\n    e.preventDefault();\n\n    this.succ.current.style.display = \"block\";\n    this.emailInp.current.value = \"\";\n    this.timeout = setTimeout(\n      () => (this.succ.current.style.display = \"none\"),\n      5000\n    );\n    const response = await fetch(`${BACKEND_ORIGIN}/api/password-reset/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email: this.state.email,\n      }),\n    });\n\n    const json = await response.json();\n\n    console.log(json);\n  };\n\n  componentWillUnmount() {\n      clearTimeout(this.timeout)\n  }\n\n  render() {\n    return (\n      <>\n        <MediaQuery minWidth={200} maxWidth={400}>\n          <>\n            <Head>\n              <title>PERSONALYZER</title>\n              <link\n                rel=\"stylesheet\"\n                href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                crossorigin=\"anonymous\"\n              />\n              <link\n                rel=\"stylesheet\"\n                href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n              ></link>\n              <meta\n                name=\"viewport\"\n                content=\"width=device-width, initial-scale=1.0\"\n              />\n            </Head>\n            <div style={{ paddingTop: \"20%\" }}>\n              <p\n                style={{\n                  textAlign: \"center\",\n                  color: \"grey\",\n                  fontSize: \"120%\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Enter your email to reset your password.\n              </p>\n              <hr />\n              <div style={{ width: \"70%\", margin: \"auto\", padding: \"auto\" }}>\n                <form>\n                  <label style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                    Email:\n                  </label>\n                  <br />\n                  <input\n                    type=\"email\"\n                    style={{\n                      width: \"100%\",\n                      height: \"35px\",\n                      border: \"2px solid grey\",\n                    }}\n                    ref={this.emailInp}\n                    onChange={(e) => this.setState({ email: e.target.value })}\n                  />{\" \"}\n                  <br />\n                  <div\n                    ref={this.succ}\n                    style={{\n                      fontWeight: \"bold\",\n                      marginTop: \"2%\",\n                      display: \"none\",\n                    }}\n                  >\n                    <Message success>\n                      The link to reset your password have been sent to your\n                      email.\n                    </Message>\n                  </div>\n                  <button\n                    style={{\n                      marginTop: \"3%\",\n                      width: \"100%\",\n                      border: \"2px solid grey\",\n                      padding: \"2%\",\n                      background: \"#eeeee4\",\n                      color: \"grey\",\n                      fontWeight: \"bold\",\n                    }}\n                    type=\"submit\"\n                    onClick={this.reset}\n                  >\n                    Reset Password\n                  </button>\n                </form>\n              </div>\n            </div>\n          </>\n        </MediaQuery>\n\n\n        <MediaQuery minWidth={401} maxWidth={700}>\n          <>\n            <Head>\n              <title>PERSONALYZER</title>\n              <link\n                rel=\"stylesheet\"\n                href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                crossorigin=\"anonymous\"\n              />\n              <link\n                rel=\"stylesheet\"\n                href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n              ></link>\n              <meta\n                name=\"viewport\"\n                content=\"width=device-width, initial-scale=1.0\"\n              />\n            </Head>\n            <div style={{ paddingTop: \"12%\" }}>\n              <p\n                style={{\n                  textAlign: \"center\",\n                  color: \"grey\",\n                  fontSize: \"120%\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Enter your email to reset your password.\n              </p>\n              <hr />\n              <div style={{ width: \"50%\", margin: \"auto\", padding: \"auto\" }}>\n                <form>\n                  <label style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                    Email:\n                  </label>\n                  <br />\n                  <input\n                    type=\"email\"\n                    style={{\n                      width: \"100%\",\n                      height: \"35px\",\n                      border: \"2px solid grey\",\n                    }}\n                    ref={this.emailInp}\n                    onChange={(e) => this.setState({ email: e.target.value })}\n                  />{\" \"}\n                  <br />\n                  <div\n                    ref={this.succ}\n                    style={{\n                      fontWeight: \"bold\",\n                      marginTop: \"2%\",\n                      display: \"none\",\n                    }}\n                  >\n                    <Message success>\n                      The link to reset your password have been sent to your\n                      email.\n                    </Message>\n                  </div>\n                  <button\n                    style={{\n                      marginTop: \"3%\",\n                      width: \"100%\",\n                      border: \"2px solid grey\",\n                      padding: \"2%\",\n                      background: \"#eeeee4\",\n                      color: \"grey\",\n                      fontWeight: \"bold\",\n                    }}\n                    type=\"submit\"\n                    onClick={this.reset}\n                  >\n                    Reset Password\n                  </button>\n                </form>\n              </div>\n            </div>\n          </>\n        </MediaQuery>\n\n\n\n        <MediaQuery minWidth={701} maxWidth={900}>\n          <>\n            <Head>\n              <title>PERSONALYZER</title>\n              <link\n                rel=\"stylesheet\"\n                href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                crossorigin=\"anonymous\"\n              />\n              <link\n                rel=\"stylesheet\"\n                href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n              ></link>\n              <meta\n                name=\"viewport\"\n                content=\"width=device-width, initial-scale=1.0\"\n              />\n            </Head>\n            <div style={{ paddingTop: \"9%\" }}>\n              <p\n                style={{\n                  textAlign: \"center\",\n                  color: \"grey\",\n                  fontSize: \"120%\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Enter your email to reset your password.\n              </p>\n              <hr />\n              <div style={{ width: \"40%\", margin: \"auto\", padding: \"auto\" }}>\n                <form>\n                  <label style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                    Email:\n                  </label>\n                  <br />\n                  <input\n                    type=\"email\"\n                    style={{\n                      width: \"100%\",\n                      height: \"35px\",\n                      border: \"2px solid grey\",\n                    }}\n                    ref={this.emailInp}\n                    onChange={(e) => this.setState({ email: e.target.value })}\n                  />{\" \"}\n                  <br />\n                  <div\n                    ref={this.succ}\n                    style={{\n                      fontWeight: \"bold\",\n                      marginTop: \"2%\",\n                      display: \"none\",\n                    }}\n                  >\n                    <Message success>\n                      The link to reset your password have been sent to your\n                      email.\n                    </Message>\n                  </div>\n                  <button\n                    style={{\n                      marginTop: \"3%\",\n                      width: \"100%\",\n                      border: \"2px solid grey\",\n                      padding: \"2%\",\n                      background: \"#eeeee4\",\n                      color: \"grey\",\n                      fontWeight: \"bold\",\n                    }}\n                    type=\"submit\"\n                    onClick={this.reset}\n                  >\n                    Reset Password\n                  </button>\n                </form>\n              </div>\n            </div>\n          </>\n        </MediaQuery>\n\n\n\n        <MediaQuery minWidth={901} maxWidth={1500}>\n          <>\n            <Head>\n              <title>PERSONALYZER</title>\n              <link\n                rel=\"stylesheet\"\n                href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                crossorigin=\"anonymous\"\n              />\n              <link\n                rel=\"stylesheet\"\n                href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n              ></link>\n              <meta\n                name=\"viewport\"\n                content=\"width=device-width, initial-scale=1.0\"\n              />\n            </Head>\n            <div style={{ paddingTop: \"5%\" }}>\n              <p\n                style={{\n                  textAlign: \"center\",\n                  color: \"grey\",\n                  fontSize: \"120%\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Enter your email to reset your password.\n              </p>\n              <hr />\n              <div style={{ width: \"30%\", margin: \"auto\", padding: \"auto\" }}>\n                <form>\n                  <label style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                    Email:\n                  </label>\n                  <br />\n                  <input\n                    type=\"email\"\n                    style={{\n                      width: \"100%\",\n                      height: \"35px\",\n                      border: \"2px solid grey\",\n                    }}\n                    ref={this.emailInp}\n                    onChange={(e) => this.setState({ email: e.target.value })}\n                  />{\" \"}\n                  <br />\n                  <div\n                    ref={this.succ}\n                    style={{\n                      fontWeight: \"bold\",\n                      marginTop: \"2%\",\n                      display: \"none\",\n                    }}\n                  >\n                    <Message success>\n                      The link to reset your password have been sent to your\n                      email.\n                    </Message>\n                  </div>\n                  <button\n                    style={{\n                      marginTop: \"3%\",\n                      width: \"100%\",\n                      border: \"2px solid grey\",\n                      padding: \"2%\",\n                      background: \"#eeeee4\",\n                      color: \"grey\",\n                      fontWeight: \"bold\",\n                    }}\n                    type=\"submit\"\n                    onClick={this.reset}\n                  >\n                    Reset Password\n                  </button>\n                </form>\n              </div>\n            </div>\n          </>\n        </MediaQuery>\n\n        <MediaQuery minWidth={1501} maxWidth={2000}>\n          <>\n            <Head>\n              <title>PERSONALYZER</title>\n              <link\n                rel=\"stylesheet\"\n                href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                crossorigin=\"anonymous\"\n              />\n              <link\n                rel=\"stylesheet\"\n                href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n              ></link>\n              <meta\n                name=\"viewport\"\n                content=\"width=device-width, initial-scale=1.0\"\n              />\n            </Head>\n            <div style={{ paddingTop: \"5%\" }}>\n              <p\n                style={{\n                  textAlign: \"center\",\n                  color: \"grey\",\n                  fontSize: \"120%\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Enter your email to reset your password.\n              </p>\n              <hr />\n              <div style={{ width: \"20%\", margin: \"auto\", padding: \"auto\" }}>\n                <form>\n                  <label style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                    Email:\n                  </label>\n                  <br />\n                  <input\n                    type=\"email\"\n                    style={{\n                      width: \"100%\",\n                      height: \"35px\",\n                      border: \"2px solid grey\",\n                    }}\n                    ref={this.emailInp}\n                    onChange={(e) => this.setState({ email: e.target.value })}\n                  />{\" \"}\n                  <br />\n                  <div\n                    ref={this.succ}\n                    style={{\n                      fontWeight: \"bold\",\n                      marginTop: \"2%\",\n                      display: \"none\",\n                    }}\n                  >\n                    <Message success>\n                      The link to reset your password have been sent to your\n                      email.\n                    </Message>\n                  </div>\n                  <button\n                    style={{\n                      marginTop: \"3%\",\n                      width: \"100%\",\n                      border: \"2px solid grey\",\n                      padding: \"2%\",\n                      background: \"#eeeee4\",\n                      color: \"grey\",\n                      fontWeight: \"bold\",\n                    }}\n                    type=\"submit\"\n                    onClick={this.reset}\n                  >\n                    Reset Password\n                  </button>\n                </form>\n              </div>\n            </div>\n          </>\n        </MediaQuery>\n\n\n        <MediaQuery minWidth={2001}>\n          <>\n            <Head>\n              <title>PERSONALYZER</title>\n              <link\n                rel=\"stylesheet\"\n                href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                crossorigin=\"anonymous\"\n              />\n              <link\n                rel=\"stylesheet\"\n                href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n              ></link>\n              <meta\n                name=\"viewport\"\n                content=\"width=device-width, initial-scale=1.0\"\n              />\n            </Head>\n            <div style={{ paddingTop: \"3%\" }}>\n              <p\n                style={{\n                  textAlign: \"center\",\n                  color: \"grey\",\n                  fontSize: \"130%\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Enter your email to reset your password.\n              </p>\n              <hr />\n              <div style={{ width: \"16%\", margin: \"auto\", padding: \"auto\" }}>\n                <form>\n                  <label style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                    Email:\n                  </label>\n                  <br />\n                  <input\n                    type=\"email\"\n                    style={{\n                      width: \"100%\",\n                      height: \"35px\",\n                      border: \"2px solid grey\",\n                    }}\n                    ref={this.emailInp}\n                    onChange={(e) => this.setState({ email: e.target.value })}\n                  />{\" \"}\n                  <br />\n                  <div\n                    ref={this.succ}\n                    style={{\n                      fontWeight: \"bold\",\n                      marginTop: \"2%\",\n                      display: \"none\",\n                    }}\n                  >\n                    <Message success>\n                      The link to reset your password have been sent to your\n                      email.\n                    </Message>\n                  </div>\n                  <button\n                    style={{\n                      marginTop: \"3%\",\n                      width: \"100%\",\n                      border: \"2px solid grey\",\n                      padding: \"2%\",\n                      background: \"#eeeee4\",\n                      color: \"grey\",\n                      fontWeight: \"bold\",\n                    }}\n                    type=\"submit\"\n                    onClick={this.reset}\n                  >\n                    Reset Password\n                  </button>\n                </form>\n              </div>\n            </div>\n          </>\n        </MediaQuery>\n      </>\n    );\n  }\n}\n\nexport default ResetPassword;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/resetConfirm.js",["292"],[],"import React, { Component } from \"react\";\nimport Head from \"next/head\";\nimport dynamic from \"next/dynamic\";\nimport Router from \"next/router\";\nimport { Message, Button } from \"semantic-ui-react\";\n\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n\nclass ResetConfirm extends Component {\n  state = {\n    password: \"\",\n    errorMessage: \"\",\n    loading: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.succ = React.createRef();\n    this.err = React.createRef();\n    this.passInp = React.createRef();\n  }\n\n  confirmNewPassword = async (e) => {\n    this.setState({\n      loading: true,\n    });\n    e.preventDefault();\n    console.log(this.state.password);\n\n    if (this.state.password.length === 0) {\n      this.setState({\n        errorMessage: \"Error! We don't accept empty field.\",\n      });\n\n      this.passInp.current.value = \"\";\n      this.setState({\n        loading: false,\n      });\n      this.setState({\n        password: \"\",\n      });\n      this.err.current.style.display = \"block\";\n\n      this.timeout = setTimeout(() => {\n        this.err.current.style.display = \"none\";\n      }, 5000);\n\n      return;\n    }\n\n    if (this.state.password.trim().length < 6) {\n      // then we have weak password\n      this.setState({\n        errorMessage: \"Error! Weak password, must have more than 6 characters\",\n      });\n      this.passInp.current.value = \"\";\n      this.setState({\n        loading: false,\n      });\n      this.err.current.style.display = \"block\";\n      this.setState({\n        password: \"\",\n      });\n      this.timeout = setTimeout(() => {\n        this.err.current.style.display = \"none\";\n      }, 5000);\n\n      return;\n    }\n\n    // everything is good lets now send the new password\n    const response = await fetch(`http://${this.props.api}`, {\n        method: 'PATCH',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            password: this.state.password\n        })\n    });\n\n\n    if (response.status !== 200) {\n       \n        console.log('something went wrong')\n        this.setState({\n            errorMessage: 'Bad request!, Fails to change password'\n        })\n        this.succ.current.style.display = 'none'\n        this.err.current.style.display = 'block'\n\n\n        this.passInp.current.value = ''\n        this.setState({\n            loading: false,\n            password: ''\n        });\n\n\n        this.timeout = setTimeout(() => {\n            this.err.current.style.display = 'none'\n        })\n        return;\n    }\n\n    const json = await response.json();\n\n\n    // otherwise password have been changed.\n    this.passInp.current.value = ''\n    this.setState({\n        loading: false,\n        password: ''\n    })\n    this.err.current.style.display = 'none'\n    this.succ.current.style.display = 'block'\n\n    \n  };\n\n  static async getInitialProps(props) {\n    const { api } = props.query;\n\n    console.log(api);\n    return { api };\n  }\n\n  render() {\n    return (\n      <>\n        {/* <div>{this.props.api}</div> */}\n\n        <MediaQuery minWidth={200} maxWidth={400}>\n          <Head>\n            <title>PERSONALYZER</title>\n            <link\n              rel=\"stylesheet\"\n              href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n              integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n              crossorigin=\"anonymous\"\n            />\n            <link\n              rel=\"stylesheet\"\n              href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n            ></link>\n            <meta\n              name=\"viewport\"\n              content=\"width=device-width, initial-scale=1.0\"\n            />\n          </Head>\n          <div style={{ paddingTop: \"20%\" }}>\n            <p\n              style={{\n                textAlign: \"center\",\n                color: \"grey\",\n                fontSize: \"120%\",\n                fontWeight: \"bold\",\n              }}\n            >\n              Enter new password.\n            </p>\n            <hr />\n            <div style={{ width: \"70%\", margin: \"auto\", padding: \"auto\" }}>\n              <form>\n                <label style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                  New password:\n                </label>\n                <br />\n                <input\n                  type=\"password\"\n                  style={{\n                    width: \"100%\",\n                    height: \"35px\",\n                    border: \"2px solid grey\",\n                  }}\n                  ref={this.passInp}\n                  onChange={(e) => this.setState({ password: e.target.value })}\n                />{\" \"}\n                <br />\n                <div\n                  ref={this.succ}\n                  style={{\n                    fontWeight: \"bold\",\n                    marginTop: \"2%\",\n                    display: \"none\",\n                  }}\n                >\n                  <Message success>\n                    Password has been changed click{\" \"}\n                    <span\n                      style={{ textDecoration: \"underline\", cursor: \"pointer\" }}\n                      onClick={() => Router.push('/login')}\n                    >\n                      here\n                    </span>{\" \"}\n                    to login\n                  </Message>\n                </div>\n                <div\n                  ref={this.err}\n                  style={{\n                    fontWeight: \"bold\",\n                    marginTop: \"2%\",\n                    display: \"none\",\n                  }}\n                >\n                  <Message error>{this.state.errorMessage}</Message>\n                </div>\n               \n                <div style={{marginTop: '3%'}}>\n                <Button loading={this.state.loading} onClick={this.confirmNewPassword} fluid primary content='Confirm' />\n                </div>\n              </form>\n            </div>\n          </div>\n        </MediaQuery>\n\n        <MediaQuery minWidth={401} maxWidth={700}>\n          <Head>\n            <title>PERSONALYZER</title>\n            <link\n              rel=\"stylesheet\"\n              href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n              integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n              crossorigin=\"anonymous\"\n            />\n            <link\n              rel=\"stylesheet\"\n              href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n            ></link>\n            <meta\n              name=\"viewport\"\n              content=\"width=device-width, initial-scale=1.0\"\n            />\n          </Head>\n          <div style={{ paddingTop: \"12%\" }}>\n            <p\n              style={{\n                textAlign: \"center\",\n                color: \"grey\",\n                fontSize: \"120%\",\n                fontWeight: \"bold\",\n              }}\n            >\n              Enter new password.\n            </p>\n            <hr />\n            <div style={{ width: \"50%\", margin: \"auto\", padding: \"auto\" }}>\n              <form>\n                <label style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                  New password:\n                </label>\n                <br />\n                <input\n                  type=\"password\"\n                  style={{\n                    width: \"100%\",\n                    height: \"35px\",\n                    border: \"2px solid grey\",\n                  }}\n                  ref={this.passInp}\n                  onChange={(e) => this.setState({ password: e.target.value })}\n                />{\" \"}\n                <br />\n                <div\n                  ref={this.succ}\n                  style={{\n                    fontWeight: \"bold\",\n                    marginTop: \"2%\",\n                    display: \"none\",\n                  }}\n                >\n                  <Message success>\n                    Password has been changed click{\" \"}\n                    <span\n                      style={{ textDecoration: \"underline\", cursor: \"pointer\" }}\n                      onClick={() => Router.push('/login')}\n                    >\n                      here\n                    </span>{\" \"}\n                    to login\n                  </Message>\n                </div>\n                <div\n                  ref={this.err}\n                  style={{\n                    fontWeight: \"bold\",\n                    marginTop: \"2%\",\n                    display: \"none\",\n                  }}\n                >\n                  <Message error>{this.state.errorMessage}</Message>\n                </div>\n               \n                <div style={{marginTop: '3%'}}>\n                <Button loading={this.state.loading} onClick={this.confirmNewPassword} fluid primary content='Confirm' />\n                </div>\n              </form>\n            </div>\n          </div>\n        </MediaQuery>\n\n\n        <MediaQuery minWidth={701} maxWidth={899}>\n          <Head>\n            <title>PERSONALYZER</title>\n            <link\n              rel=\"stylesheet\"\n              href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n              integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n              crossorigin=\"anonymous\"\n            />\n            <link\n              rel=\"stylesheet\"\n              href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n            ></link>\n            <meta\n              name=\"viewport\"\n              content=\"width=device-width, initial-scale=1.0\"\n            />\n          </Head>\n          <div style={{ paddingTop: \"7%\" }}>\n            <p\n              style={{\n                textAlign: \"center\",\n                color: \"grey\",\n                fontSize: \"120%\",\n                fontWeight: \"bold\",\n              }}\n            >\n              Enter new password.\n            </p>\n            <hr />\n            <div style={{ width: \"40%\", margin: \"auto\", padding: \"auto\" }}>\n              <form>\n                <label style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                  New password:\n                </label>\n                <br />\n                <input\n                  type=\"password\"\n                  style={{\n                    width: \"100%\",\n                    height: \"35px\",\n                    border: \"2px solid grey\",\n                  }}\n                  ref={this.passInp}\n                  onChange={(e) => this.setState({ password: e.target.value })}\n                />{\" \"}\n                <br />\n                <div\n                  ref={this.succ}\n                  style={{\n                    fontWeight: \"bold\",\n                    marginTop: \"2%\",\n                    display: \"none\",\n                  }}\n                >\n                  <Message success>\n                    Password has been changed click{\" \"}\n                    <span\n                      style={{ textDecoration: \"underline\", cursor: \"pointer\" }}\n                      onClick={() => Router.push('/login')}\n                    >\n                      here\n                    </span>{\" \"}\n                    to login\n                  </Message>\n                </div>\n                <div\n                  ref={this.err}\n                  style={{\n                    fontWeight: \"bold\",\n                    marginTop: \"2%\",\n                    display: \"none\",\n                  }}\n                >\n                  <Message error>{this.state.errorMessage}</Message>\n                </div>\n               \n                <div style={{marginTop: '3%'}}>\n                <Button loading={this.state.loading} onClick={this.confirmNewPassword} fluid primary content='Confirm' />\n                </div>\n              </form>\n            </div>\n          </div>\n        </MediaQuery>\n\n\n        <MediaQuery minWidth={901} maxWidth={1500}>\n          <Head>\n            <title>PERSONALYZER</title>\n            <link\n              rel=\"stylesheet\"\n              href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n              integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n              crossorigin=\"anonymous\"\n            />\n            <link\n              rel=\"stylesheet\"\n              href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n            ></link>\n            <meta\n              name=\"viewport\"\n              content=\"width=device-width, initial-scale=1.0\"\n            />\n          </Head>\n          <div style={{ paddingTop: \"5%\" }}>\n            <p\n              style={{\n                textAlign: \"center\",\n                color: \"grey\",\n                fontSize: \"120%\",\n                fontWeight: \"bold\",\n              }}\n            >\n              Enter new password.\n            </p>\n            <hr />\n            <div style={{ width: \"30%\", margin: \"auto\", padding: \"auto\" }}>\n              <form>\n                <label style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                  New password:\n                </label>\n                <br />\n                <input\n                  type=\"password\"\n                  style={{\n                    width: \"100%\",\n                    height: \"35px\",\n                    border: \"2px solid grey\",\n                  }}\n                  ref={this.passInp}\n                  onChange={(e) => this.setState({ password: e.target.value })}\n                />{\" \"}\n                <br />\n                <div\n                  ref={this.succ}\n                  style={{\n                    fontWeight: \"bold\",\n                    marginTop: \"2%\",\n                    display: \"none\",\n                  }}\n                >\n                  <Message success>\n                    Password has been changed click{\" \"}\n                    <span\n                      style={{ textDecoration: \"underline\", cursor: \"pointer\" }}\n                      onClick={() => Router.push('/login')}\n                    >\n                      here\n                    </span>{\" \"}\n                    to login\n                  </Message>\n                </div>\n                <div\n                  ref={this.err}\n                  style={{\n                    fontWeight: \"bold\",\n                    marginTop: \"2%\",\n                    display: \"none\",\n                  }}\n                >\n                  <Message error>{this.state.errorMessage}</Message>\n                </div>\n               \n                <div style={{marginTop: '3%'}}>\n                <Button loading={this.state.loading} onClick={this.confirmNewPassword} fluid primary content='Confirm' />\n                </div>\n              </form>\n            </div>\n          </div>\n        </MediaQuery>\n\n\n\n        <MediaQuery minWidth={1501} maxWidth={2000}>\n          <Head>\n            <title>PERSONALYZER</title>\n            <link\n              rel=\"stylesheet\"\n              href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n              integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n              crossorigin=\"anonymous\"\n            />\n            <link\n              rel=\"stylesheet\"\n              href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n            ></link>\n            <meta\n              name=\"viewport\"\n              content=\"width=device-width, initial-scale=1.0\"\n            />\n          </Head>\n          <div style={{ paddingTop: \"3%\" }}>\n            <p\n              style={{\n                textAlign: \"center\",\n                color: \"grey\",\n                fontSize: \"120%\",\n                fontWeight: \"bold\",\n              }}\n            >\n              Enter new password.\n            </p>\n            <hr />\n            <div style={{ width: \"20%\", margin: \"auto\", padding: \"auto\" }}>\n              <form>\n                <label style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                  New password:\n                </label>\n                <br />\n                <input\n                  type=\"password\"\n                  style={{\n                    width: \"100%\",\n                    height: \"35px\",\n                    border: \"2px solid grey\",\n                  }}\n                  ref={this.passInp}\n                  onChange={(e) => this.setState({ password: e.target.value })}\n                />{\" \"}\n                <br />\n                <div\n                  ref={this.succ}\n                  style={{\n                    fontWeight: \"bold\",\n                    marginTop: \"2%\",\n                    display: \"none\",\n                  }}\n                >\n                  <Message success>\n                    Password has been changed click{\" \"}\n                    <span\n                      style={{ textDecoration: \"underline\", cursor: \"pointer\" }}\n                      onClick={() => Router.push('/login')}\n                    >\n                      here\n                    </span>{\" \"}\n                    to login\n                  </Message>\n                </div>\n                <div\n                  ref={this.err}\n                  style={{\n                    fontWeight: \"bold\",\n                    marginTop: \"2%\",\n                    display: \"none\",\n                  }}\n                >\n                  <Message error>{this.state.errorMessage}</Message>\n                </div>\n               \n                <div style={{marginTop: '3%'}}>\n                <Button loading={this.state.loading} onClick={this.confirmNewPassword} fluid primary content='Confirm' />\n                </div>\n              </form>\n            </div>\n          </div>\n        </MediaQuery>\n\n\n\n        <MediaQuery minWidth={2001}>\n          <Head>\n            <title>PERSONALYZER</title>\n            <link\n              rel=\"stylesheet\"\n              href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n              integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n              crossorigin=\"anonymous\"\n            />\n            <link\n              rel=\"stylesheet\"\n              href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n            ></link>\n            <meta\n              name=\"viewport\"\n              content=\"width=device-width, initial-scale=1.0\"\n            />\n          </Head>\n          <div style={{ paddingTop: \"2%\" }}>\n            <p\n              style={{\n                textAlign: \"center\",\n                color: \"grey\",\n                fontSize: \"120%\",\n                fontWeight: \"bold\",\n              }}\n            >\n              Enter new password.\n            </p>\n            <hr />\n            <div style={{ width: \"16%\", margin: \"auto\", padding: \"auto\" }}>\n              <form>\n                <label style={{ fontWeight: \"bold\", color: \"grey\" }}>\n                  New password:\n                </label>\n                <br />\n                <input\n                  type=\"password\"\n                  style={{\n                    width: \"100%\",\n                    height: \"35px\",\n                    border: \"2px solid grey\",\n                  }}\n                  ref={this.passInp}\n                  onChange={(e) => this.setState({ password: e.target.value })}\n                />{\" \"}\n                <br />\n                <div\n                  ref={this.succ}\n                  style={{\n                    fontWeight: \"bold\",\n                    marginTop: \"2%\",\n                    display: \"none\",\n                  }}\n                >\n                  <Message success>\n                    Password has been changed click{\" \"}\n                    <span\n                      style={{ textDecoration: \"underline\", cursor: \"pointer\" }}\n                      onClick={() => Router.push('/login')}\n                    >\n                      here\n                    </span>{\" \"}\n                    to login\n                  </Message>\n                </div>\n                <div\n                  ref={this.err}\n                  style={{\n                    fontWeight: \"bold\",\n                    marginTop: \"2%\",\n                    display: \"none\",\n                  }}\n                >\n                  <Message error>{this.state.errorMessage}</Message>\n                </div>\n               \n                <div style={{marginTop: '3%'}}>\n                <Button loading={this.state.loading} onClick={this.confirmNewPassword} fluid primary content='Confirm' />\n                </div>\n              </form>\n            </div>\n          </div>\n        </MediaQuery>\n      </>\n    );\n  }\n}\n\nexport default ResetConfirm;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/showRoom.js",["293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314"],[],"import React, { Component } from \"react\";\nimport NavBar from \"../components/NavBar\";\nimport Sign from \"../components/Sign\";\nimport styles from \"../static/css/showRoom.module.css\";\nimport {\n  Card,\n  Radio,\n  Form,\n  Segment,\n  Icon,\n  Header,\n  Button,\n  Grid,\n  Message,\n} from \"semantic-ui-react\";\nimport jwt_decode from \"jwt-decode\";\nimport dynamic from \"next/dynamic\";\nimport Router from \"next/router\";\nimport BACKEND_ORIGIN from \"../utils/domain\";\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n\nclass ShowRoom extends Component {\n  state = {\n    isAunthenticated: false,\n    products: [],\n    productQuantity: 1,\n    attributeValue: \"\", // Lazima tuwe na default value hapa.. Yaani pale user anapo-select/click the image/product this value should be updated as the default propertyValue.. Ko hii naweza ikaanza kama '' but baadae ikaja kuwa updated pale user anavyoselect picha....\n    selectedObj: {},\n    selectedObjPrice: 0,\n    selectedObjImages: [],\n    modelOpen: false,\n    customValue: \"\",\n    addedToCart: false,\n    x: 0,\n    y: 0,\n    secondPropsAttributeValue: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.father = React.createRef();\n    this.showRoom = React.createRef();\n    this.small1 = React.createRef();\n    this.small2 = React.createRef();\n    this.small3 = React.createRef();\n    this.preview = React.createRef();\n    this.explain = React.createRef();\n    this.closeBtn = React.createRef();\n    this.err = React.createRef();\n    this.err1 = React.createRef();\n    this.modal = React.createRef();\n    this.closeBtnx = React.createRef();\n    this.uwanja = React.createRef();\n  }\n\n  executingTokenLogics = () => {\n    try {\n      const tokens = localStorage.getItem(\"authTokens\")\n        ? JSON.parse(localStorage.getItem(\"authTokens\"))\n        : null;\n      if (!tokens) {\n        console.log(\"You needed to login, no records\");\n        this.setState({ isAunthenticated: false });\n        return;\n      }\n      const decodedRefreshToken = jwt_decode(tokens.refresh);\n      const expireRefreshTime = decodedRefreshToken.exp;\n      console.log(\"Hey this is the expire date of the refreshToken\");\n      console.log(expireRefreshTime);\n      console.log(\"Lets try to access the json access token\");\n      console.log(tokens.access);\n      const decodedAccessData = jwt_decode(tokens.access);\n      console.log(\"This is expiring time for you...\");\n      console.log(decodedAccessData);\n      const expireAccessTime = decodedAccessData.exp;\n      console.log(expireAccessTime);\n      const diff = expireAccessTime * 1000 - Date.now();\n      if (diff < 1) {\n        console.log(\"Hey we need to either update or make user login again\");\n        if (expireRefreshTime * 1000 - Date.now < 1) {\n          console.log(\n            \"Even ur refresh token has already been expired we need you to login again....\"\n          );\n          this.setState({\n            isAunthenticated: false,\n          });\n          return;\n        }\n        console.log(\n          \"Our refresh token is alive you should use it to update your access token\"\n        );\n\n        this.updateToken(tokens.refresh);\n\n        this.setState({\n          isAunthenticated: true,\n        });\n      } else {\n        this.setState({\n          isAunthenticated: true,\n        });\n      }\n    } catch (InvalidTokenError) {\n      console.log(InvalidTokenError.message);\n      console.log(\n        \"Invalid token specified since, when the token is expired the jwt automatically change your storage and it ill look like this\"\n      );\n      // authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n      this.setState({\n        isAunthenticated: false,\n      });\n    }\n  };\n\n  viewItem = async (e) => {\n    this.setState({\n      y: window.pageYOffset,\n      x: window.pageXOffset,\n    });\n    console.log(e.target.id);\n    const product = this.state.products.find(\n      (product) => product.id === parseInt(e.target.id)\n    );\n    console.log(\"This is the product we captured\");\n    console.log(product);\n\n    await this.setState({\n      selectedObj: product,\n      selectedObjPrice: product.price,\n      selectedObjImages: product.get_urls,\n    });\n\n    if (product.hasPropertySelection) {\n      await this.setState({\n        attributeValue: Object.values(\n          this.state.selectedObj.map_property[0]\n        )[0],\n      });\n    }\n\n    if (product.hasSecondPropertySelection) {\n      await this.setState({\n        secondPropsAttributeValue: Object.values(\n          this.state.selectedObj.map_secondProps[0]\n        )[0],\n      });\n    }\n\n    window.scrollTo(0, 0);\n    this.showRoom.current.style.zIndex = '1'\n\n    \n    this.father.current.style.display = 'none'\n    document.body.style.background =\n      \"linear-gradient(rgba(0, 0, 0, .5), rgba(0, 0, 0, .4))\";\n    \n\n    this.showRoom.current.style.display = \"block\";\n  };\n\n  onIncrease = () => {\n    this.setState({\n      productQuantity: this.state.productQuantity + 1,\n    });\n\n    // Hapa itaji-override na kuzidisha another sum used\n    this.setState({\n      selectedObjPrice:\n        this.state.selectedObjPrice + this.state.selectedObj.price,\n    });\n  };\n\n  onDecrease = () => {\n    if (this.state.productQuantity > 1) {\n      this.setState({\n        productQuantity: this.state.productQuantity - 1,\n      });\n\n      this.setState({\n        selectedObjPrice:\n          this.state.selectedObjPrice - this.state.selectedObj.price,\n      });\n    }\n  };\n\n  onRemove = (e) => {\n    // Kuna state hapa inabidi uzibadilishe ziende kwenye default\n    this.setState({\n      selectedObj: {},\n      attributeValue: \"\",\n      customValue: \"\",\n      productQuantity: 1,\n      selectedObjPrice: 0,\n    });\n\n    e.preventDefault();\n    document.body.style.background = \"#fff\";\n    this.father.current.style.display = 'block';\n    this.father .current.style.opacity = '1';\n    this.showRoom.current.style.display = 'none';\n    this.showRoom.current.style.zIndex = '0'\n    window.scrollTo(this.state.x, this.state.y);\n  };\n\n  onRemovex = (e) => {\n    this.setState({\n      modelOpen: false,\n    });\n    // Also check here if user has already login you should update isAunthenticated state\n    // Ko hapa ikisha-execute hizi logic itasaidia ku-update automatically\n    // coz this is the method that run on interval to determine the actual user..\n\n    this.executingTokenLogics();\n\n    this.modal.current.style.display = \"none\";\n    this.showRoom.current.style.opacity = \"1\";\n    this.showRoom.current.style.pointerEvents = \"auto\";\n  };\n\n  selectedOn = (e) => {\n    e.preventDefault();\n    this.preview.current.src = e.target.src;\n  };\n\n  addToCart = async (e) => {\n    e.preventDefault();\n\n    this.executingTokenLogics();\n\n    if (!this.state.isAunthenticated) {\n      this.showRoom.current.style.opacity = \"0.05\";\n      this.showRoom.current.style.pointerEvents = \"none\";\n      this.modal.current.style.display = \"block\";\n    } else {\n      console.log(\"Hey this user has been loged in, worry out\");\n\n      const tokens = localStorage.getItem(\"authTokens\");\n      console.log(\"Hey this is tokens for you...\");\n      console.log(tokens);\n      const json = JSON.parse(tokens);\n      let access = json.access;\n      console.log(\"Hey this is access token for you\");\n      console.log(access);\n      let decodedAccessData = \"\";\n      try {\n        decodedAccessData = jwt_decode(access);\n      } catch (err) {\n        console.log(err.message);\n        if (this.uwanja.current) {\n          this.uwanja.current.value = \"\";\n          this.setState({\n            customValue: \"\",\n          });\n        }\n      }\n      console.log(\"This is the id of the user who loged in \");\n      console.log(decodedAccessData.user_id);\n      const user_id = decodedAccessData.user_id;\n      const productId = this.state.selectedObj.id;\n      console.log(user_id, productId);\n\n      const id = this.state.selectedObj.id;\n      const price = this.state.selectedObjPrice;\n      const quantity = this.state.productQuantity;\n      const value = this.state.attributeValue;\n      const secondPropsAttributeValue = this.state.secondPropsAttributeValue;\n      const customization = this.state.customValue;\n\n      console.log(\"Hey this is user id for you\");\n      console.log(user_id);\n      let check = await fetch(`${BACKEND_ORIGIN}/api/cartExistOrNot/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          user_id,\n          productId: id,\n          price,\n          quantity,\n          customization,\n          value,\n          secondValue: secondPropsAttributeValue,\n        }),\n      });\n\n      console.log(\"Im outside my nigga\");\n      console.log(check);\n      let output = await check.json();\n\n      console.log(\"This is the output we have\");\n      console.log(output);\n\n      if (output.status == false) {\n        console.log(\"Eti wewe mtu ana-cart na bado unakuwa called?\");\n       \n        try {\n          let response = await fetch(`${BACKEND_ORIGIN}/api/carts/`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              id: user_id,\n              productId,\n              price,\n              quantity,\n              customization,\n              value,\n              secondValue: secondPropsAttributeValue,\n            }),\n          });\n\n          let data = await response.json();\n          console.log(\"Hey this is the response from the server\");\n          console.log(data);\n          if (this.uwanja.current) {\n            this.uwanja.current.value = \"\";\n            this.setState({\n              customValue: \"\",\n            });\n          }\n\n          console.log(\"Even ma mama thinks that my mind has gone\");\n          this.err1.current.style.display = \"block\";\n          this.successInterval = setTimeout(() => {\n            this.err1.current.style.display = \"none\";\n          }, 5000);\n        } catch (err) {\n          console.log(err.message);\n          if (this.uwanja.current) {\n            this.uwanja.current.value = \"\";\n            this.setState({\n              customValue: \"\",\n            });\n          }\n        }\n      } else {\n        console.log(\"No need to create a new cart you have one for you....\");\n        let cartByThatUser = output.cart;\n        console.log(\"Hey this is cart by our user....\");\n        console.log(cartByThatUser);\n\n        console.log(\"Even ma mama thinks that my mind has gone\");\n        this.err1.current.style.display = \"block\";\n        this.successInterval = setTimeout(() => {\n          this.err1.current.style.display = \"none\";\n        }, 5000);\n        if (this.uwanja.current) {\n          this.uwanja.current.value = \"\";\n          this.setState({\n            customValue: \"\",\n          });\n        }\n      }\n    }\n  };\n\n  // Hii kazi yake ni kutupa props tu... Kufetch data in server or api and return it in props\n\n  static async getInitialProps(props) {\n    const { category } = props.query;\n    // then fetch all product of this category on the database...\n\n    let check = await fetch(`${BACKEND_ORIGIN}/api/products_by_category/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        category,\n      }),\n    });\n\n    let products = await check.json();\n    products = products.reverse();\n    console.log(\"This is products fetched for you\");\n    console.log(products);\n    return { category, products };\n  }\n\n  async componentDidMount() {\n    console.log(\n      \"This is value of isAunthenticated \",\n      this.state.isAunthenticated\n    );\n\n    this.executingTokenLogics();\n\n    try {\n      let response = await fetch(`${BACKEND_ORIGIN}/api/products/`);\n\n      let data = await response.json();\n      console.log(\"This is your response from the server about all products\");\n      console.log(data);\n      data = data.reverse();\n\n      await this.setState(\n        {\n          products: data,\n        },\n        () => console.log(this.state.products)\n      ); // this is callback https://stackoverflow.com/questions/42038590/when-to-use-react-setstate-callback\n    } catch (err) {\n      console.log(err.message);\n    }\n\n    this.executingTokenLogicsInterval = setInterval(\n      () => this.executingTokenLogics(),\n      1200000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.executingTokenLogicsInterval);\n    clearTimeout(this.errorTimeout);\n    clearTimeout(this.successInterval);\n    console.log(\"Timeout has been cleared...\");\n    // Also in case we clicked the product to see then the background color is changed\n    // to something like black so when a user click register button from there we shoud\n    // make sure the background color of next body restored back to white(default color)\n\n    document.body.style.background = \"#fff\";\n    document.body.style.overflow = \"visible\";\n  }\n\n  updateToken = async (refreshToken) => {\n    let response = await fetch(`${BACKEND_ORIGIN}/api/token/refresh/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ refresh: refreshToken }),\n    });\n\n    let data = await response.json();\n    localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  };\n\n  render() {\n    return (\n      <NavBar isAunthenticated={this.state.isAunthenticated}>\n        <div className={styles.baba} ref={this.father}>\n          {this.props.products.length > 0 ? (\n            <div className={styles.conte}>\n              <p\n                className={styles.hek}\n              >{`Pick your choice for ${this.props.category} category and shop now.`}</p>\n              <MediaQuery minWidth={200} maxWidth={400}>\n                <hr className={styles.ab} />\n              </MediaQuery>\n              <MediaQuery minWidth={401} maxWidth={576}>\n                <hr className={styles.ab} />\n              </MediaQuery>\n              <MediaQuery minWidth={577} maxWidth={899}>\n                <hr className={styles.ab} />\n              </MediaQuery>\n              <MediaQuery minWidth={900}>\n                <hr className={styles.ab} />\n              </MediaQuery>\n\n              <MediaQuery minWidth={200} maxWidth={400}>\n                <Card.Group itemsPerRow={1}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <img\n                        src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        height={200}\n                      />\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          <MediaQuery maxWidth={319}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 25\n                                ? product.title.substr(0, 24) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={320} maxWidth={350}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 29\n                                ? product.title.substr(0, 28) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={351}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 37\n                                ? product.title.substr(0, 35) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={() =>\n                            Router.push({\n                              pathname: \"/preview\",\n                              query: { product: product.id },\n                            })\n                          }\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n\n              <MediaQuery minWidth={401} maxWidth={576}>\n                <Card.Group itemsPerRow={2}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <MediaQuery maxWidth={499}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={140}\n                        />\n                      </MediaQuery>\n                      <MediaQuery minWidth={500}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={170}\n                        />\n                      </MediaQuery>\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          <MediaQuery maxWidth={500}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 19\n                                ? product.title.substr(0, 17) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                          <MediaQuery minWidth={501}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 25\n                                ? product.title.substr(0, 24) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={() =>\n                            Router.push({\n                              pathname: \"/preview\",\n                              query: { product: product.id },\n                            })\n                          }\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n\n              <MediaQuery minWidth={577} maxWidth={899}>\n                <Card.Group itemsPerRow={3}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <MediaQuery maxWidth={650}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={140}\n                        />\n                      </MediaQuery>\n                      <MediaQuery minWidth={651} maxWidth={700}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={150}\n                        />\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={701}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={170}\n                        />\n                      </MediaQuery>\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          <MediaQuery maxWidth={650}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 17\n                                ? product.title.substr(0, 16) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={651}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 20\n                                ? product.title.substr(0, 20) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={() =>\n                            Router.push({\n                              pathname: \"/preview\",\n                              query: { product: product.id },\n                            })\n                          }\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n\n              <MediaQuery minWidth={900} maxWidth={1100}>\n                <Card.Group itemsPerRow={4}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <img\n                        src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                        height={150}\n                      />\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          <MediaQuery maxWidth={990}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 15\n                                ? product.title.substr(0, 15) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                          <MediaQuery minWidth={991}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 23\n                                ? product.title.substr(0, 23) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={this.viewItem}\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n\n              <MediaQuery minWidth={1101}>\n                <Card.Group itemsPerRow={5}>\n                  {this.props.products.map((product) => (\n                    <Card key={product.id}>\n                      <MediaQuery maxWidth={1200}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={130}\n                        />\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={1201}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${product.get_urls[0]}`}\n                          height={160}\n                        />\n                      </MediaQuery>\n                      <Card.Content>\n                        <Card.Header>{`${new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"Tsh\",\n                          minimumFractionDigits: 0,\n                        }).format(parseInt(product.price))}/=`}</Card.Header>\n                        <Card.Description>\n                          <MediaQuery maxWidth={1199}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 15\n                                ? product.title.substr(0, 15) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                          <MediaQuery minWidth={1200}>\n                            <span className={styles.lebo}>\n                              {product.title.length > 23\n                                ? product.title.substr(0, 23) + \"...\"\n                                : product.title}\n                            </span>\n                          </MediaQuery>\n                        </Card.Description>\n                      </Card.Content>\n                      <Card.Content extra>\n                        <Button\n                          onClick={this.viewItem}\n                          content=\"Shop now\"\n                          color=\"teal\"\n                          id={product.id}\n                          fluid\n                        />\n                      </Card.Content>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </MediaQuery>\n            </div>\n          ) : (\n            <>\n              {/* <p style={{paddingTop: '20%'}}>{`Hey no products found for ${this.props.category} category...`}</p> */}\n\n              <div className={styles.conte}>\n                <MediaQuery maxWidth={899}>\n                  <div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        width: \"100%\",\n\n                        justifyContent: \"center\",\n                        overflowX: \"hidden\",\n                      }}\n                    >\n                      <img\n                        src=\"../static/images/notHere.gif\"\n                        width={200}\n                        height={200}\n                      />\n                    </div>\n                    <div>\n                      <p\n                        style={{\n                          textAlign: \"center\",\n                          fontWeight: \"bold\",\n                          color: \"grey\",\n                          fontSize: \"110%\",\n                        }}\n                      >\n                        {`Oops! Currently we don't have any product of ${this.props.category}`}\n                        <br />\n                        <button\n                          className=\"btn btn-info\"\n                          style={{ marginTop: \"2%\", fontWeight: \"bold\" }}\n                          onClick={() => Router.push(\"/products\")}\n                        >\n                          Explore all Products\n                        </button>\n                      </p>\n                    </div>\n                  </div>\n                </MediaQuery>\n\n                <MediaQuery minWidth={900} maxWidth={1199}>\n                  <div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        width: \"100%\",\n\n                        justifyContent: \"center\",\n                        overflowX: \"hidden\",\n                      }}\n                    >\n                      <img\n                        src=\"../static/images/notHere.gif\"\n                        width={200}\n                        height={200}\n                      />\n                    </div>\n                    <div>\n                      <p\n                        style={{\n                          textAlign: \"center\",\n                          fontWeight: \"bold\",\n                          color: \"grey\",\n                          fontSize: \"120%\",\n                        }}\n                      >\n                        {`Oops! Currently we don't have any product of ${this.props.category}`}\n                        <br />\n                        <button\n                          className=\"btn btn-info\"\n                          style={{ marginTop: \"2%\", fontWeight: \"bold\" }}\n                          onClick={() => Router.push(\"/products\")}\n                        >\n                          {\" \"}\n                          Explore all Products\n                        </button>\n                      </p>\n                    </div>\n                  </div>\n                </MediaQuery>\n                <MediaQuery minWidth={1200}>\n                  <div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        width: \"100%\",\n\n                        justifyContent: \"center\",\n                        overflowX: \"hidden\",\n                      }}\n                    >\n                      <img\n                        src=\"../static/images/notHere.gif\"\n                        width={300}\n                        height={300}\n                      />\n                    </div>\n                    <div>\n                      <p\n                        style={{\n                          textAlign: \"center\",\n                          fontWeight: \"bold\",\n                          color: \"grey\",\n                          fontSize: \"130%\",\n                        }}\n                      >\n                        {`Oops! Currently we don't have any product of ${this.props.category}`}\n                        <br />\n                        <button\n                          className=\"btn btn-info\"\n                          style={{ marginTop: \"2%\", fontWeight: \"bold\" }}\n                          onClick={() => Router.push(\"/products\")}\n                        >\n                          Explore all Products\n                        </button>\n                      </p>\n                    </div>\n                  </div>\n                </MediaQuery>\n              </div>\n            </>\n          )}\n        </div>\n\n        <MediaQuery minWidth={900} maxWidth={1199}>\n          <div className={styles.showRoom} ref={this.showRoom}>\n            <div\n              className={styles.closeBtn}\n              onClick={this.onRemove}\n              ref={this.closeBtn}\n            >\n              &times;\n            </div>\n\n            <MediaQuery minWidth={900} maxWidth={1000}>\n              <Segment>\n                <Grid>\n                  {/* By default first image is the one placed first at canvas/preview section */}\n\n                  <Grid.Column width={9}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"300px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n\n                    <div className={styles.smallImage}>\n                      {this.state.selectedObjImages.map((url) => (\n                        <img\n                          className={styles.smaI}\n                          key={url}\n                          src={`${BACKEND_ORIGIN}${url}`}\n                          width={60}\n                          height={50}\n                          onClick={this.selectedOn}\n                        />\n                      ))}\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width={7}>\n                    <div className={styles.dodo}>\n                      <Header as=\"h3\">\n                        {this.state.selectedObj.title}\n                        <Header.Subheader color=\"orange\">\n                          {this.state.selectedObj.description}\n                        </Header.Subheader>\n                      </Header>\n\n                      <hr />\n                      <span>\n                        <Grid>\n                          <Grid.Column width={9}>\n                            Price:{\" \"}\n                            <Header\n                              as=\"h3\"\n                              color=\"grey\"\n                              content={`${new Intl.NumberFormat(\"en-US\", {\n                                style: \"currency\",\n                                currency: \"Tsh\",\n                                minimumFractionDigits: 0,\n                              }).format(\n                                parseInt(this.state.selectedObjPrice)\n                              )}/=`}\n                            />\n                          </Grid.Column>\n                          <Grid.Column width={7}>\n                            <span className={styles.sp}>\n                              Quantity:{\" \"}\n                              <span className={styles.idadi}>\n                                {this.state.productQuantity}\n                              </span>\n                            </span>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"80%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </Grid.Column>\n                        </Grid>\n                      </span>\n                    </div>\n                    <div>\n                      <div className={styles.customizations}>\n                        {this.state.selectedObj.hasPropertySelection ===\n                          false &&\n                        this.state.selectedObj.isCustomized === false &&\n                        this.state.selectedObj.hasSecondPropertySelection ===\n                          false ? (\n                          <> </>\n                        ) : (\n                          <div className={styles.top}>\n                            <p\n                              className={styles.h}\n                              style={{ fontWeight: \"bold\", fontSize: \"120%\" }}\n                            >\n                              User Customizations\n                            </p>\n\n                            <hr className={styles.hr1} />\n                          </div>\n                        )}\n\n                        <div className={styles.sec}>\n                          <>\n                            <Grid>\n                              {this.state.selectedObj.hasPropertySelection ? (\n                                <Grid.Column width={9}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_property[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.attributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.property_values.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state.attributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    attributeValue: prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {/* lets check for secondPropertySelection 900 - 1200 */}\n                              {this.state.selectedObj\n                                .hasSecondPropertySelection ? (\n                                <Grid.Column width={7}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_secondProps[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.secondPropsAttributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.second_propsValue.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state\n                                                    .secondPropsAttributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    secondPropsAttributeValue:\n                                                      prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {this.state.selectedObj.isCustomized ? (\n                                <>\n                                  <span\n                                    className={styles.bichwa}\n                                    style={{ fontSize: \"15px\" }}\n                                  >\n                                    Customize product's image/text.\n                                  </span>\n                                  <p className={styles.sub}>\n                                    *** Leave blank to use default one.\n                                    <br />\n                                    *** In case of image write a web link to\n                                    that image\n                                  </p>\n                                  <textarea\n                                    row={2}\n                                    cols={30}\n                                    className={this.tarea}\n                                    onChange={(event) =>\n                                      this.setState({\n                                        customValue: event.target.value,\n                                      })\n                                    }\n                                    style={{\n                                      marginBottom: \"3%\",\n                                      marginLeft: \"3%\",\n                                    }}\n                                    ref={this.uwanja}\n                                  ></textarea>\n                                </>\n                              ) : (\n                                <></>\n                              )}\n                            </Grid>\n                          </>\n                        </div>\n                      </div>\n                      <div className={styles.down}>\n                        <div className={styles.err} ref={this.err}>\n                          <Message error>\n                            <Message.Header>\n                              Error, You needed to login\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click login button above and login to enable add to\n                            cart feature.\n                          </Message>\n                        </div>\n\n                        <div className={styles.err1} ref={this.err1}>\n                          <Message success>\n                            <Message.Header>\n                              Success, Item has been added to cart\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click the cart icon above to preview your cart.\n                          </Message>\n                        </div>\n\n                        <Button\n                          animated\n                          primary\n                          size=\"medium\"\n                          fluid\n                          onClick={this.addToCart}\n                        >\n                          <Button.Content visible>Add to Cart</Button.Content>\n                          <Button.Content hidden>\n                            <Icon name=\"shop\" />\n                          </Button.Content>\n                        </Button>\n                      </div>\n                    </div>\n                  </Grid.Column>\n                </Grid>\n\n                <div className={styles.footerSec} style={{ marginTop: \"5%\" }}>\n                  <hr className={styles.footerHr} />\n                  <Header\n                    textAlign=\"center\"\n                    content=\"Powered by Online Tec\"\n                    color=\"grey\"\n                  />\n                </div>\n              </Segment>\n            </MediaQuery>\n\n            <MediaQuery minWidth={1001}>\n              <Segment>\n                <Grid>\n                  {/* By default first image is the one placed first at canvas/preview section */}\n\n                  <Grid.Column width={9}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"400px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n\n                    <div className={styles.smallImage}>\n                      {this.state.selectedObjImages.map((url) => (\n                        <img\n                          className={styles.smaI}\n                          key={url}\n                          src={`${BACKEND_ORIGIN}${url}`}\n                          width={60}\n                          height={50}\n                          onClick={this.selectedOn}\n                        />\n                      ))}\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width={7}>\n                    <div className={styles.dodo}>\n                      <Header as=\"h3\">\n                        {this.state.selectedObj.title}\n                        <Header.Subheader color=\"orange\">\n                          {this.state.selectedObj.description}\n                        </Header.Subheader>\n                      </Header>\n\n                      <hr />\n                      <span>\n                        <Grid>\n                          <Grid.Column width={9}>\n                            Price:{\" \"}\n                            <Header\n                              as=\"h3\"\n                              color=\"grey\"\n                              content={`${new Intl.NumberFormat(\"en-US\", {\n                                style: \"currency\",\n                                currency: \"Tsh\",\n                                minimumFractionDigits: 0,\n                              }).format(\n                                parseInt(this.state.selectedObjPrice)\n                              )}/=`}\n                            />\n                          </Grid.Column>\n                          <Grid.Column width={7}>\n                            <span className={styles.sp}>\n                              Quantity:{\" \"}\n                              <span className={styles.idadi}>\n                                {this.state.productQuantity}\n                              </span>\n                            </span>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"72%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </Grid.Column>\n                        </Grid>\n                      </span>\n                    </div>\n                    <div>\n                      <div className={styles.customizations}>\n                        {this.state.selectedObj.hasPropertySelection ===\n                          false &&\n                        this.state.selectedObj.isCustomized === false &&\n                        this.state.selectedObj.hasSecondPropertySelection ===\n                          false ? (\n                          <> </>\n                        ) : (\n                          <div className={styles.top}>\n                            <h2\n                              className={styles.h}\n                              style={{ fontWeight: \"bold\", fontSize: \"130%\" }}\n                            >\n                              User Customizations\n                            </h2>\n\n                            <hr className={styles.hr1} />\n                          </div>\n                        )}\n\n                        <div className={styles.sec}>\n                          <>\n                            <Grid>\n                              {this.state.selectedObj.hasPropertySelection ? (\n                                <Grid.Column width={9}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_property[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.attributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.property_values.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state.attributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    attributeValue: prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {/* lets check for secondPropertySelection 900 - 1200 */}\n                              {this.state.selectedObj\n                                .hasSecondPropertySelection ? (\n                                <Grid.Column width={7}>\n                                  <>\n                                    <span>\n                                      <span\n                                        className={styles.pName}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {\n                                          Object.keys(\n                                            this.state.selectedObj\n                                              .map_secondProps[0]\n                                          )[0]\n                                        }\n                                        :\n                                      </span>\n                                      <span\n                                        className={styles.pValue}\n                                        style={{ fontSize: \"15px\" }}\n                                      >\n                                        {this.state.secondPropsAttributeValue}\n                                      </span>\n                                    </span>\n                                    <Form>\n                                      {this.state.selectedObj.second_propsValue.map(\n                                        (prop) => (\n                                          <div\n                                            key={prop}\n                                            className={styles.pullUp}\n                                          >\n                                            <Form.Field>\n                                              <Radio\n                                                label={prop}\n                                                name=\"radioGroup\"\n                                                value={prop}\n                                                checked={\n                                                  this.state\n                                                    .secondPropsAttributeValue ===\n                                                  prop\n                                                }\n                                                onChange={() =>\n                                                  this.setState({\n                                                    secondPropsAttributeValue:\n                                                      prop,\n                                                  })\n                                                }\n                                              />\n                                            </Form.Field>\n                                          </div>\n                                        )\n                                      )}\n                                    </Form>\n                                  </>\n                                </Grid.Column>\n                              ) : (\n                                <></>\n                              )}\n\n                              {this.state.selectedObj.isCustomized ? (\n                                <>\n                                  <span\n                                    className={styles.bichwa}\n                                    style={{ fontSize: \"15px\" }}\n                                  >\n                                    Customize product's image/text.\n                                  </span>\n                                  <p className={styles.sub}>\n                                    *** Leave blank to use default one.\n                                    <br />\n                                    *** In case of image write a web link to\n                                    that image\n                                  </p>\n                                  <textarea\n                                    row={2}\n                                    cols={32}\n                                    className={this.tarea}\n                                    onChange={(event) =>\n                                      this.setState({\n                                        customValue: event.target.value,\n                                      })\n                                    }\n                                    style={{\n                                      marginBottom: \"3%\",\n                                      marginLeft: \"3%\",\n                                    }}\n                                    ref={this.uwanja}\n                                  ></textarea>\n                                </>\n                              ) : (\n                                <></>\n                              )}\n                            </Grid>\n                          </>\n                        </div>\n                      </div>\n                      <div className={styles.down}>\n                        <div className={styles.err} ref={this.err}>\n                          <Message error>\n                            <Message.Header>\n                              Error, You needed to login\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click login button above and login to enable add to\n                            cart feature.\n                          </Message>\n                        </div>\n\n                        <div className={styles.err1} ref={this.err1}>\n                          <Message success>\n                            <Message.Header>\n                              Success, Item has been added to cart\n                            </Message.Header>\n                            <Icon name=\"warning sign\" />\n                            Click the cart icon above to preview your cart.\n                          </Message>\n                        </div>\n\n                        <Button\n                          animated\n                          primary\n                          size=\"medium\"\n                          fluid\n                          onClick={this.addToCart}\n                        >\n                          <Button.Content visible>Add to Cart</Button.Content>\n                          <Button.Content hidden>\n                            <Icon name=\"shop\" />\n                          </Button.Content>\n                        </Button>\n                      </div>\n                    </div>\n                  </Grid.Column>\n                </Grid>\n\n                <div className={styles.footerSec} style={{ marginTop: \"2%\" }}>\n                  <hr className={styles.footerHr} />\n                  <Header\n                    textAlign=\"center\"\n                    content=\"Powered by Online Tec\"\n                    color=\"grey\"\n                  />\n                </div>\n              </Segment>\n            </MediaQuery>\n          </div>\n        </MediaQuery>\n\n        <MediaQuery minWidth={1200}>\n          <div className={styles.showRoom} ref={this.showRoom}>\n            <div\n              className={styles.closeBtn}\n              onClick={this.onRemove}\n              ref={this.closeBtn}\n            >\n              &times;\n            </div>\n\n            <Segment>\n              <Grid>\n                {/* By default first image is the one placed first at canvas/preview section */}\n\n                <Grid.Column width={9}>\n                  <MediaQuery minWidth={1200} maxWidth={1340}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"380px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={1341} maxWidth={1500}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"400px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={1501}>\n                    <div\n                      className={styles.largeImage}\n                      style={{ height: \"500px\" }}\n                    >\n                      <img\n                        className={styles.imag}\n                        ref={this.preview}\n                        src={`${BACKEND_ORIGIN}${this.state.selectedObjImages[0]}`}\n                        title=\"big pic\"\n                      />\n                    </div>\n                  </MediaQuery>\n\n                  <div className={styles.smallImage}>\n                    {this.state.selectedObjImages.map((url) => (\n                      <img\n                        className={styles.smaI}\n                        key={url}\n                        src={`${BACKEND_ORIGIN}${url}`}\n                        width={60}\n                        height={50}\n                        onClick={this.selectedOn}\n                      />\n                    ))}\n                  </div>\n                </Grid.Column>\n                <Grid.Column width={7}>\n                  <div className={styles.dodo}>\n                    <Header as=\"h3\">\n                      {this.state.selectedObj.title}\n                      <Header.Subheader color=\"orange\">\n                        {this.state.selectedObj.description}\n                      </Header.Subheader>\n                    </Header>\n\n                    <hr />\n                    <span>\n                      <Grid>\n                        <Grid.Column width={9}>\n                          Price:{\" \"}\n                          <Header\n                            as=\"h3\"\n                            color=\"grey\"\n                            content={`${new Intl.NumberFormat(\"en-US\", {\n                              style: \"currency\",\n                              currency: \"Tsh\",\n                              minimumFractionDigits: 0,\n                            }).format(\n                              parseInt(this.state.selectedObjPrice)\n                            )}/=`}\n                          />\n                        </Grid.Column>\n                        <Grid.Column width={7}>\n                          <span className={styles.sp}>\n                            Quantity:{\" \"}\n                            <span className={styles.idadi}>\n                              {this.state.productQuantity}\n                            </span>\n                          </span>\n                          <MediaQuery minWidth={1200} maxWidth={1340}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"58%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={1341} maxWidth={1500}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"52%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n\n                          <MediaQuery minWidth={1501}>\n                            <div\n                              className={styles.amountWrapper}\n                              style={{ width: \"46%\" }}\n                            >\n                              <span\n                                className={styles.plus}\n                                onClick={this.onDecrease}\n                              >\n                                <Icon size=\"small\" name=\"minus\" />\n                              </span>\n                              <span className={styles.actualAmount}>\n                                {this.state.productQuantity}\n                              </span>\n                              <span\n                                className={styles.minus}\n                                onClick={this.onIncrease}\n                              >\n                                <Icon size=\"small\" name=\"plus\" />\n                              </span>\n                            </div>\n                          </MediaQuery>\n                        </Grid.Column>\n                      </Grid>\n                    </span>\n                  </div>\n                  <div>\n                    <div className={styles.customizations}>\n                      {this.state.selectedObj.hasPropertySelection === false &&\n                      this.state.selectedObj.isCustomized === false &&\n                      this.state.selectedObj.hasSecondPropertySelection ===\n                        false ? (\n                        <> </>\n                      ) : (\n                        <div className={styles.top}>\n                          <h2\n                            className={styles.h}\n                            style={{ fontWeight: \"bold\", fontSize: \"130%\" }}\n                          >\n                            User Customizations\n                          </h2>\n\n                          <hr className={styles.hr1} />\n                        </div>\n                      )}\n\n                      <div className={styles.sec}>\n                        <>\n                          <Grid>\n                            {this.state.selectedObj.hasPropertySelection ? (\n                              <Grid.Column width={9}>\n                                <>\n                                  <span>\n                                    <span\n                                      className={styles.pName}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {\n                                        Object.keys(\n                                          this.state.selectedObj.map_property[0]\n                                        )[0]\n                                      }\n                                      :\n                                    </span>\n                                    <span\n                                      className={styles.pValue}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {this.state.attributeValue}\n                                    </span>\n                                  </span>\n                                  <Form>\n                                    {this.state.selectedObj.property_values.map(\n                                      (prop) => (\n                                        <div\n                                          key={prop}\n                                          className={styles.pullUp}\n                                        >\n                                          <Form.Field>\n                                            <Radio\n                                              label={prop}\n                                              name=\"radioGroup\"\n                                              value={prop}\n                                              checked={\n                                                this.state.attributeValue ===\n                                                prop\n                                              }\n                                              onChange={() =>\n                                                this.setState({\n                                                  attributeValue: prop,\n                                                })\n                                              }\n                                            />\n                                          </Form.Field>\n                                        </div>\n                                      )\n                                    )}\n                                  </Form>\n                                </>\n                              </Grid.Column>\n                            ) : (\n                              <></>\n                            )}\n\n                            {/* lets check for secondPropertySelection 900 - 1200 */}\n                            {this.state.selectedObj\n                              .hasSecondPropertySelection ? (\n                              <Grid.Column width={7}>\n                                <>\n                                  <span>\n                                    <span\n                                      className={styles.pName}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {\n                                        Object.keys(\n                                          this.state.selectedObj\n                                            .map_secondProps[0]\n                                        )[0]\n                                      }\n                                      :\n                                    </span>\n                                    <span\n                                      className={styles.pValue}\n                                      style={{ fontSize: \"15px\" }}\n                                    >\n                                      {this.state.secondPropsAttributeValue}\n                                    </span>\n                                  </span>\n                                  <Form>\n                                    {this.state.selectedObj.second_propsValue.map(\n                                      (prop) => (\n                                        <div\n                                          key={prop}\n                                          className={styles.pullUp}\n                                        >\n                                          <Form.Field>\n                                            <Radio\n                                              label={prop}\n                                              name=\"radioGroup\"\n                                              value={prop}\n                                              checked={\n                                                this.state\n                                                  .secondPropsAttributeValue ===\n                                                prop\n                                              }\n                                              onChange={() =>\n                                                this.setState({\n                                                  secondPropsAttributeValue:\n                                                    prop,\n                                                })\n                                              }\n                                            />\n                                          </Form.Field>\n                                        </div>\n                                      )\n                                    )}\n                                  </Form>\n                                </>\n                              </Grid.Column>\n                            ) : (\n                              <></>\n                            )}\n\n                            {this.state.selectedObj.isCustomized ? (\n                              <>\n                                <span\n                                  className={styles.bichwa}\n                                  style={{ fontSize: \"15px\" }}\n                                >\n                                  Customize product's image/text.\n                                </span>\n                                <p className={styles.sub}>\n                                  *** Leave blank to use default one.\n                                  <br />\n                                  *** In case of image write a web link to that\n                                  image\n                                </p>\n                                <textarea\n                                  row={2}\n                                  cols={32}\n                                  className={this.tarea}\n                                  onChange={(event) =>\n                                    this.setState({\n                                      customValue: event.target.value,\n                                    })\n                                  }\n                                  style={{\n                                    marginBottom: \"3%\",\n                                    marginLeft: \"3%\",\n                                  }}\n                                  ref={this.uwanja}\n                                ></textarea>\n                              </>\n                            ) : (\n                              <></>\n                            )}\n                          </Grid>\n                        </>\n                      </div>\n                    </div>\n                    <div className={styles.down}>\n                      <div className={styles.err} ref={this.err}>\n                        <Message error>\n                          <Message.Header>\n                            Error, You needed to login\n                          </Message.Header>\n                          <Icon name=\"warning sign\" />\n                          Click login button above and login to enable add to\n                          cart feature.\n                        </Message>\n                      </div>\n\n                      <div className={styles.err1} ref={this.err1}>\n                        <Message success>\n                          <Message.Header>\n                            Success, Item has been added to cart\n                          </Message.Header>\n                          <Icon name=\"warning sign\" />\n                          Click the cart icon above to preview your cart.\n                        </Message>\n                      </div>\n\n                      <Button\n                        animated\n                        primary\n                        size=\"medium\"\n                        fluid\n                        onClick={this.addToCart}\n                      >\n                        <Button.Content visible>Add to Cart</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"shop\" />\n                        </Button.Content>\n                      </Button>\n                    </div>\n                  </div>\n                </Grid.Column>\n              </Grid>\n\n              <div className={styles.footerSec} style={{ marginTop: \"2%\" }}>\n                <hr className={styles.footerHr} />\n                <Header\n                  textAlign=\"center\"\n                  content=\"Powered by Online Tec\"\n                  color=\"grey\"\n                />\n              </div>\n            </Segment>\n          </div>\n        </MediaQuery>\n\n        {/* <MediaQuery minWidth={1222200}>\n          <div className={styles.showRoom} ref={this.showRoom}>\n            <div\n              className={styles.closeBtn}\n              onClick={this.onRemove}\n              ref={this.closeBtn}\n            >\n              &times;\n            </div>\n\n            <Segment>\n              <Grid>\n\n                <Grid.Column width={6}>\n                  <div className={styles.largeImage}>\n                    <img\n                      className={styles.imag}\n                      ref={this.preview}\n                      src={`http://127.0.0.1:8000${this.state.selectedObjImages[0]}`}\n                      title=\"big pic\"\n                    />\n                  </div>\n\n                  <div className={styles.smallImage}>\n                    {this.state.selectedObjImages.map((url) => (\n                      <img\n                        className={styles.smaI}\n                        key={url}\n                        src={`http://127.0.0.1:8000${url}`}\n                        width={80}\n                        height={100}\n                        onClick={this.selectedOn}\n                      />\n                    ))}\n\n                  \n                  </div>\n                </Grid.Column>\n                <Grid.Column width={10}>\n                  <div className={styles.dodo}>\n                    <Header as=\"h1\">\n                      {this.state.selectedObj.title}\n                      <Header.Subheader color=\"orange\">\n                        {this.state.selectedObj.description}\n                      </Header.Subheader>\n                    </Header>\n\n                    <hr />\n                    <span>\n                      <Grid>\n                        <Grid.Column width={7}>\n                          Price:{\" \"}\n                          <Header\n                            as=\"h2\"\n                            content={`${new Intl.NumberFormat(\"en-US\", {\n                              style: \"currency\",\n                              currency: \"Tsh\",\n                              minimumFractionDigits: 0,\n                            }).format(\n                              parseInt(this.state.selectedObjPrice)\n                            )}/=`}\n                          />\n                        </Grid.Column>\n                        <Grid.Column width={9}>\n                          <span className={styles.sp}>\n                            Quantity:{\" \"}\n                            <span className={styles.idadi}>\n                              {this.state.productQuantity}\n                            </span>\n                          </span>\n                          <div className={styles.amountWrapper}>\n                            <span\n                              className={styles.plus}\n                              onClick={this.onDecrease}\n                            >\n                              <Icon size=\"small\" name=\"minus\" />\n                            </span>\n                            <span className={styles.actualAmount}>\n                              {this.state.productQuantity}\n                            </span>\n                            <span\n                              className={styles.minus}\n                              onClick={this.onIncrease}\n                            >\n                              <Icon size=\"small\" name=\"plus\" />\n                            </span>\n                          </div>\n                        </Grid.Column>\n                      </Grid>\n                    </span>\n                  </div>\n                  <div>\n                    <div className={styles.customizations}>\n                      {this.state.selectedObj.hasPropertySelection === false &&\n                      this.state.selectedObj.isCustomized === false ? (\n                        <> </>\n                      ) : (\n                        <div className={styles.top}>\n                          <h2 className={styles.h}>User Customizations</h2>\n\n                          <hr className={styles.hr1} />\n                        </div>\n                      )}\n\n                      <div className={styles.sec}>\n                        <Grid>\n                          {this.state.selectedObj.hasPropertySelection ? (\n                            <Grid.Column width={6}>\n                              <span>\n                                <span className={styles.pName}>\n                                  {\n                                    Object.keys(\n                                      this.state.selectedObj.map_property[0]\n                                    )[0]\n                                  }\n                                  :\n                                </span>\n                                <span className={styles.pValue}>\n                                  {this.state.attributeValue}\n                                </span>\n                              </span>\n                              <Form>\n                                {this.state.selectedObj.property_values.map(\n                                  (prop) => (\n                                    <div key={prop} className={styles.pullUp}>\n                                      <Form.Field>\n                                        <Radio\n                                          label={prop}\n                                          name=\"radioGroup\"\n                                          value={prop}\n                                          checked={\n                                            this.state.attributeValue === prop\n                                          }\n                                          onChange={() =>\n                                            this.setState({\n                                              attributeValue: prop,\n                                            })\n                                          }\n                                        />\n                                      </Form.Field>\n                                    </div>\n                                  )\n                                )}\n                              </Form>\n                            </Grid.Column>\n                          ) : (\n                            <></>\n                          )}\n\n                          {this.state.selectedObj.isCustomized ? (\n                            <Grid.Column width={10}>\n                              <span className={styles.bichwa}>\n                                Customize product's image/text.\n                              </span>\n                              <p className={styles.sub}>\n                                *** Leave blank to use default one.\n                                <br />\n                                *** In case of image write a web link to that\n                                image\n                              </p>\n                              <textarea\n                                row={2}\n                                cols={36}\n                                className={this.tarea}\n                                onChange={(event) =>\n                                  this.setState({\n                                    customValue: event.target.value,\n                                  })\n                                }\n                              ></textarea>\n                            </Grid.Column>\n                          ) : (\n                            <></>\n                          )}\n                        </Grid>\n                      </div>\n                    </div>\n                    <div className={styles.down}>\n                      <div className={styles.err} ref={this.err}>\n                        <Message error>\n                          <Message.Header>\n                            Error, You needed to login\n                          </Message.Header>\n                          <Icon name=\"warning sign\" />\n                          Click login button above and login to enable add to\n                          cart feature.\n                        </Message>\n                      </div>\n\n                      <div className={styles.err1} ref={this.err1}>\n                        <Message success>\n                          <Message.Header>\n                            Success, Item has been added to cart\n                          </Message.Header>\n                          <Icon name=\"warning sign\" />\n                          Click the cart icon above to preview your cart.\n                        </Message>\n                      </div>\n\n                      <Button\n                        animated\n                        primary\n                        fluid\n                        size=\"medium\"\n                        onClick={this.addToCart}\n                      >\n                        <Button.Content visible>Add to Cart</Button.Content>\n                        <Button.Content hidden>\n                          <Icon name=\"shop\" />\n                        </Button.Content>\n                      </Button>\n                    </div>\n                  </div>\n                </Grid.Column>\n              </Grid>\n\n              <div className={styles.footerSec}>\n                <hr className={styles.footerHr} />\n                <Header\n                  textAlign=\"center\"\n                  content=\"Powered by Online Tec\"\n                  color=\"grey\"\n                />\n              </div>\n            </Segment>\n          </div>\n        </MediaQuery> */}\n\n        <div className={styles.model} ref={this.modal}>\n          <div\n            className={styles.closeBtnx}\n            onClick={this.onRemovex}\n            ref={this.closeBtnx}\n          >\n            &times;\n          </div>\n\n          <Sign closeLoginPanel={this.onRemovex} />\n        </div>\n\n        <style jsx global>{`\n          body {\n            background: rgb(236, 236, 236);\n          }\n        `}</style>\n      </NavBar>\n    );\n  }\n}\n\nexport default ShowRoom;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/tigopesa.js",["315","316"],[],"import React, { Component } from \"react\";\nimport dynamic from \"next/dynamic\";\nimport styles from \"../static/css/mode.module.css\";\nimport Head from \"next/head\";\nimport { Grid, Icon, Segment } from \"semantic-ui-react\";\nimport jwt_decode from \"jwt-decode\";\nimport Router from \"next/router\";\nimport BACKEND_ORIGIN from \"../utils/domain\";\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n\nclass TPesa extends Component {\n  state = {\n    isAunthenticated: false,\n    data: [],\n    cart_id: 0,\n    user_id: 0,\n    transactionId: \"\",\n    phone_number: \"\",\n    errorMessage: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.err = React.createRef();\n    this.muamala = React.createRef();\n    this.phone = React.createRef();\n  }\n\n  componentDidMount() {\n    this.executingTokenLogics();\n\n    console.log(this.state.cart_id, this.state.isAunthenticated);\n  }\n\n  onPlaceOrder = async (e) => {\n    e.preventDefault();\n\n    console.log(\"Hellow\", this.state.transactionId, this.state.phone_number);\n\n    if (\n      this.state.transactionId.trim().length === 0 ||\n      this.state.phone_number.trim().length === 0\n    ) {\n      // then return an error that hey we don't accept empty data.\n      console.log(\"we dont accept empty string...\");\n      this.setState({\n        errorMessage: \"Failed, We don't accept empty fields\",\n      });\n\n      this.err.current.style.display = \"block\";\n      this.timeout = setTimeout(() => {\n        this.err.current.style.display = \"none\";\n      }, 5000);\n\n      this.setState({\n        phone_number: \"\",\n        transactionId: \"\",\n      });\n\n      this.muamala.current.value = \"\";\n      this.phone.current.value = \"\";\n\n      return;\n    }\n\n    if (this.state.phone_number.trim().length < 10) {\n      this.setState({\n        errorMessage: \"Failed, phone number looks to be invalid!\",\n      });\n      this.err.current.style.display = \"block\";\n      this.timeout = setTimeout(() => {\n        this.err.current.style.display = \"none\";\n      }, 5000);\n\n      this.setState({\n        phone_number: \"\",\n        transactionId: \"\",\n      });\n\n      this.muamala.current.value = \"\";\n      this.phone.current.value = \"\";\n      return;\n    }\n\n    // I thinks now we should submit the form\n    const response = await fetch(`${BACKEND_ORIGIN}/api/create_order/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        transactionId: this.state.transactionId,\n        mobile: parseInt(this.state.phone_number),\n        id: this.state.user_id,\n        cartId: this.state.cart_id,\n      }),\n    });\n\n    const data = await response.json();\n\n    console.log(\"this is data for you\");\n    console.log(data);\n\n    if (data.success) {\n      return Router.push({\n        pathname: \"/done\",\n        query: {\n          unique_id: data.unique_id,\n          \n        },\n      });\n    } else {\n      console.log(\"Something is wrong here...\");\n    }\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n  }\n\n  updateToken = async (refreshToken) => {\n    let response = await fetch(`${BACKEND_ORIGIN}/api/token/refresh/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ refresh: refreshToken }),\n    });\n\n    let data = await response.json();\n    localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  };\n\n  executingTokenLogics = async () => {\n    try {\n      const tokens = localStorage.getItem(\"authTokens\")\n        ? JSON.parse(localStorage.getItem(\"authTokens\"))\n        : null;\n      if (!tokens) {\n        console.log(\"You needed to login, no records\");\n        this.setState({ isAunthenticated: false });\n        return;\n      }\n      const decodedRefreshToken = jwt_decode(tokens.refresh);\n      const expireRefreshTime = decodedRefreshToken.exp;\n      console.log(\"Hey this is the expire date of the refreshToken\");\n      console.log(expireRefreshTime);\n      console.log(\"Lets try to access the json access token\");\n      console.log(tokens.access);\n      const decodedAccessData = jwt_decode(tokens.access);\n      console.log(\"This is expiring time for you...\");\n      console.log(decodedAccessData);\n      const user_id = decodedAccessData.user_id;\n      this.setState({\n        user_id,\n      });\n      console.log(\"This is user_id for you\");\n      console.log(user_id);\n      const expireAccessTime = decodedAccessData.exp;\n      console.log(expireAccessTime);\n      const diff = expireAccessTime * 1000 - Date.now();\n      if (diff < 1) {\n        console.log(\"Hey we need to either update or make user login again\");\n        if (expireRefreshTime * 1000 - Date.now < 1) {\n          console.log(\n            \"Even ur refresh token has already been expired we need you to login again....\"\n          );\n          this.setState({\n            isAunthenticated: false,\n          });\n          return;\n        }\n        console.log(\n          \"Our refresh token is alive you should use it to update your access token\"\n        );\n\n        this.updateToken(tokens.refresh);\n\n        this.setState({\n          isAunthenticated: true,\n        });\n\n        // Kama amekuwa aunthenticated vilevile inabidi tufetch kama huyu jamaa na products or not...\n\n        let response = await fetch(`${BACKEND_ORIGIN}/api/cartproducts/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: user_id,\n          }),\n        });\n\n        let data = await response.json();\n\n        // somethimes data returned is Object { message: \"No cart by this user\", code: \"Cart matching query does not exist.\" }\n        // if theres is no cart of 'unordered' status by that user so we should deal\n        // with this issue\n        if (!data.message) {\n          this.setState({\n            data,\n            cart_id: data[0].get_cartId,\n          });\n        }\n      } else {\n        this.setState({\n          isAunthenticated: true,\n        });\n\n        let response = await fetch(`${BACKEND_ORIGIN}/api/cartproducts/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: user_id,\n          }),\n        });\n\n        let data = await response.json();\n\n        // somethimes data returned is Object { message: \"No cart by this user\", code: \"Cart matching query does not exist.\" }\n        // if theres is no cart of 'unordered' status by that user so we should deal\n        // with this issue\n        // since our data is the list of cartproducts and there is not way a given cartproducts to come\n        // from the different cart.. all these cproducts are derived from the given one cart...\n        // that how i access cart_id from them\n        if (!data.message) {\n          this.setState({\n            data,\n            cart_id: data[0].get_cartId,\n          });\n        }\n      }\n    } catch (InvalidTokenError) {\n      console.log(InvalidTokenError.message);\n      console.log(\n        \"Invalid token specified since, when the token is expired the jwt automatically change your storage and it ill look like this\"\n      );\n      // authToken: {\"detail\": \"Token is blacklisted\", \"code\": \"token_not_valid\"}\n      this.setState({\n        isAunthenticated: false,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <MediaQuery maxWidth={899}>\n          <div>\n            <Head>\n              <title>PERSONALYZER</title>\n              <link\n                rel=\"stylesheet\"\n                href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                crossorigin=\"anonymous\"\n              />\n              <link\n                rel=\"stylesheet\"\n                href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n              ></link>\n            </Head>\n            {this.state.isAunthenticated ? (\n              this.state.cart_id > 0 ? (\n                <div className={styles.bothOfUs}>\n                  <div className={styles.main}>\n                    <div className={styles.payMe}>\n                      <p className={styles.pay}>Mode of payment</p>\n                      <div className={styles.reduceMe}>\n                        <Segment>\n                          <Grid>\n                            <Grid.Column width={8}>\n                              <div className={styles.phead}>\n                                <p className={styles.lnamba}>LIPA NAMBA</p>\n                                <p className={styles.aname1}>111000</p>\n                              </div>\n                            </Grid.Column>\n\n                            <Grid.Column width={8}>\n                              <div className={styles.phead2}>\n                                <p className={styles.qr}>QR CODE</p>\n                                <p className={styles.aqr}>\n                                  <img\n                                    width={130}\n                                    height={130}\n                                    src=\"../static/images/frame.png\"\n                                  />\n                                </p>\n                              </div>\n                            </Grid.Column>\n                          </Grid>\n                        </Segment>\n                      </div>\n                    </div>\n                    <div className={styles.out}>\n                      <p\n                        className={styles.head}\n                        style={{ background: \"rgb(0, 115, 182)\" }}\n                      >\n                        Jinsi ya kulipia kwa Tigo Pesa\n                      </p>\n                      <div className={styles.meth1}>\n                        <p className={styles.htwo}>Kwa njia ya kawaida.</p>\n                        <div className={styles.para}>\n                          <p>1. Piga *150*01#</p>\n                          <p>2. Chagua 5(Lipa kwa simu) </p>\n                          <p>3. Chagua 1(Kwenda Tigo Pesa)</p>\n                          <p>4. Ingiza lipa namba </p>\n                          <p>5. Ingiza kiasi cha kulipia</p>\n                          <p>6. Ingiza namba ya siri kuthibitisha</p>\n                          <p>\n                            7. Ukishalipia ingiza namba ya muamala(\n                            <b>\n                              <i>Transaction number</i>\n                            </b>\n                            ) na nambako ya simu(\n                            <b>\n                              <i>Phone number</i>\n                            </b>\n                            ) kwenye fomu ya kuweka oda(\n                            <b>\n                              <i>Place order</i>\n                            </b>\n                            ) hapo chini.\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className={styles.meth2}>\n                        <p className={styles.htwo}>Kwa kutumia Tigo Pesa App</p>\n                        <div className={styles.para}>\n                          <p>1. Fungua app ya TIGO PESA</p>\n                          <p>2.Chagua lipa kwa simu</p>\n                          <p>\n                            3. Changua njia ya kufanya malipo kwa kuingiza lipa\n                            namba au kuskani picha ya QR\n                          </p>\n                          <p>4. Ingiza kiasi cha kulipia</p>\n                          <p>5. Ingiza namba ya siri kuthibitisha</p>\n                          <p>\n                            7. Ukishalipia ingiza namba ya muamala(\n                            <b>\n                              <i>Transaction number</i>\n                            </b>\n                            ) na nambako ya simu(\n                            <b>\n                              <i>Phone number</i>\n                            </b>\n                            ) kwenye fomu ya kuweka oda(\n                            <b>\n                              <i>Place order</i>\n                            </b>\n                            ) hapo chini.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className={styles.moreInfo}>\n                      <div className={styles.help}>\n                        <p className={styles.hin3}>\n                          *** Contact us to deliver a product anywhere in\n                          Tanzania.\n                          <br></br>\n                          *** Contact us if you face any problem about payment\n                        </p>\n                        <br />\n                        <div className={styles.divu}>\n                          <span className={styles.contacts}>\n                            <Icon size=\"large\" name=\"whatsapp\" color=\"grey\" />\n                            +255623317196\n                          </span>\n\n                          <span className={styles.contacts}>\n                            <Icon\n                              size=\"large\"\n                              name=\"mail outline\"\n                              color=\"grey\"\n                            />\n                            support@personalizer.co.tz\n                          </span>\n\n                          <MediaQuery minWidth={700}>\n                            <span>\n                              <Icon\n                                size=\"large\"\n                                name=\"instagram\"\n                                color=\"grey\"\n                              />\n                              support@personalizer.co.tz\n                            </span>\n                          </MediaQuery>\n                        </div>\n                      </div>\n                      <div className={styles.forPick}>\n                        <p className={styles.infoP}>\n                          For picking your product at station use this address:\n                        </p>\n                        <address style={{ color: \"#5e8ba8\" }}>\n                          <i>\n                            Kariakoo, Aggrey na Likoma Street,\n                            <br />\n                            Dar es salaam,\n                            <br />\n                            0623317196,\n                            <br />\n                            onlinetek@gmail.com\n                          </i>\n                        </address>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div\n                    className={styles.imHereToStay}\n                    style={{ background: \"rgb(123, 197, 220)\" }}\n                  >\n                    <form>\n                      <label className={styles.lab}>Transaction number:</label>\n                      <br />\n                      <input\n                        className={styles.inp}\n                        ref={this.muamala}\n                        onChange={(e) =>\n                          this.setState({ transactionId: e.target.value })\n                        }\n                      />{\" \"}\n                      <br />\n                      <label className={styles.lab1}>Phone number:</label>{\" \"}\n                      <br />\n                      <input\n                        className={styles.inp}\n                        ref={this.phone}\n                        onChange={(e) =>\n                          this.setState({ phone_number: e.target.value })\n                        }\n                      />{\" \"}\n                      <br />\n                      <div className={styles.error} ref={this.err}>\n                        <img src=\"../static/images/warning.png\" width={12} />\n                        <span className={styles.neno1}>\n                          {this.state.errorMessage}\n                        </span>\n                      </div>\n                      <button\n                        className={styles.btn}\n                        onClick={this.onPlaceOrder}\n                        style={{ background: \"#f7e240\", color: \"grey\" }}\n                      >\n                        Place order\n                      </button>\n                    </form>\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <p>\n                    Sorry your cart appear to be empty. Shop now for you to\n                    place order, we should have a image and a button of shop\n                    now..\n                  </p>\n                </>\n              )\n            ) : (\n              <>\n                <p>Hey you should login to place order. Login here...</p>\n              </>\n            )}\n          </div>\n        </MediaQuery>\n        <MediaQuery minWidth={900}>\n          <h2 style={{ textAlign: \"center\" }}>Out of screen width..</h2>\n        </MediaQuery>\n      </>\n    );\n  }\n}\n\nexport default TPesa;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/components/NavBar.js",["317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362"],[],"/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/components/NavBar2.js",["363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport { Container, Button, Icon, Label, Grid } from 'semantic-ui-react'\nimport Head from 'next/head';\nimport styles from '../static/css/index.module.css';\nimport { Link } from '../routes';\nimport Image from 'next/image'\nimport Router from 'next/router'\nimport jwt_decode from \"jwt-decode\"\nimport Media from 'react-media';\nimport BACKEND_ORIGIN from '../utils/domain';\n\n// import MediaQuery from 'react-responsive'  // https://www.npmjs.com/package/react-responsive\nimport dynamic from 'next/dynamic'\n\nconst MediaQuery = dynamic(() => {\n    return import (\"react-responsive\")\n}, {ssr: false})\n// Hii jinsi ya ku-import hivi ndo ime-solve tatizo la media-Queries kukataa kusema kuwa there is \n// Hydaration error na now kila kitu kinaenda sawa nahisi kila unavyooimport hii ssr inabidi iwe \n// False... Give credit to this man...https://lightrun.com/answers/yocontra-react-responsive-nextjs-expected-server-html-to-contain-a-matching-div-in-div\n// Haa hii error imeniangaisha sana mpaka nikataka nikate tamaa but now imekuwa solved...\nexport default props => {\n    const topDiv = useRef(null)\n    const sideBarRef = useRef(null)\n    const profileRef = useRef(null)\n    const searchRef = useRef(null)\n    const list = useRef(null)\n    const kapu = useRef(null)\n    const kapuLabel = useRef(null)\n    const [dimension, setDimension] = useState(null);\n    const [hasDefaultProfile, setHasDefaultProfile] = useState(true)\n    const [profile, setProfile] = useState('')\n    const [hasProfile, setHasProfile] = useState(false)\n    const [qr, setQr] = useState([])\n    const [filteredQs, setFilteredQs] = useState([])\n    const [ loginIn, setLoginIn ] = useState(null)\n    const [ amount, setAmount ] = useState(null)\n    const [ searchTerm, setSearchTerm ] = useState(null)\n\n    const toggleSidebarOn = async () => {\n        window.scrollTo(0,0)\n\n        sideBarRef.current.style.display = 'block'\n        topDiv.current.style.pointerEvents = 'none'\n        document.body.style.overflow = 'hidden'\n        topDiv.current.style.opacity = '0.1';\n        \n        console.log('Sometimes inafeli')\n    }\n\n    const toggleSidebarOff = async () => {\n        sideBarRef.current.style.display = 'none'\n        topDiv.current.style.opacity = '1';\n        document.body.style.overflow = 'visible'\n        topDiv.current.style.pointerEvents = 'auto'\n    }\n\n    const fetchSomeData = async () => {\n        \n        try {\n            const tokens = localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null;\n            console.log('Im fetching some data')\n            if(tokens === null) {\n                console.log('Im inside here')\n                setLoginIn(null)\n                return;\n            }\n            console.log('Wake up mr')\n            const decodedRefreshToken = jwt_decode(tokens.refresh);\n            const expireRefreshTime = decodedRefreshToken.exp;\n            const decodedAccessData = jwt_decode(tokens.access);\n            const expireAccessTime = decodedAccessData.exp;\n            const diff = expireAccessTime*1000 - Date.now();\n\n            if(diff < 1) {\n                console.log('Hapa maanake imesha-expire')\n                if((expireRefreshTime*1000 - Date.now) < 1) {\n                    setLoginIn(null)\n                    return;\n                }\n                \n                let response = await fetch(`${BACKEND_ORIGIN}/api/token/refresh/`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({'refresh': tokens.refresh})\n                })\n\n                let data = await response.json();\n                localStorage.setItem('authTokens', JSON.stringify(data));\n                let user = decodedAccessData.user_id;\n                setLoginIn(true);\n\n                // if we detect the user have been login then we needed to fetch the profile picture of the\n                // login user... How we do that is to query profile by that given user... You should make\n                // query to the  ViewProfileAPiView...\n                \n\n                let profile = await fetch(`${BACKEND_ORIGIN}/api/profile/`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id: user\n                    })\n                })\n\n                let fetchedProfile = await profile.json()\n                \n                \n                \n\n                setProfile(fetchedProfile.profile_picture)\n                console.log(fetchedProfile)\n                \n                if (!fetchedProfile.profile_picture) {\n                    // then i don't have profile picture we should use the default one...\n                    setHasProfile(false)\n                }\n                else {\n                    setHasProfile(true)\n                }\n\n                if(fetchedProfile.profile_picture === '/media/images/profile.png') {\n                    setHasDefaultProfile(true)\n                }\n\n                else {\n                    setHasDefaultProfile(false)\n                }\n                \n                // so now user has logged in you need to fetch cart from the backend\n                let check = await fetch(`${BACKEND_ORIGIN}/api/cartproducts/`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id: user\n                    })\n                })\n\n                let output = await check.json();\n\n                if(output.message) {\n                    // then here there is no any cart or cartproducts associated by that user\n                    return;\n                }\n\n                // otherwise here then we have the cartproducts associated by this user\n                if(output.length < 1) {\n                    // then user has cart but has no any cartproduct added to that cart\n                    return\n                }\n\n                // from all product count down quantity to display them...\n                let sum = 0\n                for (let out of output) {\n                    sum = out.quantity + sum;\n                }\n\n                setAmount(sum)\n                \n                // Hii nime-add kama ya kukazia but unaweza ukaitoa kama unaona haifaiii..\n                if(loginIn == null) {\n                    setAmount(null)\n                }\n            }\n\n            else {\n                console.log('I have active access token')\n                // Hapa inamaana accessToken has not expired.. User is aunthenticated...\n                setLoginIn(true);\n                let user = decodedAccessData.user_id;\n\n               \n                let profile = await fetch(`${BACKEND_ORIGIN}/api/profile/`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id:user\n                    })\n                })\n\n                let fetchedProfile = await profile.json()\n                \n\n                setProfile(fetchedProfile.profile_picture)\n                console.log(fetchedProfile)\n                \n                if (!fetchedProfile.profile_picture) {\n                    setHasProfile(false)\n                }\n\n                else {\n                    setHasProfile(true)\n                }\n\n                if(fetchedProfile.profile_picture === '/media/images/profile.png') {\n                    console.log('IM inside indeed')\n                    setHasDefaultProfile(true)\n                }\n                else {\n                    console.log('Im setting has default login to false')\n                    setHasDefaultProfile(false)\n                }\n\n                // so now user has logged in you need to fetch cart from the backend\n                let check = await fetch(`${BACKEND_ORIGIN}/api/cartproducts/`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id: user\n                    })\n                })\n\n                console.log('Im waiting for love')\n\n                let output = await check.json();\n                console.log(output)\n\n                if(output.message) {\n                    // then here there is no any cart or cartproducts associated by that user\n                    return;\n                }\n\n                // otherwise here then we have the cartproducts associated by this user\n                if(output.length < 1) {\n                    // then user has cart but has no any cartproduct added to that cart\n                    return\n                }\n\n                // from all product count down quantity to display them...\n                console.log('I have some cartproducts ')\n                let sum = 0\n                for (let out of output) {\n                    sum = out.quantity + sum;\n                }\n\n                setAmount(sum)\n                console.log('This is final amount')\n                console.log(amount)\n            }\n        }\n        catch(err) {\n            console.log(err.message)\n        }\n    }\n    // https://stackoverflow.com/questions/60476155/is-it-safe-to-use-ref-current-as-useeffects-dependency-when-ref-points-to-a-dom\n    const hunter = async () => {\n        // the aim of this function is to hunt and know the position of the\n        // Cart icon and then using that position right to position the label \n        // at the right of the cart...\n        if(kapu.current){\n            const dimensions = kapu.current.getBoundingClientRect();\n            console.log(dimensions.top, dimensions.right, dimensions.left, dimensions.bottom)\n            // console.log('This is the width of the kapuIcon');\n            // console.log(kapuLabel.current.offsetWidth, typeof kapuLabel.current.offsetWidth)\n            setDimension([dimensions.top, dimensions.right, dimensions.left, dimensions.bottom])\n        }\n    }\n\n\n    const fetchFromProducts = async () => {\n        // our input is in searchRef....\n        // fetch all data initiall and assign them inside qs\n        // hii itatusaidia sana sio kila muda tu-send request \n        // the server.. What you need to do is to get all and \n        // store them inside that qs....\n        let pro = await fetch(`${BACKEND_ORIGIN}/api/products/`);\n        let json = await pro.json()\n        console.log('This is the json for you')\n        console.log(json)\n        // Then from this I should convert all in array containing\n        // the Description -> category\n\n        let output = json.map(value => {\n            if(value.description) {\n                return `${(value.description)} => ${value.title} (${value.category})`\n            }\n            return `${value.title}`\n        }\n        )\n        console.log('This is converted one for you');\n        console.log(output)\n\n        setQr(output)\n    }\n\n\n    const onLogout = (e) => {\n        e.preventDefault();\n\n        // mpaka hapa huyu mtu amelogin so lazima hii value itakuwepo in localstorage\n        localStorage.removeItem('authTokens')\n        window.location.reload(); // this will refresh the page..\n    }\n\n    \n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        if ((searchRef.current.value).trim().length === 0) {\n            console.log('Im inside its empty')\n            // maanake user hajaandika chochote ko prevent default\n            return;\n        }\n\n        // otherwise everything is good then we should redirect to the \n        // result page...\n\n        console.log('Everything is good....')\n        Router.push({pathname:'/output', query:{search: searchRef.current.value}})\n    }\n\n    const searchFilter = async (e) => {\n        e.preventDefault();\n\n        // let clicked = e.target.id\n        // console.log('This is the clicked text for you')\n        // console.log(clicked)\n        let clicked = e.target.id\n        clicked = clicked.replace('=>', '')\n        clicked = clicked.replace('(', '')\n        clicked = clicked.replace(')', '')\n        Router.push({pathname:'/output', query: {search: clicked}})\n        // console.log('Now im here')\n        // //console.log(e.target.name)\n        // console.log(e.target.id)\n    }\n\n    const changeAttrs = async (e) => {\n        \n        setSearchTerm(e.target.value)  //.then(value => {console.log(value)})\n        console.log('IM change attrs')\n        \n        // // give credits to this guys https://stackoverflow.com/questions/442404/retrieve-the-position-x-y-of-an-html-element\n        // const top = searchRef.current.getBoundingClientRect();\n        // console.log('this is from change attrs')\n        // console.log(top.top, top.right, top.left, top.bottom)\n\n        // console.log(filteredQs.length)\n        // if(filteredQs.length > 0) {\n        //     // WE'RE INSIDE...\n        //     console.log('Hey im inside if filteredQs.length is greater than 0')\n        //     searchRef.current.style.borderRadius = '0px'\n        //     searchRef.current.style['border-top-right-radius'] = '30px'\n        //     searchRef.current.style['border-top-left-radius'] = '30px'\n\n        //     let startingPoint = (top.bottom).toString()\n        //     list.current.style.display = 'block'\n        //     list.current.style.top = startingPoint + 'px'\n        //     list.current.style.left = (top.left).toString() + 'px'\n        //     //list.current.style.right = (top.bottom).toString() + 'px'\n            \n        //     list.current.style.width = (searchRef.current.offsetWidth).toString() + 'px'\n            \n        // }\n        \n    }\n\n    const filterToggleOff = async (e) => {\n\n        if (searchRef.current) {\n            console.log('the toggle off is executing')\n            list.current.style.display = 'none'\n                \n\n            searchRef.current.style.borderRadius = '30px'\n        }\n    }\n\n    // Ko nishajua shida ipo wap ni kwamba all these onEffect get executed intially when the\n    // component rendered ndo maana inasababisha hiyo error au misbehave \n    // unayokutana nayo hapo ko nakushauri embu rudia hii concept ya useEffect coz hizi\n    // useEffect zote ulizoziandika hapa hazina tofauti all of them get executed on mount.....\n    useEffect(() => {\n        \n        // so hii itakua detected if the width of the screen is from 900 and so on\n        console.log('Hey im here but this sreen.width is obstacle to me')\n        \n        \n        let filtered = qr.filter(value => {\n            if (searchTerm === \"\") {\n                return;\n            }\n            else if (searchTerm === null) {\n                return;\n            }\n            else if(value.toString().toLowerCase().includes(searchTerm.toLowerCase())) {\n                return value\n            }\n\n            return console.log('Nothing happened')\n        })\n\n        setFilteredQs(filtered)\n    \n\n\n    }, [searchTerm])\n\n\n    // // this is executed on Change and not on mounting of the state..\n    useEffect(() => {\n        console.log('This is the search ref for you')\n        console.log(searchRef)\n        if(searchRef.current !== null) {\n            // this means on mount length == 0, then now it say it changed to length of 34... check which has filter..\n            if (filteredQs.length === 0) {\n                // then search bar should be restored in initial position...\n                // Kuna mtu ana-irestore in its initial position i think in useEffect ya hapo juu....\n                list.current.style.display = 'none'\n                \n\n                searchRef.current.style.borderRadius = '30px'\n            }\n\n            else {\n                const top = searchRef.current.getBoundingClientRect();\n                console.log('this is from useEffect hook')\n                console.log(top.top, top.right, top.left, top.bottom)\n        \n                searchRef.current.style.borderRadius = '0px'\n                searchRef.current.style['border-top-right-radius'] = '30px'\n                searchRef.current.style['border-top-left-radius'] = '30px'\n                list.current.style.display = 'block'\n\n                list.current.style.top = (top.bottom).toString() + 'px'\n                list.current.style.left = (top.left).toString() + 'px'\n                list.current.style.width = (searchRef.current.offsetWidth).toString() + 'px'\n\n                \n            }\n        }\n    }, [filteredQs])\n\n    // this is how to track the changes of ref DOM element...\n    // https://stackoverflow.com/questions/60476155/is-it-safe-to-use-ref-current-as-useeffects-dependency-when-ref-points-to-a-dom\n    useEffect(() => {\n        hunter();\n    }, [kapu.current])\n\n    // Ko huyu dimension anavyokuwa assigned then us we position the label elements..\n\n    useEffect(() => {\n        // First check if kapuLabel ref is found because for one which has zero\n        // cartproducts we don't have label on cart..\n        console.log('IM HERE NOW', kapuLabel.current)\n        if(kapuLabel.current) {\n            kapuLabel.current.style.position = 'absolute';\n            \n            kapuLabel.current.style.top = dimension[0]\n            kapuLabel.current.style.right = dimension[1]\n            kapuLabel.current.style.fontWeight = 'bold'\n\n            console.log('LETS PREVIEW...')\n            console.log(kapuLabel.current.style.right, typeof kapuLabel.current.style.right);\n            kapuLabel.current.style.right = parseInt(dimension[1]) - (kapuLabel.current.offsetWidth * 0.9)\n        }\n    }, [dimension])\n\n    useEffect(() => {\n        \n        fetchSomeData();\n        fetchFromProducts();\n\n        const fetchInterval = setInterval(fetchSomeData, 50000000)\n\n        \n        // this code will be executed initially when component is mounted..\n        // this video explains much more https://www.youtube.com/watch?v=0ZJgIjIuY7U\n        console.log('Hello world')\n        console.log(amount)\n\n        return () => {\n            clearInterval(fetchInterval)\n        }\n    }, [])\n\n\n   \n    \n    return (\n        <div onClick={filterToggleOff}>\n   \n            <div className={styles.main}>\n                <Head>\n                    <title>PERSONALYZER</title>\n                    <link\n                        rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"\n                    />\n                    <link\n                        rel=\"stylesheet\"\n                        href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\">\n                    </link>\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n                </Head>\n                <div ref={topDiv}>\n                    <div className={styles.top}>\n                        <section className= {styles.sectionStyle}>\n                            <div className={styles.behaveLikenav}>\n                                <MediaQuery minWidth={200} maxWidth={576}>\n\n                                    {/* <p>Im your phone, i need sidebar for me</p> */}\n\n                                    <form className={styles.inlineForm} onSubmit={handleSubmit}>\n                                        <p className={styles.brand} onClick={() => Router.push({pathname: '/'})}>\n                                            BRAND\n                                        </p>\n                                        <input \n                                            ref={searchRef} \n                                            type='text' \n                                            placeholder='Type and search...' \n                                            className={styles.search}\n                                            onChange = { changeAttrs }\n                                            // onChange= { (e) => setSearchTerm(e.target.value) }\n                                        />\n                                        <img \n                                            src='/static/images/magnifying-glass.png' \n                                            alt='search-icon' \n                                            height={20} \n                                            width={20}\n                                            title='search'\n                                            onClick={handleSubmit}\n                                            className={styles.searchIcon}\n                                        />\n\n                                        { amount ? (\n                                            <Link route='/cart'>\n                                                <span>\n                                                    <img \n                                                        src = '/static/images/shopping-cart.png' \n                                                        alt='search-icon' \n                                                        height={20} \n                                                        width={20} \n                                                        title='Cart' \n                                                        className={styles.shop}\n                                                        ref={kapu}\n                                                    />\n                                                    <span ref={kapuLabel} className={styles.amo}>\n                                                        {amount}\n                                                    </span>\n                                                </span>\n                                            </Link>\n                                        ) : (\n                                            <Link route='/cart'>\n                                                <span>\n                                                <img \n                                                    src = '/static/images/shopping-cart.png' \n                                                    alt='search-icon' \n                                                    height={20} \n                                                    width={20} \n                                                    title='Cart' \n                                                    className={styles.shop}\n                                                    ref={kapu}\n                                                />\n                                                </span>\n                                            </Link>\n                                        )}\n\n                                        {/* <img \n                                            src = '/static/images/shopping-cart.png' \n                                            alt='search-icon' \n                                            height={20} \n                                            width={20} \n                                            title='Cart' \n                                            className={styles.shop}\n                                        /> */}\n\n                                        <div className={styles.bar} onClick={toggleSidebarOn}>\n\n                                            <Icon \n                                                name='ellipsis vertical' \n                                            \n                                                color='grey' \n                                            />\n                                        </div>\n\n                                    </form>\n                                    \n                                </MediaQuery>\n                                <MediaQuery minWidth={577} maxWidth={899}>\n                                    <form className={styles.inlineForm} onSubmit={handleSubmit}>\n                                        <p className={styles.brand} onClick={() => Router.push({pathname: '/'})}>\n                                            BRAND\n                                        </p>\n                                        <input \n                                            ref={searchRef} \n                                            type='text' \n                                            placeholder='Type and search...' \n                                            className={styles.search}\n                                            onChange = {changeAttrs}\n                                            // onChange= { (e) => setSearchTerm(e.target.value) }\n                                        />\n                                        <img \n                                            src='/static/images/magnifying-glass.png' \n                                            alt='search-icon' \n                                            height={20} \n                                            width={20}\n                                            title='search'\n                                            onClick={handleSubmit}\n                                            className={styles.searchIcon}\n                                        />\n\n                                        {/* <img \n                                            src = '/static/images/shopping-cart.png' \n                                            alt='search-icon' \n                                            height={20} \n                                            width={20} \n                                            title='Cart' \n                                            className={styles.shop}\n                                        /> */}\n\n                                        { amount ? (\n                                            <Link route='/cart'>\n                                                <span>\n                                                    <img\n                                                        src = '/static/images/shopping-cart.png' \n                                                        alt='search-icon' \n                                                        height={23} \n                                                        width={23} \n                                                        title='Cart' \n                                                        className={styles.shop}\n                                                        ref={kapu}\n                                                    />\n                                                    <span ref={kapuLabel} className={styles.amo}>\n                                                        {amount}\n                                                    </span>\n                                                </span>\n                                            </Link>\n                                        ) : (\n                                            <Link route='/cart'>\n                                                <span>\n                                                    <img\n                                                        src = '/static/images/shopping-cart.png' \n                                                        alt='search-icon' \n                                                        height={23} \n                                                        width={23} \n                                                        title='Cart' \n                                                        className={styles.shop}\n                                                        ref={kapu}\n                                                    />\n                                                </span>\n                                            </Link>\n                                        )}\n\n                                        <div className={styles.bar} onClick={toggleSidebarOn}>\n\n                                            <Icon \n                                                name='ellipsis vertical' \n                                            \n                                                color='grey' \n                                            />\n                                        </div>\n\n                                    </form>                                </MediaQuery>\n                                <MediaQuery minWidth={900} maxWidth={1199}>\n                                    <form className={styles.inlineForm} onSubmit={handleSubmit}>\n                                        <p className={styles.brand} onClick={() => Router.push({pathname:'/'})}>BRAND</p>\n                                        <input ref={searchRef} type=\"text\" placeholder='Search by jewely/product name...' className={styles.search} list='browsers' onChange={ changeAttrs }/>\n                                        \n                                        <img  src = '/static/images/magnifying-glass.png' alt='search-icon' height={28} width={28} className={styles.searchIcon} title='Search' onClick={ handleSubmit } />\n                                        {/* <Link route = \"https://www.google.com\">\n                                            <a className={styles.aboutUs}><span>ABOUT US</span></a>    \n                                        </Link> */}\n                                        {/* <Link route = \"https://www.instagram.com/\">\n                                            <a className={styles.aboutGuide}><span>GUIDE</span></a>    \n                                        </Link>   ---- This guide is not needed we can assume it as 'Contacts' or links to social media.... we'll create footer for this...*/}\n\n                                        {/*  pressing enter key when input is focused 'clicks' first button on form #12643 \n                                        https://github.com/angular/angular/issues/12643 */}\n                                        { props.isAunthenticated ? (\n                                            <Link route = \"/profile/\">\n\n                                                { hasProfile ? (\n                                                    \n                                                    hasDefaultProfile ? (\n                                                        <img src='/static/images/user-grey.png' alt=\"Profile\" height={40} width={40} className = {styles.proPic} onMouseOver={() => profileRef.current.style.display='block'} onMouseOut={() => profileRef.current.style.display = 'none'} />    \n\n                                                    ) : (\n                                                        <img src={`${BACKEND_ORIGIN}${profile}`} alt=\"Profile\" height={40} width={40} className = {styles.customPro} onMouseOver={() => profileRef.current.style.display='block'} onMouseOut={() => profileRef.current.style.display = 'none'} />    \n                                                    )\n                                                    \n                                                ) : (\n                                                    <img src='/static/images/user-grey.png' alt=\"Profile\" height={40} width={40} className = {styles.proPic} onMouseOver={() => profileRef.current.style.display='block'} onMouseOut={() => profileRef.current.style.display = 'none'} />    \n                                                )}\n                                            </Link>\n                                        )\n                                        : (\n                                            \n                                            <Link route = \"/register/\">\n                                                <span className = {styles.proPic}>\n                                                    <Button content='Login/Register' color='black' type='button' />\n                                                </span>  \n                                            </Link> \n                                        )}\n\n                                        { amount ? (\n                                            <Link route='/cart'>\n\n                                            <span className={styles.cartIcon} onClick={() => console.log('Hello world how are you!')}>\n                                            {/* hapa ili hii span ya label ionekane tutaad hapa props/flag na if statement kama kwenye isAunthenticated then tuta-enda kwenye addToCart when someone add something to cart then it will be displayed */}\n                                            \n                                            <img \n                                                src = '/static/images/shopping-cart.png' \n                                                alt='search-icon' \n                                                height={25} \n                                                width={25} \n                                                title='Cart' \n                                                ref={kapu}\n                                            />\n\n                                                <span className={styles.amo} ref={kapuLabel}>\n                                                    {amount}\n                                                </span>\n                                            </span>\n                                            </Link>\n                                        ) : (\n                                            <Link route='/cart'>\n                                            <span className={styles.cartIcon} onClick={() => console.log('Hello world how are you!')}>\n                                            {/* hapa ili hii span ya label ionekane tutaad hapa props/flag na if statement kama kwenye isAunthenticated then tuta-enda kwenye addToCart when someone add something to cart then it will be displayed */}\n                                        \n                                                <img src = '/static/images/shopping-cart.png' alt='search-icon' height={25} width={25} title='Cart' />\n                                            </span>\n                                            </Link>\n                                        )}\n                                    </form>\n                                </MediaQuery>\n\n                                <MediaQuery minWidth={1200} maxWidth={1600}>\n                                    <form className={styles.inlineForm} onSubmit={handleSubmit}>\n                                        <p className={styles.brand} onClick={() => Router.push({pathname:'/'})}>BRAND</p>\n                                        <input ref={searchRef} type=\"text\" placeholder='Search by jewely/product name...' className={styles.search} list='browsers' onChange={ changeAttrs }/>\n\n                                        \n                                        <img  src = '/static/images/magnifying-glass.png' alt='search-icon' height={33} width={33} className={styles.searchIcon} title='Search' onClick={ handleSubmit } />\n                                        {/* <Link route = \"https://www.google.com\">\n                                            <a className={styles.aboutUs}><span>ABOUT US</span></a>    \n                                        </Link>\n                                        <Link route = \"https://www.instagram.com/\">\n                                            <a className={styles.aboutGuide}><span>GUIDE</span></a>    \n                                        </Link> */}\n\n                                        {/*  pressing enter key when input is focused 'clicks' first button on form #12643 \n                                        https://github.com/angular/angular/issues/12643 */}\n                                        { props.isAunthenticated ? (\n                                            <Link route = \"/profile/\">\n\n                                                { hasProfile ? (\n                                                    \n                                                    hasDefaultProfile ? (\n                                                        <img src='/static/images/user-grey.png' alt=\"Profile\" height={40} width={40} className = {styles.proPic} onMouseOver={() => profileRef.current.style.display='block'} onMouseOut={() => profileRef.current.style.display = 'none'} />    \n\n                                                    ) : (\n                                                        <img src={`${BACKEND_ORIGIN}${profile}`} alt=\"Profile\" height={40} width={40} className = {styles.customPro} onMouseOver={() => profileRef.current.style.display='block'} onMouseOut={() => profileRef.current.style.display = 'none'} />    \n                                                    )\n                                                    \n                                                ) : (\n                                                    <img src='/static/images/user-grey.png' alt=\"Profile\" height={40} width={40} className = {styles.proPic} onMouseOver={() => profileRef.current.style.display='block'} onMouseOut={() => profileRef.current.style.display = 'none'} />    \n                                                )}\n                                            </Link>\n                                        )\n                                        : (\n                                            \n                                            <Link route = \"/register/\">\n                                                <span className = {styles.proPic}>\n                                                    <Button content='Login/Register' color='black' type='button' />\n                                                </span>  \n                                            </Link> \n                                        )}\n\n                                        { amount ? (\n                                            <Link route='/cart'>\n\n                                            <span className={styles.cartIcon} onClick={() => console.log('Hello world how are you!')}>\n                                            {/* hapa ili hii span ya label ionekane tutaad hapa props/flag na if statement kama kwenye isAunthenticated then tuta-enda kwenye addToCart when someone add something to cart then it will be displayed */}\n                                            \n                                            <img \n                                                src = '/static/images/shopping-cart.png' \n                                                alt='search-icon' \n                                                height={33} \n                                                width={33} \n                                                title='Cart' \n                                                ref={kapu}\n                                            />\n\n                                                <span className={styles.amo} ref={kapuLabel}>\n                                                    {amount}\n                                                </span>\n                                            </span>\n                                            </Link>\n                                        ) : (\n                                            <Link route='/cart'>\n                                            <span className={styles.cartIcon} onClick={() => console.log('Hello world how are you!')}>\n                                            {/* hapa ili hii span ya label ionekane tutaad hapa props/flag na if statement kama kwenye isAunthenticated then tuta-enda kwenye addToCart when someone add something to cart then it will be displayed */}\n                                        \n                                                <img src = '/static/images/shopping-cart.png' alt='search-icon' height={33} width={33} title='Cart' />\n                                            </span>\n                                            </Link>\n                                        )}\n                                    </form>\n                                </MediaQuery>\n\n                                <MediaQuery minWidth={1601}>\n                                    \n                                <form className={styles.inlineForm} onSubmit={handleSubmit}>\n                                        <p className={styles.brand} onClick={() => Router.push({pathname:'/'})}>BRAND</p>\n                                        <input ref={searchRef} type=\"text\" placeholder='Search by jewely/product name...' className={styles.search} list='browsers' onChange={ changeAttrs }/>\n\n                                        \n                                        <img  src = '/static/images/magnifying-glass.png' alt='search-icon' height={33} width={33} className={styles.searchIcon} title='Search' onClick={ handleSubmit } />\n                                        {/* <Link route = \"https://www.google.com\">\n                                            <a className={styles.aboutUs}><span>ABOUT US</span></a>    \n                                        </Link>\n                                        <Link route = \"https://www.instagram.com/\">\n                                            <a className={styles.aboutGuide}><span>GUIDE</span></a>    \n                                        </Link> */}\n\n                                        {/*  pressing enter key when input is focused 'clicks' first button on form #12643 \n                                        https://github.com/angular/angular/issues/12643 */}\n                                        { props.isAunthenticated ? (\n                                            <Link route = \"/profile/\">\n\n                                                { hasProfile ? (\n                                                    \n                                                    hasDefaultProfile ? (\n                                                        <img src='/static/images/user-grey.png' alt=\"Profile\" height={40} width={40} className = {styles.proPic} onMouseOver={() => profileRef.current.style.display='block'} onMouseOut={() => profileRef.current.style.display = 'none'} />    \n\n                                                    ) : (\n                                                        <img src={`${BACKEND_ORIGIN}${profile}`} alt=\"Profile\" height={40} width={40} className = {styles.customPro} onMouseOver={() => profileRef.current.style.display='block'} onMouseOut={() => profileRef.current.style.display = 'none'} />    \n                                                    )\n                                                    \n                                                ) : (\n                                                    <img src='/static/images/user-grey.png' alt=\"Profile\" height={40} width={40} className = {styles.proPic} onMouseOver={() => profileRef.current.style.display='block'} onMouseOut={() => profileRef.current.style.display = 'none'} />    \n                                                )}\n                                            </Link>\n                                        )\n                                        : (\n                                            \n                                            <Link route = \"/register/\">\n                                                <span className = {styles.proPic}>\n                                                    <Button content='Login/Register' color='black' type='button' />\n                                                </span>  \n                                            </Link> \n                                        )}\n\n                                        { amount ? (\n                                            <Link route='/cart'>\n\n                                            <span className={styles.cartIcon} onClick={() => console.log('Hello world how are you!')}>\n                                            {/* hapa ili hii span ya label ionekane tutaad hapa props/flag na if statement kama kwenye isAunthenticated then tuta-enda kwenye addToCart when someone add something to cart then it will be displayed */}\n                                            \n                                            <img \n                                                src = '/static/images/shopping-cart.png' \n                                                alt='search-icon' \n                                                height={33} \n                                                width={33} \n                                                title='Cart'\n                                                ref={kapu}\n                                            />\n\n                                                <span className={styles.amo} ref={kapuLabel}>\n                                                    {amount}\n                                                </span>\n                                            </span>\n                                            </Link>\n                                        ) : (\n                                            <Link route='/cart'>\n                                            <span className={styles.cartIcon} onClick={() => console.log('Hello world how are you!')}>\n                                            {/* hapa ili hii span ya label ionekane tutaad hapa props/flag na if statement kama kwenye isAunthenticated then tuta-enda kwenye addToCart when someone add something to cart then it will be displayed */}\n                                        \n                                                <img src = '/static/images/shopping-cart.png' alt='search-icon' height={33} width={33} title='Cart' />\n                                            </span>\n                                            </Link>\n                                        )}\n                                    </form>\n                                </MediaQuery>\n                            </div>\n                        </section>\n\n                        {/* this is the addition */}\n                        <div id=\"browsers\" className={styles.dlist} ref={list}>\n                            \n                            {/* https://bobbyhadz.com/blog/javascript-get-substring-after-specific-character \n                            https://bobbyhadz.com/blog/javascript-get-substring-before-specific-character\n                            imenizingua kwenye ku-render image but sio ishu hapa ishu muhimu kwanza ni ku-deal na\n                            query on frontend to lookup in deep like in backend then kila kitu kikiwa sawa \n                            tutaangalia na ishu ya image hii then tufunge kazi.....\n                            \n                            */}\n                            \n                            \n                            {/* e.target.value somethimes it returns value when we click and sometimes it return\n                            <empty string> hii ni kwa sababu ni parent pekeake ndo mwenye hiyo e.target.id/value but\n                            his children does not have so when u click it children then it will return <empty string>\n                            ... Hii link imeelezea vizuri kabisa hii ishu na kwangu nime-irekebisha kwa kuweka \n                            id in all parent and his children elements... Na kila kitu kimekaa sawa...\n                            https://stackoverflow.com/questions/9864286/when-tracking-which-elements-were-clicked-e-target-id-is-sometimes-empty */}\n                            <MediaQuery minWidth={200} maxWidth={576}>\n                            {\n                                filteredQs.filter((value, index) => index < 6).map((value, index) => (\n                                    value.includes('=>') ? (\n                                        <p className={styles.query} key={index} id={value} onClick={searchFilter}>\n                                            \n                                            <span className={styles.cat} id={value}>{`${(value.substr(0, value.indexOf('='))).substr(0, 12)}...`}</span>\n                                            <span className={styles.tit} id={value}>{`${value.substr(value.indexOf('>') + 1)}`}</span>\n                                            \n                                        </p>\n                                        \n                                    ): (\n                                        <p className={styles.query} key={index} id={value} onClick={searchFilter}>\n                                            {value}\n                                        </p>\n                                    )\n                                    \n                                ))\n                            }\n                            </MediaQuery>\n\n                            <MediaQuery minWidth={577}>\n                            {\n                                filteredQs.filter((value, index) => index < 10).map((value, index) => (\n                                    value.includes('=>') ? (\n                                        <p className={styles.query} key={index} id={value} onClick={searchFilter}>\n                                            \n                                            <span className={styles.cat} id={value}>{`${(value.substr(0, value.indexOf('='))).substr(0, 12)}...`}</span>\n                                            <span className={styles.tit} id={value}>{`${value.substr(value.indexOf('>') + 1)}`}</span>\n                                            \n                                        </p>\n                                        \n                                    ): (\n                                        <p className={styles.query} key={index} id={value} onClick={searchFilter}>\n                                            {value}\n                                            \n                                        </p>\n                                    )\n                                    \n                                ))\n                            }\n                            </MediaQuery>\n                        </div>\n                        <div className={styles.toggle} ref={profileRef}>\n                            <div className={styles.toggle1} onMouseOver={() => profileRef.current.style.display='block'} onMouseOut={() => profileRef.current.style.display = 'none'}>\n                                <p className={styles.int} onClick={ () => Router.push({pathname: '/profile'})}>Profile</p>\n                                <p className={styles.int} onClick={ () => Router.push({pathname:'/cart'}) }>My Cart</p>\n                                <p className={styles.int} onClick={onLogout}>Logout</p>\n                            </div>\n                        </div>\n                    </div>\n\n                    {props.children}\n                </div>\n                <div className={styles.sidebar} ref={sideBarRef}>\n                    <div className={styles.ss}>\n                        {/* if user has not login then display both login and register buttons */}\n                        <span className={styles.notLogin}>Register</span>\n                        <br />\n                        <br />\n                        <span className={styles.notLogin}>Sign up</span>\n                        <hr className={styles.hrulb} />\n                        {/* otherwise we should have big width displaying your picture and name */}\n\n                        <p>About us</p>\n                        <p>Contacts</p>\n                        <p>My cart</p>\n                    </div>\n                    \n                    <div className={styles.close} onClick={toggleSidebarOff}>\n                        &times;\n                    </div>\n                </div>\n            \n            </div>\n                \n            \n\n            <footer className={styles.foo}>\n\n                <MediaQuery minWidth={200} maxWidth={400}>\n                    <div className={styles.bobo} style={{overflowX: 'hidden'}}>\n                  \n                        <div className={styles.kibe}>\n                            <div className={styles.links}>\n                                <span>\n                                    <img src='../static/images/pin.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                    Kariakoo, Dar es salaam.\n                                </span>\n                                \n                            </div>\n                            \n                            <div className={styles.links} style={{paddingTop: '1%'}}>\n                                <span>\n                                    <img src='../static/images/tc2.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                    +255756144060.\n                                </span>\n                            </div>\n\n                            <div className={styles.links} style={{paddingTop: '1%'}}>\n                                <span>\n                                    <img src='../static/images/email.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                    support@personalizer.co.tz\n                                </span>\n                            </div>\n                        </div>\n                    \n                        <div className={styles.kibe2}>\n                            <p>Follow Us</p>\n                            <a className={styles.lin} target='_blank' href='https://google.com/'>\n                                <Icon name='facebook' size='large' />\n\n                            </a>\n                            <a className={styles.lin} target='_blank' href='https://google.com/'>\n                                <Icon name='instagram' size='large' />\n                            </a>\n                        </div>\n                            \n                    </div>     \n                </MediaQuery>\n\n                <MediaQuery minWidth={401} maxWidth={899}>\n                    <div className={styles.bobo} style={{overflowX: 'hidden'}}>\n                        <Grid>\n                            <Grid.Column width={11}>\n                                <div className={styles.kibe}>\n                                    <div className={styles.links}>\n                                        <span>\n                                            <img src='../static/images/pin.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                            Kariakoo, Dar es salaam.\n                                        </span>\n                                        \n                                    </div>\n                                    \n                                    <div className={styles.links} style={{paddingTop: '1%'}}>\n                                        <span>\n                                            <img src='../static/images/tc2.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                            +255756144060.\n                                        </span>\n                                    </div>\n\n                                    <div className={styles.links} style={{paddingTop: '1%'}}>\n                                        <span>\n                                            <img src='../static/images/email.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                            support@personalizer.co.tz\n                                        </span>\n                                    </div>\n                                </div>\n                            </Grid.Column>\n                            <Grid.Column width={5}>\n                                <div className={styles.kibe2}>\n                                    <p>Follow Us</p>\n                                    <a className={styles.lin} target='_blank' href='https://google.com/'>\n                                        <Icon name='facebook' size='large' />\n\n                                    </a>\n                                    <a className={styles.lin} target='_blank' href='https://google.com/'>\n                                        <Icon name='instagram' size='large' />\n                                    </a>\n                                </div>\n                            </Grid.Column>\n                        </Grid>\n                    </div>     \n                        \n                </MediaQuery>\n                \n\n                <MediaQuery minWidth={900} maxWidth={1199}>\n                    <div className={styles.bobo} style={{overflowX: 'hidden'}}>\n                        <Grid>\n                            <Grid.Column width={8}>\n                                <div className={styles.kibe}>\n                                    <div className={styles.links}>\n                                        <span>\n                                            <img src='../static/images/pin.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                            Kariakoo, Dar es salaam.\n                                        </span>\n                                        \n                                    </div>\n                                    \n                                    <div className={styles.links} style={{paddingTop: '1%'}}>\n                                        <span>\n                                            <img src='../static/images/tc2.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                            +255756144060.\n                                        </span>\n                                    </div>\n\n                                    <div className={styles.links} style={{paddingTop: '1%'}}>\n                                        <span>\n                                            <img src='../static/images/email.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                            support@personalizer.co.tz\n                                        </span>\n                                    </div>\n                                </div>\n                            </Grid.Column>\n                            <Grid.Column width={8}>\n                                <div className={styles.kibe2}>\n                                    <p>Follow Us</p>\n                                    <a className={styles.lin} target='_blank' href='https://google.com/'>\n                                        <Icon name='facebook' size='large' />\n\n                                    </a>\n                                    <a className={styles.lin} target='_blank' href='https://google.com/'>\n                                        <Icon name='instagram' size='large' />\n                                    </a>\n                                </div>\n                            </Grid.Column>\n                        </Grid>\n                    </div>     \n                        \n                </MediaQuery>\n\n                <MediaQuery minWidth={1200} maxWidth={1651}>\n                    <div className={styles.bobo} style={{overflowX: 'hidden'}}>\n                        <Grid>\n                            <Grid.Column width={8}>\n                                <div className={styles.kibe}>\n                                    <div className={styles.links}>\n                                        <span>\n                                            <img src='../static/images/pin.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                            Kariakoo, Dar es salaam.\n                                        </span>\n                                        \n                                    </div>\n                                    \n                                    <div className={styles.links} style={{paddingTop: '1%'}}>\n                                        <span>\n                                            <img src='../static/images/tc2.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                            +255756144060.\n                                        </span>\n                                    </div>\n\n                                    <div className={styles.links} style={{paddingTop: '1%'}}>\n                                        <span>\n                                            <img src='../static/images/email.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                            support@personalizer.co.tz\n                                        </span>\n                                    </div>\n                                </div>\n                            </Grid.Column>\n                            <Grid.Column width={8}>\n                                <div className={styles.kibe2}>\n                                    <p>Follow Us</p>\n                                    <a className={styles.lin} target='_blank' href='https://google.com/'>\n                                        <Icon name='facebook' size='large' />\n\n                                    </a>\n                                    <a className={styles.lin} target='_blank' href='https://google.com/'>\n                                        <Icon name='instagram' size='large' />\n                                    </a>\n                                </div>\n                            </Grid.Column>\n                        </Grid>\n                    </div>     \n                        \n                </MediaQuery>\n\n                <MediaQuery minWidth={1652}>\n                    <div className={styles.bobo} style={{overflowX: 'hidden'}}>\n                        <Grid>\n                            <Grid.Column width={8}>\n                                <div className={styles.kibe}>\n                                    <div className={styles.links}>\n                                        <span>\n                                            <img src='../static/images/pin.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                            Kariakoo, Dar es salaam.\n                                        </span>\n                                        \n                                    </div>\n                                    \n                                    <div className={styles.links} style={{paddingTop: '1%'}}>\n                                        <span>\n                                            <img src='../static/images/tc2.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                            +255756144060.\n                                        </span>\n                                    </div>\n\n                                    <div className={styles.links} style={{paddingTop: '1%'}}>\n                                        <span>\n                                            <img src='../static/images/email.png' width={15} height={15} style={{marginRight: '10px'}} />\n                                            support@personalizer.co.tz\n                                        </span>\n                                    </div>\n                                </div>\n                            </Grid.Column>\n                            <Grid.Column width={8}>\n                                <div className={styles.kibe2}>\n                                    <p>Follow Us</p>\n                                    <a className={styles.lin} target='_blank' href='https://google.com/'>\n                                        <Icon name='facebook' size='large' />\n\n                                    </a>\n                                    <a className={styles.lin} target='_blank' href='https://google.com/'>\n                                        <Icon name='instagram' size='large' />\n                                    </a>\n                                </div>\n                            </Grid.Column>\n                        </Grid>\n                    </div>     \n                        \n                </MediaQuery>\n            </footer>\n        </div>\n    );\n};","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/components/NavBar3.js",["398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442"],[],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Container, Button, Icon, Label, Grid } from \"semantic-ui-react\";\nimport Head from \"next/head\";\nimport styles from \"../static/css/index.module.css\";\nimport { Link } from \"../routes\";\nimport Router from \"next/router\";\nimport jwt_decode from \"jwt-decode\";\nimport BACKEND_ORIGIN from \"../utils/domain\";\n\n// import MediaQuery from 'react-responsive'  // https://www.npmjs.com/package/react-responsive\nimport dynamic from \"next/dynamic\";\n\nconst MediaQuery = dynamic(\n  () => {\n    return import(\"react-responsive\");\n  },\n  { ssr: false }\n);\n// Hii jinsi ya ku-import hivi ndo ime-solve tatizo la media-Queries kukataa kusema kuwa there is\n// Hydaration error na now kila kitu kinaenda sawa nahisi kila unavyooimport hii ssr inabidi iwe\n// False... Give credit to this man...https://lightrun.com/answers/yocontra-react-responsive-nextjs-expected-server-html-to-contain-a-matching-div-in-div\n// Haa hii error imeniangaisha sana mpaka nikataka nikate tamaa but now imekuwa solved...\nexport default (props) => {\n  const userNameRef = useRef(null);\n  const actualPreview = useRef(null);\n  const showProfile = useRef(null);\n  const changeProfileForm = useRef(null);\n  const spanToChange = useRef(null);\n  const imageToDisappear = useRef(null);\n  const timerRef = useRef(null);\n  const passInp = useRef(null);\n  const oldPassInp = useRef(null);\n  const err = useRef(null);\n  const heade = useRef(null);\n  const changePass = useRef(null);\n  const topDiv = useRef(null);\n  const sideBarRef = useRef(null);\n  const profileRef = useRef(null);\n  const searchRef = useRef(null);\n  const list = useRef(null);\n  const kapu = useRef(null);\n  const kapuLabel = useRef(null);\n  const [profile_file, setProfileFile] = useState(null);\n  const [profile_pic, setProfilePic] = useState(null);\n  const [jina, setJina] = useState(\"\");\n  const [dimension, setDimension] = useState(null);\n  const [hasDefaultProfile, setHasDefaultProfile] = useState(true);\n  const [profile, setProfile] = useState(\"\");\n  const [oldPassword, setOldPassword] = useState(\"\");\n  const [userId, setUserId] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [hasProfile, setHasProfile] = useState(false);\n  const [qr, setQr] = useState([]);\n  const [filteredQs, setFilteredQs] = useState([]);\n  const [loginIn, setLoginIn] = useState(null);\n  const [amount, setAmount] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(null);\n\n  const toggleSidebarOn = async () => {\n    window.scrollTo(0, 0);\n    console.log(\"HEY THIS IS PROPS OF ISANTHENTICATD\");\n    console.log(props.isAunthenticated);\n\n    sideBarRef.current.style.display = \"block\";\n    topDiv.current.style.pointerEvents = \"none\";\n    document.body.style.overflow = \"hidden\";\n    topDiv.current.style.opacity = \"0.1\";\n\n    console.log(\"Sometimes inafeli\");\n  };\n\n  const preview = async (e) => {\n    console.log(\"Hello world\");\n\n    const file = e.target.files[0];\n\n    console.log(\"This is the file on the preview\");\n    console.log(file);\n\n    if (file && file.type.substr(0, 5) === \"image\") {\n      setProfileFile(file);\n\n      const reader = new FileReader();\n      reader.onload = () => {\n        setProfilePic(reader.result);\n\n        console.log(\"This is the new image\");\n        actualPreview.current.style.backgroundImage = `url(${reader.result})`;\n        actualPreview.current.style.backgroundSize = \"100% 100%\";\n        actualPreview.current.style.backgroundRepeat = \"no-repeat\";\n      };\n\n      reader.readAsDataURL(file);\n    } else {\n      setProfilePic(null);\n    }\n  };\n\n  const redeamMeToProfile = async (e) => {\n    changeProfileForm.current.style.display = \"none\";\n    showProfile.current.style.display = \"block\";\n  };\n\n  const editPro = async (e) => {\n    console.log(\"Im adding changes to update profile\");\n    e.preventDefault();\n    const file = profile_file;\n\n    if (file || jina.trim().length > 0) {\n      console.log(\"Hey there is name and image associtated\");\n      console.log(file, jina);\n\n      const image = file;\n      const uploadData = new FormData();\n      uploadData.append(\"id\", userId);\n      uploadData.append(\"image\", image);\n\n      jina.trim().length > 1\n        ? uploadData.append(\"name\", jina)\n        : uploadData.append(\"name\", \"431EFD#\");\n\n      const response = await fetch(`${BACKEND_ORIGIN}/api/edit/`, {\n        method: \"POST\",\n        body: uploadData,\n      });\n\n      const data = await response.json();\n      console.log(\"This is the response after updating profile\");\n      console.log(data);\n\n      fetchSomeData();\n      redeamMeToProfile();\n    } else {\n      console.log(\"User is trying to post null data...\");\n    }\n  };\n\n  const showChangeProfile = async (e) => {\n    console.log(\"me waiting for something\");\n    changeProfileForm.current.style.display = \"block\";\n    showProfile.current.style.display = \"none\";\n    userNameRef.current.value = name;\n  };\n\n  const changeNyila = async () => {\n    if (changePass.current.style.display === \"none\") {\n      heade.current.style.fontSize = \"18px\";\n      heade.current.style.color = \"white\";\n      heade.current.style.marginBottom = \"0%\";\n      heade.current.style.paddingBottom = \"0%\";\n      changePass.current.style.display = \"block\";\n    } else {\n      changePass.current.style.display = \"none\";\n      heade.current.style.fontSize = \"16px\";\n      heade.current.style.color = \"grey\";\n    }\n  };\n\n  const changePassword = async (e) => {\n    e.preventDefault();\n    console.log(\"Hello im trying to change password...\");\n    console.log(oldPassword, password, userId);\n    if (oldPassword.trim().length === 0 || password.trim().length === 0) {\n      // hey we don't accept empty fields...\n      setErrorMessage(\"We don't accept empty fields!\");\n      imageToDisappear.current.style.display = \"inline\";\n      spanToChange.current.style.color = \"rgb(184, 82, 82)\";\n      err.current.style.display = \"block\";\n      // How to clear time ref in functional components https://stackoverflow.com/questions/56597788/how-to-do-timeout-and-then-clear-timeout-in-react-functional-component\n      timerRef.current = setTimeout(() => {\n        err.current.style.display = \"none\";\n      }, 5000);\n\n      setOldPassword(\"\");\n      setPassword(\"\");\n      passInp.current.value = \"\";\n      oldPassInp.current.value = \"\";\n      return;\n    }\n\n    if (password.trim().length > 6 && oldPassword.trim().length > 0) {\n      const response = await fetch(\n        `${BACKEND_ORIGIN}/api/change_password/`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: userId,\n            password,\n            old: oldPassword,\n          }),\n        }\n      );\n\n      let data = await response.json();\n\n      if (data.message) {\n        console.log(\"Password has been changed successful\");\n        imageToDisappear.current.style.display = \"none\";\n        spanToChange.current.style.color = \"green\";\n        setErrorMessage(\"Password have been changed\");\n        err.current.style.display = \"block\";\n        timerRef.current = setTimeout(() => {\n          err.current.style.display = \"none\";\n        }, 5000);\n        setOldPassword(\"\");\n        setPassword(\"\");\n        passInp.current.value = \"\";\n        oldPassInp.current.value = \"\";\n        return;\n      } else {\n        imageToDisappear.current.style.display = \"inline\";\n        spanToChange.current.style.color = \"rgb(184, 82, 82)\";\n        setErrorMessage(\"Failed, incorrect credentials\");\n        err.current.style.display = \"block\";\n        timerRef.current = setTimeout(() => {\n          err.current.style.display = \"none\";\n        }, 5000);\n        setOldPassword(\"\");\n        setPassword(\"\");\n        passInp.current.value = \"\";\n        oldPassInp.current.value = \"\";\n        return;\n      }\n    } else {\n      imageToDisappear.current.style.display = \"inline\";\n      spanToChange.current.style.color = \"rgb(184, 82, 82)\";\n      console.log(\"Weak password\");\n      setErrorMessage(\"Failed, use strong password\");\n      err.current.style.display = \"block\";\n      timerRef.current = setTimeout(() => {\n        err.current.style.display = \"none\";\n      }, 5000);\n      setOldPassword(\"\");\n      setPassword(\"\");\n      passInp.current.value = \"\";\n      oldPassInp.current.value = \"\";\n      return;\n    }\n  };\n\n  const toggleSidebarOff = async () => {\n    sideBarRef.current.style.display = \"none\";\n    topDiv.current.style.opacity = \"1\";\n    document.body.style.overflow = \"visible\";\n    topDiv.current.style.pointerEvents = \"auto\";\n  };\n\n  const fetchSomeData = async () => {\n    try {\n      const tokens = localStorage.getItem(\"authTokens\")\n        ? JSON.parse(localStorage.getItem(\"authTokens\"))\n        : null;\n      console.log(\"Im fetching some data\");\n      if (tokens === null) {\n        console.log(\"Im inside here\");\n        setLoginIn(null);\n        return;\n      }\n      console.log(\"Wake up mr\");\n      const decodedRefreshToken = jwt_decode(tokens.refresh);\n      const expireRefreshTime = decodedRefreshToken.exp;\n      const decodedAccessData = jwt_decode(tokens.access);\n      const expireAccessTime = decodedAccessData.exp;\n      const diff = expireAccessTime * 1000 - Date.now();\n\n      if (diff < 1) {\n        console.log(\"Hapa maanake imesha-expire\");\n        if (expireRefreshTime * 1000 - Date.now < 1) {\n          setLoginIn(null);\n          return;\n        }\n\n        let response = await fetch(`${BACKEND_ORIGIN}/api/token/refresh/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ refresh: tokens.refresh }),\n        });\n\n        let data = await response.json();\n        localStorage.setItem(\"authTokens\", JSON.stringify(data));\n        let user = decodedAccessData.user_id;\n        setLoginIn(true);\n        setUserId(user);\n\n        // if we detect the user have been login then we needed to fetch the profile picture of the\n        // login user... How we do that is to query profile by that given user... You should make\n        // query to the  ViewProfileAPiView...\n\n        let profile = await fetch(`${BACKEND_ORIGIN}/api/profile/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: user,\n          }),\n        });\n\n        let fetchedProfile = await profile.json();\n\n        setProfile(fetchedProfile.profile_picture);\n        setName(fetchedProfile.full_name);\n        setEmail(fetchedProfile.get_email);\n        console.log(fetchedProfile);\n\n        if (!fetchedProfile.profile_picture) {\n          // then i don't have profile picture we should use the default one...\n          setHasProfile(false);\n        } else {\n          setHasProfile(true);\n        }\n\n        if (fetchedProfile.profile_picture === \"/media/images/profile.png\") {\n          setHasDefaultProfile(true);\n        } else {\n          setHasDefaultProfile(false);\n        }\n\n        // so now user has logged in you need to fetch cart from the backend\n        let check = await fetch(`${BACKEND_ORIGIN}/api/cartproducts/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: user,\n          }),\n        });\n\n        let output = await check.json();\n\n        if (output.message) {\n          // then here there is no any cart or cartproducts associated by that user\n          return;\n        }\n\n        // otherwise here then we have the cartproducts associated by this user\n        if (output.length < 1) {\n          // then user has cart but has no any cartproduct added to that cart\n          return;\n        }\n\n        // from all product count down quantity to display them...\n        let sum = 0;\n        for (let out of output) {\n          sum = out.quantity + sum;\n        }\n\n        setAmount(sum);\n\n        // Hii nime-add kama ya kukazia but unaweza ukaitoa kama unaona haifaiii..\n        if (loginIn == null) {\n          setAmount(null);\n        }\n      } else {\n        console.log(\"I have active access token\");\n        // Hapa inamaana accessToken has not expired.. User is aunthenticated...\n        setLoginIn(true);\n        let user = decodedAccessData.user_id;\n        setUserId(user);\n        let profile = await fetch(`${BACKEND_ORIGIN}/api/profile/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: user,\n          }),\n        });\n\n        let fetchedProfile = await profile.json();\n\n        setProfile(fetchedProfile.profile_picture);\n        setName(fetchedProfile.full_name);\n        setEmail(fetchedProfile.get_email);\n        console.log(fetchedProfile);\n\n        if (!fetchedProfile.profile_picture) {\n          setHasProfile(false);\n        } else {\n          setHasProfile(true);\n        }\n\n        if (fetchedProfile.profile_picture === \"/media/images/profile.png\") {\n          console.log(\"IM inside indeed\");\n          setHasDefaultProfile(true);\n        } else {\n          console.log(\"Im setting has default login to false\");\n          setHasDefaultProfile(false);\n        }\n\n        // so now user has logged in you need to fetch cart from the backend\n        let check = await fetch(`${BACKEND_ORIGIN}/api/cartproducts/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            id: user,\n          }),\n        });\n\n        console.log(\"Im waiting for love\");\n\n        let output = await check.json();\n        console.log(output);\n\n        if (output.message) {\n          // then here there is no any cart or cartproducts associated by that user\n          return;\n        }\n\n        // otherwise here then we have the cartproducts associated by this user\n        if (output.length < 1) {\n          // then user has cart but has no any cartproduct added to that cart\n          return;\n        }\n\n        // from all product count down quantity to display them...\n        console.log(\"I have some cartproducts \");\n        let sum = 0;\n        for (let out of output) {\n          sum = out.quantity + sum;\n        }\n\n        setAmount(sum);\n        console.log(\"This is final amount\");\n        console.log(amount);\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n  // https://stackoverflow.com/questions/60476155/is-it-safe-to-use-ref-current-as-useeffects-dependency-when-ref-points-to-a-dom\n  const hunter = async () => {\n    // the aim of this function is to hunt and know the position of the\n    // Cart icon and then using that position right to position the label\n    // at the right of the cart...\n    if (kapu.current) {\n      const dimensions = kapu.current.getBoundingClientRect();\n      console.log(\n        dimensions.top,\n        dimensions.right,\n        dimensions.left,\n        dimensions.bottom\n      );\n      // console.log('This is the width of the kapuIcon');\n      // console.log(kapuLabel.current.offsetWidth, typeof kapuLabel.current.offsetWidth)\n      setDimension([\n        dimensions.top,\n        dimensions.right,\n        dimensions.left,\n        dimensions.bottom,\n      ]);\n    }\n  };\n\n  const fetchFromProducts = async () => {\n    // our input is in searchRef....\n    // fetch all data initiall and assign them inside qs\n    // hii itatusaidia sana sio kila muda tu-send request\n    // the server.. What you need to do is to get all and\n    // store them inside that qs....\n    let pro = await fetch(`${BACKEND_ORIGIN}/api/products/`);\n    let json = await pro.json();\n    console.log(\"This is the json for you\");\n    console.log(json);\n    // Then from this I should convert all in array containing\n    // the Description -> category\n\n    let output = json.map((value) => {\n      if (value.description) {\n        return `${value.description} => ${value.title} (${value.category})`;\n      }\n      return `${value.title}`;\n    });\n    console.log(\"This is converted one for you\");\n    console.log(output);\n\n    setQr(output);\n  };\n\n  const onLogout = (e) => {\n    e.preventDefault();\n\n    // mpaka hapa huyu mtu amelogin so lazima hii value itakuwepo in localstorage\n    localStorage.removeItem(\"authTokens\");\n    window.location.reload(); // this will refresh the page..\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (searchRef.current.value.trim().length === 0) {\n      console.log(\"Im inside its empty\");\n      // maanake user hajaandika chochote ko prevent default\n      return;\n    }\n\n    // otherwise everything is good then we should redirect to the\n    // result page...\n\n    console.log(\"Everything is good....\");\n    Router.push({\n      pathname: \"/output\",\n      query: { search: searchRef.current.value },\n    });\n  };\n\n  const searchFilter = async (e) => {\n    e.preventDefault();\n\n    // let clicked = e.target.id\n    // console.log('This is the clicked text for you')\n    // console.log(clicked)\n    let clicked = e.target.id;\n    clicked = clicked.replace(\"=>\", \"\");\n    clicked = clicked.replace(\"(\", \"\");\n    clicked = clicked.replace(\")\", \"\");\n    Router.push({ pathname: \"/output\", query: { search: clicked } });\n    // console.log('Now im here')\n    // //console.log(e.target.name)\n    // console.log(e.target.id)\n  };\n\n  const changeAttrs = async (e) => {\n    setSearchTerm(e.target.value); //.then(value => {console.log(value)})\n    console.log(\"IM change attrs\");\n  };\n\n  const filterToggleOff = async (e) => {\n    \n\n    if (searchRef.current) {\n      list.current.style.display = \"none\";\n\n      searchRef.current.style.borderRadius = \"30px\";\n    }\n  };\n\n  // Ko nishajua shida ipo wap ni kwamba all these onEffect get executed intially when the\n  // component rendered ndo maana inasababisha hiyo error au misbehave\n  // unayokutana nayo hapo ko nakushauri embu rudia hii concept ya useEffect coz hizi\n  // useEffect zote ulizoziandika hapa hazina tofauti all of them get executed on mount.....\n  useEffect(() => {\n    // so hii itakua detected if the width of the screen is from 900 and so on\n    console.log(\"Hey im here but this sreen.width is obstacle to me\");\n\n    let filtered = qr.filter((value) => {\n      if (searchTerm === \"\") {\n        return;\n      } else if (searchTerm === null) {\n        return;\n      } else if (\n        value.toString().toLowerCase().includes(searchTerm.toLowerCase())\n      ) {\n        return value;\n      }\n\n      return console.log(\"Nothing happened\");\n    });\n\n    setFilteredQs(filtered);\n  }, [searchTerm]);\n\n  // // this is executed on Change and not on mounting of the state..\n  useEffect(() => {\n    console.log(\"This is the search ref for you\");\n    console.log(searchRef);\n    if (searchRef.current !== null) {\n      // this means on mount length == 0, then now it say it changed to length of 34... check which has filter..\n      if (filteredQs.length === 0) {\n        // then search bar should be restored in initial position...\n        // Kuna mtu ana-irestore in its initial position i think in useEffect ya hapo juu....\n        list.current.style.display = \"none\";\n\n        searchRef.current.style.borderRadius = \"30px\";\n      } else {\n        const top = searchRef.current.getBoundingClientRect();\n        console.log(\"this is from useEffect hook\");\n        console.log(top.top, top.right, top.left, top.bottom);\n\n        searchRef.current.style.borderRadius = \"0px\";\n        searchRef.current.style[\"border-top-right-radius\"] = \"30px\";\n        searchRef.current.style[\"border-top-left-radius\"] = \"30px\";\n        list.current.style.display = \"block\";\n\n        list.current.style.top = top.bottom.toString() + \"px\";\n        list.current.style.left = top.left.toString() + \"px\";\n        list.current.style.width =\n          searchRef.current.offsetWidth.toString() + \"px\";\n      }\n    }\n  }, [filteredQs]);\n\n  // this is how to track the changes of ref DOM element...\n  // https://stackoverflow.com/questions/60476155/is-it-safe-to-use-ref-current-as-useeffects-dependency-when-ref-points-to-a-dom\n  useEffect(() => {\n    hunter();\n  }, [kapu.current]);\n\n  // Ko huyu dimension anavyokuwa assigned then us we position the label elements..\n\n  useEffect(() => {\n    // First check if kapuLabel ref is found because for one which has zero\n    // cartproducts we don't have label on cart..\n    console.log(\"IM HERE NOW\", kapuLabel.current);\n    if (kapuLabel.current) {\n      kapuLabel.current.style.position = \"absolute\";\n\n      kapuLabel.current.style.top = dimension[0];\n      kapuLabel.current.style.right = dimension[1];\n      kapuLabel.current.style.fontWeight = \"bold\";\n\n      console.log(\"LETS PREVIEW...\");\n      console.log(\n        kapuLabel.current.style.right,\n        typeof kapuLabel.current.style.right\n      );\n      kapuLabel.current.style.right =\n        parseInt(dimension[1]) - kapuLabel.current.offsetWidth * 0.9;\n    }\n  }, [dimension]);\n\n  useEffect(() => {\n    fetchSomeData();\n    fetchFromProducts();\n    console.log(\"Has default profile\", hasDefaultProfile);\n    const fetchInterval = setInterval(fetchSomeData, 5000);\n\n    // this code will be executed initially when component is mounted..\n    // this video explains much more https://www.youtube.com/watch?v=0ZJgIjIuY7U\n    console.log(\"Hello world\");\n    console.log(amount);\n\n    return () => {\n      clearInterval(fetchInterval);\n\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div onClick={filterToggleOff}>\n      <div className={styles.main}>\n        <Head>\n          <title>PERSONALYZER</title>\n          <link\n            rel=\"stylesheet\"\n            href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n            integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n            crossorigin=\"anonymous\"\n          />\n          <link\n            rel=\"stylesheet\"\n            href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"\n          ></link>\n          <meta\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0\"\n          />\n        </Head>\n        <div ref={topDiv}>\n          <div className={styles.top}>\n            <section className={styles.sectionStyle}>\n              <div className={styles.behaveLikenav}>\n                <MediaQuery minWidth={200} maxWidth={576}>\n                  {/* <p>Im your phone, i need sidebar for me</p> */}\n\n                  <form className={styles.inlineForm} onSubmit={handleSubmit}>\n                    <MediaQuery maxWidth={450}>\n                      <p\n                        className={styles.brand}\n                        onClick={() => Router.push({ pathname: \"/\" })}\n                      >\n                        <img\n                          src=\"../static/images/popo1.png\"\n                          width={30}\n                          height={28}\n                        />\n                      </p>\n                    </MediaQuery>\n\n                    <MediaQuery minWidth={451}>\n                      <p\n                        className={styles.brand}\n                        onClick={() => Router.push({ pathname: \"/\" })}\n                      >\n                        <img src=\"../static/images/logo.png\" width={90} />\n                      </p>\n                    </MediaQuery>\n                    <input\n                      ref={searchRef}\n                      type=\"text\"\n                      placeholder=\"Type and search...\"\n                      className={styles.search}\n                      onChange={changeAttrs}\n                      // onChange= { (e) => setSearchTerm(e.target.value) }\n                    />\n                    <img\n                      src=\"/static/images/magnifying-glass.png\"\n                      alt=\"search-icon\"\n                      height={20}\n                      width={20}\n                      title=\"search\"\n                      onClick={handleSubmit}\n                      className={styles.searchIcon}\n                    />\n\n                    {amount ? (\n                      <Link route=\"/cart\">\n                        <span>\n                          <img\n                            src=\"/static/images/shopping-cart.png\"\n                            alt=\"search-icon\"\n                            height={20}\n                            width={20}\n                            title=\"Cart\"\n                            className={styles.shop}\n                            ref={kapu}\n                          />\n                          <span ref={kapuLabel} className={styles.amo}>\n                            {amount}\n                          </span>\n                        </span>\n                      </Link>\n                    ) : (\n                      <Link route=\"/cart\">\n                        <span>\n                          <img\n                            src=\"/static/images/shopping-cart.png\"\n                            alt=\"search-icon\"\n                            height={20}\n                            width={20}\n                            title=\"Cart\"\n                            className={styles.shop}\n                            ref={kapu}\n                          />\n                        </span>\n                      </Link>\n                    )}\n\n                    <div className={styles.bar} onClick={toggleSidebarOn}>\n                      {/* <Icon \n                                                name='ellipsis vertical' \n                                            \n                                                color='grey' \n                                            /> */}\n\n                      <img\n                        src=\"../static/images/paragraph.png\"\n                        width={22}\n                        height={22}\n                      />\n                    </div>\n                  </form>\n                </MediaQuery>\n                <MediaQuery minWidth={577} maxWidth={899}>\n                  <form className={styles.inlineForm} onSubmit={handleSubmit}>\n                    <p\n                      className={styles.brand}\n                      onClick={() => Router.push({ pathname: \"/\" })}\n                    >\n                      <img src=\"../static/images/logo.png\" width={108} />\n                    </p>\n                    <input\n                      ref={searchRef}\n                      type=\"text\"\n                      placeholder=\"Type and search...\"\n                      className={styles.search}\n                      onChange={changeAttrs}\n                      // onChange= { (e) => setSearchTerm(e.target.value) }\n                    />\n                    <img\n                      src=\"/static/images/magnifying-glass.png\"\n                      alt=\"search-icon\"\n                      height={20}\n                      width={20}\n                      title=\"search\"\n                      onClick={handleSubmit}\n                      className={styles.searchIcon}\n                    />\n\n                    {/* <img \n                                            src = '/static/images/shopping-cart.png' \n                                            alt='search-icon' \n                                            height={20} \n                                            width={20} \n                                            title='Cart' \n                                            className={styles.shop}\n                                        /> */}\n\n                    {amount ? (\n                      <Link route=\"/cart\">\n                        <span>\n                          <img\n                            src=\"/static/images/shopping-cart.png\"\n                            alt=\"search-icon\"\n                            height={23}\n                            width={23}\n                            title=\"Cart\"\n                            className={styles.shop}\n                            ref={kapu}\n                          />\n                          <span ref={kapuLabel} className={styles.amo}>\n                            {amount}\n                          </span>\n                        </span>\n                      </Link>\n                    ) : (\n                      <Link route=\"/cart\">\n                        <span>\n                          <img\n                            src=\"/static/images/shopping-cart.png\"\n                            alt=\"search-icon\"\n                            height={23}\n                            width={23}\n                            title=\"Cart\"\n                            className={styles.shop}\n                            ref={kapu}\n                          />\n                        </span>\n                      </Link>\n                    )}\n\n                    <div className={styles.bar} onClick={toggleSidebarOn}>\n                      {/* <Icon \n                                                name='ellipsis vertical' \n                                            \n                                                color='grey' \n                                            /> */}\n                      <img\n                        src=\"../static/images/paragraph.png\"\n                        width={20}\n                        height={20}\n                      />\n                    </div>\n                  </form>{\" \"}\n                </MediaQuery>\n                <MediaQuery minWidth={900} maxWidth={1199}>\n                  <form className={styles.inlineForm} onSubmit={handleSubmit}>\n                    <p\n                      className={styles.brand}\n                      onClick={() => Router.push({ pathname: \"/\" })}\n                    >\n                      <img src=\"../static/images/logo.png\" width={120} />\n                    </p>\n                    <input\n                      ref={searchRef}\n                      type=\"text\"\n                      placeholder=\"Search by jewely/product name...\"\n                      className={styles.search}\n                      list=\"browsers\"\n                      onChange={changeAttrs}\n                    />\n\n                    <img\n                      src=\"/static/images/magnifying-glass.png\"\n                      alt=\"search-icon\"\n                      height={28}\n                      width={28}\n                      className={styles.searchIcon}\n                      title=\"Search\"\n                      onClick={handleSubmit}\n                    />\n                    {/* <Link route = \"https://www.google.com\">\n                                            <a className={styles.aboutUs}><span>ABOUT US</span></a>    \n                                        </Link> */}\n                    {/* <Link route = \"https://www.instagram.com/\">\n                                            <a className={styles.aboutGuide}><span>GUIDE</span></a>    \n                                        </Link>   ---- This guide is not needed we can assume it as 'Contacts' or links to social media.... we'll create footer for this...*/}\n\n                    {/*  pressing enter key when input is focused 'clicks' first button on form #12643 \n                                        https://github.com/angular/angular/issues/12643 */}\n                    {props.isAunthenticated ? (\n                      <Link route=\"/profile/\">\n                        {hasProfile ? (\n                          hasDefaultProfile ? (\n                            <img\n                              src=\"/static/images/user-grey.png\"\n                              alt=\"Profile\"\n                              height={40}\n                              width={40}\n                              className={styles.proPic}\n                              onMouseOver={() =>\n                                (profileRef.current.style.display = \"block\")\n                              }\n                              onMouseOut={() =>\n                                (profileRef.current.style.display = \"none\")\n                              }\n                            />\n                          ) : (\n                            <img\n                              src={`${BACKEND_ORIGIN}${profile}`}\n                              alt=\"Profile\"\n                              height={40}\n                              width={40}\n                              className={styles.customPro}\n                              onMouseOver={() =>\n                                (profileRef.current.style.display = \"block\")\n                              }\n                              onMouseOut={() =>\n                                (profileRef.current.style.display = \"none\")\n                              }\n                            />\n                          )\n                        ) : (\n                          <img\n                            src=\"/static/images/user-grey.png\"\n                            alt=\"Profile\"\n                            height={40}\n                            width={40}\n                            className={styles.proPic}\n                            onMouseOver={() =>\n                              (profileRef.current.style.display = \"block\")\n                            }\n                            onMouseOut={() =>\n                              (profileRef.current.style.display = \"none\")\n                            }\n                          />\n                        )}\n                      </Link>\n                    ) : (\n                      <Link route=\"/register/\">\n                        <span className={styles.proPic}>\n                          <Button\n                            content=\"Login/Register\"\n                            color=\"black\"\n                            type=\"button\"\n                          />\n                        </span>\n                      </Link>\n                    )}\n\n                    {amount ? (\n                      <Link route=\"/cart\">\n                        <span\n                          className={styles.cartIcon}\n                          onClick={() =>\n                            console.log(\"Hello world how are you!\")\n                          }\n                        >\n                          {/* hapa ili hii span ya label ionekane tutaad hapa props/flag na if statement kama kwenye isAunthenticated then tuta-enda kwenye addToCart when someone add something to cart then it will be displayed */}\n\n                          <img\n                            src=\"/static/images/shopping-cart.png\"\n                            alt=\"search-icon\"\n                            height={25}\n                            width={25}\n                            title=\"Cart\"\n                            ref={kapu}\n                          />\n\n                          <span className={styles.amo} ref={kapuLabel}>\n                            {amount}\n                          </span>\n                        </span>\n                      </Link>\n                    ) : (\n                      <Link route=\"/cart\">\n                        <span\n                          className={styles.cartIcon}\n                          onClick={() =>\n                            console.log(\"Hello world how are you!\")\n                          }\n                        >\n                          {/* hapa ili hii span ya label ionekane tutaad hapa props/flag na if statement kama kwenye isAunthenticated then tuta-enda kwenye addToCart when someone add something to cart then it will be displayed */}\n\n                          <img\n                            src=\"/static/images/shopping-cart.png\"\n                            alt=\"search-icon\"\n                            height={25}\n                            width={25}\n                            title=\"Cart\"\n                          />\n                        </span>\n                      </Link>\n                    )}\n                  </form>\n                </MediaQuery>\n\n                <MediaQuery minWidth={1200} maxWidth={1600}>\n                  <form className={styles.inlineForm} onSubmit={handleSubmit}>\n                    <p\n                      className={styles.brand}\n                      onClick={() => Router.push({ pathname: \"/\" })}\n                    >\n                      <img src=\"../static/images/logo.png\" width={120} />\n                    </p>\n                    <input\n                      ref={searchRef}\n                      type=\"text\"\n                      placeholder=\"Search by jewely/product name...\"\n                      className={styles.search}\n                      list=\"browsers\"\n                      onChange={changeAttrs}\n                    />\n\n                    <img\n                      src=\"/static/images/magnifying-glass.png\"\n                      alt=\"search-icon\"\n                      height={33}\n                      width={33}\n                      className={styles.searchIcon}\n                      title=\"Search\"\n                      onClick={handleSubmit}\n                    />\n                    {/* <Link route = \"https://www.google.com\">\n                                            <a className={styles.aboutUs}><span>ABOUT US</span></a>    \n                                        </Link>\n                                        <Link route = \"https://www.instagram.com/\">\n                                            <a className={styles.aboutGuide}><span>GUIDE</span></a>    \n                                        </Link> */}\n\n                    {/*  pressing enter key when input is focused 'clicks' first button on form #12643 \n                                        https://github.com/angular/angular/issues/12643 */}\n                    {props.isAunthenticated ? (\n                      <Link route=\"/profile/\">\n                        {hasProfile ? (\n                          hasDefaultProfile ? (\n                            <img\n                              src=\"/static/images/user-grey.png\"\n                              alt=\"Profile\"\n                              height={40}\n                              width={40}\n                              className={styles.proPic}\n                              onMouseOver={() =>\n                                (profileRef.current.style.display = \"block\")\n                              }\n                              onMouseOut={() =>\n                                (profileRef.current.style.display = \"none\")\n                              }\n                            />\n                          ) : (\n                            <img\n                              src={`${BACKEND_ORIGIN}${profile}`}\n                              alt=\"Profile\"\n                              height={40}\n                              width={40}\n                              className={styles.customPro}\n                              onMouseOver={() =>\n                                (profileRef.current.style.display = \"block\")\n                              }\n                              onMouseOut={() =>\n                                (profileRef.current.style.display = \"none\")\n                              }\n                            />\n                          )\n                        ) : (\n                          <img\n                            src=\"/static/images/user-grey.png\"\n                            alt=\"Profile\"\n                            height={40}\n                            width={40}\n                            className={styles.proPic}\n                            onMouseOver={() =>\n                              (profileRef.current.style.display = \"block\")\n                            }\n                            onMouseOut={() =>\n                              (profileRef.current.style.display = \"none\")\n                            }\n                          />\n                        )}\n                      </Link>\n                    ) : (\n                      <Link route=\"/register/\">\n                        <span className={styles.proPic}>\n                          <Button\n                            content=\"Login/Register\"\n                            color=\"black\"\n                            type=\"button\"\n                          />\n                        </span>\n                      </Link>\n                    )}\n\n                    {amount ? (\n                      <Link route=\"/cart\">\n                        <span\n                          className={styles.cartIcon}\n                          onClick={() =>\n                            console.log(\"Hello world how are you!\")\n                          }\n                        >\n                          {/* hapa ili hii span ya label ionekane tutaad hapa props/flag na if statement kama kwenye isAunthenticated then tuta-enda kwenye addToCart when someone add something to cart then it will be displayed */}\n\n                          <img\n                            src=\"/static/images/shopping-cart.png\"\n                            alt=\"search-icon\"\n                            height={33}\n                            width={33}\n                            title=\"Cart\"\n                            ref={kapu}\n                          />\n\n                          <span className={styles.amo} ref={kapuLabel}>\n                            {amount}\n                          </span>\n                        </span>\n                      </Link>\n                    ) : (\n                      <Link route=\"/cart\">\n                        <span\n                          className={styles.cartIcon}\n                          onClick={() =>\n                            console.log(\"Hello world how are you!\")\n                          }\n                        >\n                          {/* hapa ili hii span ya label ionekane tutaad hapa props/flag na if statement kama kwenye isAunthenticated then tuta-enda kwenye addToCart when someone add something to cart then it will be displayed */}\n\n                          <img\n                            src=\"/static/images/shopping-cart.png\"\n                            alt=\"search-icon\"\n                            height={33}\n                            width={33}\n                            title=\"Cart\"\n                          />\n                        </span>\n                      </Link>\n                    )}\n                  </form>\n                </MediaQuery>\n\n                <MediaQuery minWidth={1601}>\n                  <form className={styles.inlineForm} onSubmit={handleSubmit}>\n                    <p\n                      className={styles.brand}\n                      onClick={() => Router.push({ pathname: \"/\" })}\n                    >\n                      <img src=\"../static/images/logo.png\" width={120} />\n                    </p>\n                    <input\n                      ref={searchRef}\n                      type=\"text\"\n                      placeholder=\"Search by jewely/product name...\"\n                      className={styles.search}\n                      list=\"browsers\"\n                      onChange={changeAttrs}\n                    />\n\n                    <img\n                      src=\"/static/images/magnifying-glass.png\"\n                      alt=\"search-icon\"\n                      height={33}\n                      width={33}\n                      className={styles.searchIcon}\n                      title=\"Search\"\n                      onClick={handleSubmit}\n                    />\n                    {/* <Link route = \"https://www.google.com\">\n                                            <a className={styles.aboutUs}><span>ABOUT US</span></a>    \n                                        </Link>\n                                        <Link route = \"https://www.instagram.com/\">\n                                            <a className={styles.aboutGuide}><span>GUIDE</span></a>    \n                                        </Link> */}\n\n                    {/*  pressing enter key when input is focused 'clicks' first button on form #12643 \n                                        https://github.com/angular/angular/issues/12643 */}\n                    {props.isAunthenticated ? (\n                      <Link route=\"/profile/\">\n                        {hasProfile ? (\n                          hasDefaultProfile ? (\n                            <img\n                              src=\"/static/images/user-grey.png\"\n                              alt=\"Profile\"\n                              height={40}\n                              width={40}\n                              className={styles.proPic}\n                              onMouseOver={() =>\n                                (profileRef.current.style.display = \"block\")\n                              }\n                              onMouseOut={() =>\n                                (profileRef.current.style.display = \"none\")\n                              }\n                            />\n                          ) : (\n                            <img\n                              src={`${BACKEND_ORIGIN}${profile}`}\n                              alt=\"Profile\"\n                              height={40}\n                              width={40}\n                              className={styles.customPro}\n                              onMouseOver={() =>\n                                (profileRef.current.style.display = \"block\")\n                              }\n                              onMouseOut={() =>\n                                (profileRef.current.style.display = \"none\")\n                              }\n                            />\n                          )\n                        ) : (\n                          <img\n                            src=\"/static/images/user-grey.png\"\n                            alt=\"Profile\"\n                            height={40}\n                            width={40}\n                            className={styles.proPic}\n                            onMouseOver={() =>\n                              (profileRef.current.style.display = \"block\")\n                            }\n                            onMouseOut={() =>\n                              (profileRef.current.style.display = \"none\")\n                            }\n                          />\n                        )}\n                      </Link>\n                    ) : (\n                      <Link route=\"/register/\">\n                        <span className={styles.proPic}>\n                          <Button\n                            content=\"Login/Register\"\n                            color=\"black\"\n                            type=\"button\"\n                          />\n                        </span>\n                      </Link>\n                    )}\n\n                    {amount ? (\n                      <Link route=\"/cart\">\n                        <span\n                          className={styles.cartIcon}\n                          onClick={() =>\n                            console.log(\"Hello world how are you!\")\n                          }\n                        >\n                          {/* hapa ili hii span ya label ionekane tutaad hapa props/flag na if statement kama kwenye isAunthenticated then tuta-enda kwenye addToCart when someone add something to cart then it will be displayed */}\n\n                          <img\n                            src=\"/static/images/shopping-cart.png\"\n                            alt=\"search-icon\"\n                            height={33}\n                            width={33}\n                            title=\"Cart\"\n                            ref={kapu}\n                          />\n\n                          <span className={styles.amo} ref={kapuLabel}>\n                            {amount}\n                          </span>\n                        </span>\n                      </Link>\n                    ) : (\n                      <Link route=\"/cart\">\n                        <span\n                          className={styles.cartIcon}\n                          onClick={() =>\n                            console.log(\"Hello world how are you!\")\n                          }\n                        >\n                          {/* hapa ili hii span ya label ionekane tutaad hapa props/flag na if statement kama kwenye isAunthenticated then tuta-enda kwenye addToCart when someone add something to cart then it will be displayed */}\n\n                          <img\n                            src=\"/static/images/shopping-cart.png\"\n                            alt=\"search-icon\"\n                            height={33}\n                            width={33}\n                            title=\"Cart\"\n                          />\n                        </span>\n                      </Link>\n                    )}\n                  </form>\n                </MediaQuery>\n              </div>\n            </section>\n\n            {/* this is the addition */}\n            <div id=\"browsers\" className={styles.dlist} ref={list}>\n              {/* https://bobbyhadz.com/blog/javascript-get-substring-after-specific-character \n                            https://bobbyhadz.com/blog/javascript-get-substring-before-specific-character\n                            imenizingua kwenye ku-render image but sio ishu hapa ishu muhimu kwanza ni ku-deal na\n                            query on frontend to lookup in deep like in backend then kila kitu kikiwa sawa \n                            tutaangalia na ishu ya image hii then tufunge kazi.....\n                            \n                            */}\n\n              {/* e.target.value somethimes it returns value when we click and sometimes it return\n                            <empty string> hii ni kwa sababu ni parent pekeake ndo mwenye hiyo e.target.id/value but\n                            his children does not have so when u click it children then it will return <empty string>\n                            ... Hii link imeelezea vizuri kabisa hii ishu na kwangu nime-irekebisha kwa kuweka \n                            id in all parent and his children elements... Na kila kitu kimekaa sawa...\n                            https://stackoverflow.com/questions/9864286/when-tracking-which-elements-were-clicked-e-target-id-is-sometimes-empty */}\n              <MediaQuery minWidth={200} maxWidth={576}>\n                {filteredQs\n                  .filter((value, index) => index < 6)\n                  .map((value, index) =>\n                    value.includes(\"=>\") ? (\n                      <p\n                        className={styles.query}\n                        key={index}\n                        id={value}\n                        onClick={searchFilter}\n                      >\n                        <span className={styles.cat} id={value}>{`${value\n                          .substr(0, value.indexOf(\"=\"))\n                          .substr(0, 12)}...`}</span>\n                        <span\n                          className={styles.tit}\n                          id={value}\n                        >{`${value.substr(value.indexOf(\">\") + 1)}`}</span>\n                      </p>\n                    ) : (\n                      <p\n                        className={styles.query}\n                        key={index}\n                        id={value}\n                        onClick={searchFilter}\n                      >\n                        {value}\n                      </p>\n                    )\n                  )}\n              </MediaQuery>\n\n              <MediaQuery minWidth={577}>\n                {filteredQs\n                  .filter((value, index) => index < 10)\n                  .map((value, index) =>\n                    value.includes(\"=>\") ? (\n                      <p\n                        className={styles.query}\n                        key={index}\n                        id={value}\n                        onClick={searchFilter}\n                      >\n                        <span className={styles.cat} id={value}>{`${value\n                          .substr(0, value.indexOf(\"=\"))\n                          .substr(0, 12)}...`}</span>\n                        <span\n                          className={styles.tit}\n                          id={value}\n                        >{`${value.substr(value.indexOf(\">\") + 1)}`}</span>\n                      </p>\n                    ) : (\n                      <p\n                        className={styles.query}\n                        key={index}\n                        id={value}\n                        onClick={searchFilter}\n                      >\n                        {value}\n                      </p>\n                    )\n                  )}\n              </MediaQuery>\n            </div>\n            <div className={styles.toggle} ref={profileRef}>\n              <div\n                className={styles.toggle1}\n                onMouseOver={() => (profileRef.current.style.display = \"block\")}\n                onMouseOut={() => (profileRef.current.style.display = \"none\")}\n              >\n                <p\n                  className={styles.int}\n                  onClick={() => Router.push({ pathname: \"/profile\" })}\n                >\n                  Profile\n                </p>\n                <p\n                  className={styles.int}\n                  onClick={() => Router.push({ pathname: \"/cart\" })}\n                >\n                  My Cart\n                </p>\n                <p className={styles.int} onClick={onLogout}>\n                  Logout\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {props.children}\n        </div>\n        <div\n          className={styles.sidebar}\n          ref={sideBarRef}\n          style={{ overflow: \"auto\" }}\n        >\n          <div className={styles.ss}>\n            {/* if user has not login then display both login and register buttons */}\n            {props.isAunthenticated ? (\n              <>\n                {hasProfile ? (\n                  hasDefaultProfile ? (\n                    <div style={{ position: \"relative\" }} ref={showProfile}>\n                      <MediaQuery maxWidth={350}>\n                        <img\n                          src=\"/static/images/user-grey.png\"\n                          alt=\"Profile\"\n                          height={60}\n                          width={60}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"30%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"8%\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            {name.length > 13\n                              ? name.substr(0, 12) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                            }}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                      </MediaQuery>\n                      <MediaQuery minWidth={351} maxWidth={400}>\n                        <img\n                          src=\"/static/images/user-grey.png\"\n                          alt=\"Profile\"\n                          height={65}\n                          width={65}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"30%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"8%\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            {name.length > 13\n                              ? name.substr(0, 12) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                            }}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={401} maxWidth={450}>\n                        <img\n                          src=\"/static/images/user-grey.png\"\n                          alt=\"Profile\"\n                          height={65}\n                          width={65}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"26%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"8%\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            {name.length > 13\n                              ? name.substr(0, 12) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                            }}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={451} maxWidth={500}>\n                        <img\n                          src=\"/static/images/user-grey.png\"\n                          alt=\"Profile\"\n                          height={70}\n                          width={70}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"26%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"8%\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            {name.length > 13\n                              ? name.substr(0, 12) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                            }}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={501} maxWidth={576}>\n                        <img\n                          src=\"/static/images/user-grey.png\"\n                          alt=\"Profile\"\n                          height={75}\n                          width={75}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"24%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"8%\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            {name.length > 18\n                              ? name.substr(0, 18) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                            }}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n                      <MediaQuery minWidth={577} maxWidth={650}>\n                        <img\n                          src=\"/static/images/user-grey.png\"\n                          alt=\"Profile\"\n                          height={90}\n                          width={90}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"24.5%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"12%\",\n                              fontSize: \"140%\",\n                            }}\n                          >\n                            {name.length > 18\n                              ? name.substr(0, 18) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                              padding: \"5%\",\n                              whiteSpace: \"nowrap\",\n                            }}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={651} maxWidth={700}>\n                        <img\n                          src=\"/static/images/user-grey.png\"\n                          alt=\"Profile\"\n                          height={90}\n                          width={90}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"23%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"12%\",\n                              fontSize: \"140%\",\n                            }}\n                          >\n                            {name.length > 18\n                              ? name.substr(0, 18) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                              padding: \"5%\",\n                              whiteSpace: \"nowrap\",\n                            }}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={701} maxWidth={800}>\n                        <img\n                          src=\"/static/images/user-grey.png\"\n                          alt=\"Profile\"\n                          height={90}\n                          width={90}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"20%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"12%\",\n                              fontSize: \"140%\",\n                            }}\n                          >\n                            {name.length > 18\n                              ? name.substr(0, 18) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                              padding: \"5%\",\n                              whiteSpace: \"nowrap\",\n                            }}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={801} maxWidth={899}>\n                        <img\n                          src=\"/static/images/user-grey.png\"\n                          alt=\"Profile\"\n                          height={100}\n                          width={100}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"20%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"12%\",\n                              fontSize: \"140%\",\n                            }}\n                          >\n                            {name.length > 20\n                              ? name.substr(0, 20) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                              padding: \"5%\",\n                              whiteSpace: \"nowrap\",\n                            }}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={900}>\n                        <p>Out of screen width bound</p>\n                      </MediaQuery>\n\n                      {/* the end if user use django default image/has not yet uploaded a custom image */}\n\n                      {/* Lets have the section for user to add new image and new name */}\n                    </div>\n                  ) : (\n                    <div style={{ position: \"relative\" }} ref={showProfile}>\n                      {/* Hizi ndo query za media zote kama we don't have default picture.. Only for one which has custom image view this condition in lne of 127... */}\n                      <MediaQuery maxWidth={350}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${profile}`}\n                          alt=\"Profile\"\n                          height={60}\n                          width={60}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"30%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"8%\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            {name.length > 13\n                              ? name.substr(0, 12) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                            }}\n                            onClick={showChangeProfile}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={351} maxWidth={400}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${profile}`}\n                          alt=\"Profile\"\n                          height={65}\n                          width={65}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"30%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"8%\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            {name.length > 13\n                              ? name.substr(0, 12) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                            }}\n                            onClick={showChangeProfile}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={401} maxWidth={450}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${profile}`}\n                          alt=\"Profile\"\n                          height={65}\n                          width={65}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"26%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"8%\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            {name.length > 13\n                              ? name.substr(0, 12) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                            }}\n                            onClick={showChangeProfile}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={451} maxWidth={500}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${profile}`}\n                          alt=\"Profile\"\n                          height={70}\n                          width={70}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"26%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"8%\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            {name.length > 13\n                              ? name.substr(0, 12) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                            }}\n                            onClick={showChangeProfile}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={501} maxWidth={576}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${profile}`}\n                          alt=\"Profile\"\n                          height={75}\n                          width={75}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"24%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"8%\",\n                              fontSize: \"120%\",\n                            }}\n                          >\n                            {name.length > 18\n                              ? name.substr(0, 18) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                            }}\n                            onClick={showChangeProfile}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n                      <MediaQuery minWidth={577} maxWidth={650}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${profile}`}\n                          alt=\"Profile\"\n                          height={90}\n                          width={90}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"24.5%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"12%\",\n                              fontSize: \"140%\",\n                            }}\n                          >\n                            {name.length > 18\n                              ? name.substr(0, 18) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                              padding: \"5%\",\n                              whiteSpace: \"nowrap\",\n                            }}\n                            onClick={showChangeProfile}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={651} maxWidth={700}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${profile}`}\n                          alt=\"Profile\"\n                          height={90}\n                          width={90}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"23%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"12%\",\n                              fontSize: \"140%\",\n                            }}\n                          >\n                            {name.length > 18\n                              ? name.substr(0, 18) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                              padding: \"5%\",\n                              whiteSpace: \"nowrap\",\n                            }}\n                            onClick={showChangeProfile}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={701} maxWidth={800}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${profile}`}\n                          alt=\"Profile\"\n                          height={90}\n                          width={90}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"20%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"12%\",\n                              fontSize: \"140%\",\n                            }}\n                          >\n                            {name.length > 18\n                              ? name.substr(0, 18) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                              padding: \"5%\",\n                              whiteSpace: \"nowrap\",\n                            }}\n                            onClick={showChangeProfile}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={801} maxWidth={899}>\n                        <img\n                          src={`${BACKEND_ORIGIN}${profile}`}\n                          alt=\"Profile\"\n                          height={100}\n                          width={100}\n                          className={styles.phoneProfile}\n                        />\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: \"5%\",\n                            left: \"20%\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              marginBottom: \"0%\",\n                              paddingBottom: \"12%\",\n                              fontSize: \"140%\",\n                            }}\n                          >\n                            {name.length > 20\n                              ? name.substr(0, 20) + \"...\"\n                              : name}\n                          </p>\n                          <button\n                            style={{\n                              display: \"block\",\n                              border: \"2px solid grey\",\n                              background: \"white\",\n                              padding: \"5%\",\n                              whiteSpace: \"nowrap\",\n                            }}\n                            onClick={showChangeProfile}\n                          >\n                            Edit Profile\n                          </button>\n                        </div>\n                        {/* <p>{email}</p> */}\n                      </MediaQuery>\n\n                      <MediaQuery minWidth={900}>\n                        <p>Out of screen width bound</p>\n                      </MediaQuery>\n                    </div>\n                  )\n                ) : (\n                  <div style={{ position: \"relative\" }} ref={showProfile}>\n                    {/* Hizi condition zimekaa kisenge eti mtu hapa anakweza akawa amekuwa aunthenticated ila hanaProfile\n                     so anatumia default image... Huu ni usenge... Haiwezekani but acha tuache hivihivi... */}\n                    <MediaQuery maxWidth={350}>\n                      <img\n                        src=\"/static/images/user-grey.png\"\n                        alt=\"Profile\"\n                        height={60}\n                        width={60}\n                        className={styles.phoneProfile}\n                      />\n                      <div\n                        style={{\n                          position: \"absolute\",\n                          top: \"5%\",\n                          left: \"30%\",\n                        }}\n                      >\n                        <p\n                          style={{\n                            marginBottom: \"0%\",\n                            paddingBottom: \"8%\",\n                            fontSize: \"120%\",\n                          }}\n                        >\n                          {name.length > 13 ? name.substr(0, 12) + \"...\" : name}\n                        </p>\n                        <button\n                          style={{\n                            display: \"block\",\n                            border: \"2px solid grey\",\n                            background: \"white\",\n                          }}\n                          onClick={showChangeProfile}\n                        >\n                          Edit Profile\n                        </button>\n                      </div>\n                    </MediaQuery>\n                    <MediaQuery minWidth={351} maxWidth={400}>\n                      <img\n                        src=\"/static/images/user-grey.png\"\n                        alt=\"Profile\"\n                        height={65}\n                        width={65}\n                        className={styles.phoneProfile}\n                      />\n                      <div\n                        style={{\n                          position: \"absolute\",\n                          top: \"5%\",\n                          left: \"30%\",\n                        }}\n                      >\n                        <p\n                          style={{\n                            marginBottom: \"0%\",\n                            paddingBottom: \"8%\",\n                            fontSize: \"120%\",\n                          }}\n                        >\n                          {name.length > 13 ? name.substr(0, 12) + \"...\" : name}\n                        </p>\n                        <button\n                          style={{\n                            display: \"block\",\n                            border: \"2px solid grey\",\n                            background: \"white\",\n                          }}\n                          onClick={showChangeProfile}\n                        >\n                          Edit Profile\n                        </button>\n                      </div>\n                    </MediaQuery>\n\n                    <MediaQuery minWidth={401} maxWidth={450}>\n                      <img\n                        src=\"/static/images/user-grey.png\"\n                        alt=\"Profile\"\n                        height={65}\n                        width={65}\n                        className={styles.phoneProfile}\n                      />\n                      <div\n                        style={{\n                          position: \"absolute\",\n                          top: \"5%\",\n                          left: \"26%\",\n                        }}\n                      >\n                        <p\n                          style={{\n                            marginBottom: \"0%\",\n                            paddingBottom: \"8%\",\n                            fontSize: \"120%\",\n                          }}\n                        >\n                          {name.length > 13 ? name.substr(0, 12) + \"...\" : name}\n                        </p>\n                        <button\n                          style={{\n                            display: \"block\",\n                            border: \"2px solid grey\",\n                            background: \"white\",\n                          }}\n                          onClick={showChangeProfile}\n                        >\n                          Edit Profile\n                        </button>\n                      </div>\n                      {/* <p>{email}</p> */}\n                    </MediaQuery>\n\n                    <MediaQuery minWidth={451} maxWidth={500}>\n                      <img\n                        src=\"/static/images/user-grey.png\"\n                        alt=\"Profile\"\n                        height={70}\n                        width={70}\n                        className={styles.phoneProfile}\n                      />\n                      <div\n                        style={{\n                          position: \"absolute\",\n                          top: \"5%\",\n                          left: \"26%\",\n                        }}\n                      >\n                        <p\n                          style={{\n                            marginBottom: \"0%\",\n                            paddingBottom: \"8%\",\n                            fontSize: \"120%\",\n                          }}\n                        >\n                          {name.length > 13 ? name.substr(0, 12) + \"...\" : name}\n                        </p>\n                        <button\n                          style={{\n                            display: \"block\",\n                            border: \"2px solid grey\",\n                            background: \"white\",\n                          }}\n                          onClick={showChangeProfile}\n                        >\n                          Edit Profile\n                        </button>\n                      </div>\n                      {/* <p>{email}</p> */}\n                    </MediaQuery>\n\n                    <MediaQuery minWidth={501} maxWidth={576}>\n                      <img\n                        src=\"/static/images/user-grey.png\"\n                        alt=\"Profile\"\n                        height={75}\n                        width={75}\n                        className={styles.phoneProfile}\n                      />\n                      <div\n                        style={{\n                          position: \"absolute\",\n                          top: \"5%\",\n                          left: \"24%\",\n                        }}\n                      >\n                        <p\n                          style={{\n                            marginBottom: \"0%\",\n                            paddingBottom: \"8%\",\n                            fontSize: \"120%\",\n                          }}\n                        >\n                          {name.length > 18 ? name.substr(0, 18) + \"...\" : name}\n                        </p>\n                        <button\n                          style={{\n                            display: \"block\",\n                            border: \"2px solid grey\",\n                            background: \"white\",\n                          }}\n                          onClick={showChangeProfile}\n                        >\n                          Edit Profile\n                        </button>\n                      </div>\n                      {/* <p>{email}</p> */}\n                    </MediaQuery>\n                    <MediaQuery minWidth={577} maxWidth={650}>\n                      <img\n                        src=\"/static/images/user-grey.png\"\n                        alt=\"Profile\"\n                        height={90}\n                        width={90}\n                        className={styles.phoneProfile}\n                      />\n                      <div\n                        style={{\n                          position: \"absolute\",\n                          top: \"5%\",\n                          left: \"24.5%\",\n                        }}\n                      >\n                        <p\n                          style={{\n                            marginBottom: \"0%\",\n                            paddingBottom: \"12%\",\n                            fontSize: \"140%\",\n                          }}\n                        >\n                          {name.length > 18 ? name.substr(0, 18) + \"...\" : name}\n                        </p>\n                        <button\n                          style={{\n                            display: \"block\",\n                            border: \"2px solid grey\",\n                            background: \"white\",\n                            padding: \"5%\",\n                            whiteSpace: \"nowrap\",\n                          }}\n                          onClick={showChangeProfile}\n                        >\n                          Edit Profile\n                        </button>\n                      </div>\n                      {/* <p>{email}</p> */}\n                    </MediaQuery>\n\n                    <MediaQuery minWidth={651} maxWidth={700}>\n                      <img\n                        src=\"/static/images/user-grey.png\"\n                        alt=\"Profile\"\n                        height={90}\n                        width={90}\n                        className={styles.phoneProfile}\n                      />\n                      <div\n                        style={{\n                          position: \"absolute\",\n                          top: \"5%\",\n                          left: \"23%\",\n                        }}\n                      >\n                        <p\n                          style={{\n                            marginBottom: \"0%\",\n                            paddingBottom: \"12%\",\n                            fontSize: \"140%\",\n                          }}\n                        >\n                          {name.length > 18 ? name.substr(0, 18) + \"...\" : name}\n                        </p>\n                        <button\n                          style={{\n                            display: \"block\",\n                            border: \"2px solid grey\",\n                            background: \"white\",\n                            padding: \"5%\",\n                            whiteSpace: \"nowrap\",\n                          }}\n                          onClick={showChangeProfile}\n                        >\n                          Edit Profile\n                        </button>\n                      </div>\n                      {/* <p>{email}</p> */}\n                    </MediaQuery>\n\n                    <MediaQuery minWidth={701} maxWidth={800}>\n                      <img\n                        src=\"/static/images/user-grey.png\"\n                        alt=\"Profile\"\n                        height={90}\n                        width={90}\n                        className={styles.phoneProfile}\n                      />\n                      <div\n                        style={{\n                          position: \"absolute\",\n                          top: \"5%\",\n                          left: \"20%\",\n                        }}\n                      >\n                        <p\n                          style={{\n                            marginBottom: \"0%\",\n                            paddingBottom: \"12%\",\n                            fontSize: \"140%\",\n                          }}\n                        >\n                          {name.length > 18 ? name.substr(0, 18) + \"...\" : name}\n                        </p>\n                        <button\n                          style={{\n                            display: \"block\",\n                            border: \"2px solid grey\",\n                            background: \"white\",\n                            padding: \"5%\",\n                            whiteSpace: \"nowrap\",\n                          }}\n                          onClick={showChangeProfile}\n                        >\n                          Edit Profile\n                        </button>\n                      </div>\n                      {/* <p>{email}</p> */}\n                    </MediaQuery>\n\n                    <MediaQuery minWidth={801} maxWidth={899}>\n                      <img\n                        src=\"/static/images/user-grey.png\"\n                        alt=\"Profile\"\n                        height={100}\n                        width={100}\n                        className={styles.phoneProfile}\n                      />\n                      <div\n                        style={{\n                          position: \"absolute\",\n                          top: \"5%\",\n                          left: \"20%\",\n                        }}\n                      >\n                        <p\n                          style={{\n                            marginBottom: \"0%\",\n                            paddingBottom: \"12%\",\n                            fontSize: \"140%\",\n                          }}\n                        >\n                          {name.length > 20 ? name.substr(0, 20) + \"...\" : name}\n                        </p>\n                        <button\n                          style={{\n                            display: \"block\",\n                            border: \"2px solid grey\",\n                            background: \"white\",\n                            padding: \"5%\",\n                            whiteSpace: \"nowrap\",\n                          }}\n                          onClick={showChangeProfile}\n                        >\n                          Edit Profile\n                        </button>\n                      </div>\n                      {/* <p>{email}</p> */}\n                    </MediaQuery>\n\n                    <MediaQuery minWidth={900}>\n                      <p>Out of screen width bound</p>\n                    </MediaQuery>\n                  </div>\n                )}\n              </>\n            ) : (\n              <>\n                <span>You need to login to access your profile!</span>\n              </>\n            )}\n\n            {/* Lets put the optionf of form for user to change profile */}\n            {props.isAunthenticated ? (\n              <div\n                style={{\n                  marginTop: \"2%\",\n                  display: \"none\",\n                  overflowX: \"hidden\",\n                }}\n                ref={changeProfileForm}\n              >\n                <div>\n                  <label>USERNAME:</label>\n                  <br />\n                  <MediaQuery maxWidth={400}>\n                    <input\n                      style={{\n                        width: \"90%\",\n                        border: \"2px solid grey\",\n                      }}\n                      ref={userNameRef}\n                      onChange={(e) => setJina(e.target.value)}\n                    />\n                    <br />\n                  </MediaQuery>\n                  <MediaQuery minWidth={401} maxWidth={550}>\n                    <input\n                      style={{\n                        width: \"70%\",\n                        border: \"2px solid grey\",\n                      }}\n                      ref={userNameRef}\n                      onChange={(e) => setJina(e.target.value)}\n                    />\n                    <br />\n                  </MediaQuery>\n                  <MediaQuery minWidth={551} maxWidth={650}>\n                    <input\n                      style={{\n                        width: \"55%\",\n                        border: \"2px solid grey\",\n                      }}\n                      ref={userNameRef}\n                      onChange={(e) => setJina(e.target.value)}\n                    />\n                    <br />\n                  </MediaQuery>\n                  <MediaQuery minWidth={651}>\n                    <input\n                      style={{\n                        width: \"45%\",\n                        border: \"2px solid grey\",\n                      }}\n                      ref={userNameRef}\n                      onChange={(e) => setJina(e.target.value)}\n                    />\n                    <br />\n                  </MediaQuery>\n                  <label\n                    style={{\n                      marginTop: \"3%\",\n                    }}\n                  >\n                    CHANGE AVATAR:\n                  </label>\n                  <br />\n                  <input\n                    accept=\"images/*\"\n                    id=\"upload\"\n                    type=\"file\"\n                    onChange={preview}\n                    style={{\n                      display: \"none\",\n                    }}\n                  />\n                  <label\n                    ref={actualPreview}\n                    htmlFor=\"upload\"\n                    style={{\n                      backgroundImage: `url(${BACKEND_ORIGIN}${profile})`,\n                      backgroundSize: \"100% 100%\",\n                      backgroundRepeat: \"no-repeat\",\n                      border: \"2px solid rgb(179, 177, 177)\",\n                      width: \"80px\",\n                      height: \"70px\",\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                      cursor: \"pointer\",\n                    }}\n                  >\n                    <img\n                      src=\"../static/images/imag.png\"\n                      width={25}\n                      height={25}\n                    />\n                  </label>\n                  <MediaQuery maxWidth={400}>\n                    <button\n                      type=\"submit\"\n                      onClick={editPro}\n                      style={{\n                        marginTop: \"2%\",\n                        width: \"90%\",\n                        border: \"2px solid grey\",\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                      }}\n                    >\n                      Update Profile\n                    </button>\n                  </MediaQuery>\n                  <MediaQuery minWidth={401} maxWidth={550}>\n                    <button\n                      type=\"submit\"\n                      onClick={editPro}\n                      style={{\n                        marginTop: \"2%\",\n                        width: \"70%\",\n                        border: \"2px solid grey\",\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                      }}\n                    >\n                      Update Profile\n                    </button>\n                  </MediaQuery>\n                  <MediaQuery minWidth={551} maxWidth={650}>\n                    <button\n                      type=\"submit\"\n                      onClick={editPro}\n                      style={{\n                        marginTop: \"2%\",\n                        width: \"55%\",\n                        border: \"2px solid grey\",\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                      }}\n                    >\n                      Update Profile\n                    </button>\n                  </MediaQuery>\n\n                  <MediaQuery minWidth={651}>\n                    <button\n                      type=\"submit\"\n                      onClick={editPro}\n                      style={{\n                        marginTop: \"2%\",\n                        width: \"45%\",\n                        border: \"2px solid grey\",\n                        fontWeight: \"bold\",\n                        color: \"grey\",\n                      }}\n                    >\n                      Update Profile\n                    </button>\n                  </MediaQuery>\n                </div>\n                <span\n                  style={{\n                    position: \"absolute\",\n                    top: \"2%\",\n                    fontSize: \"87%\",\n                    textDecoration: \"underline\",\n                    cursor: \"pointer\",\n                    color: \"whitesmoke\",\n                  }}\n                  onClick={redeamMeToProfile}\n                >\n                  Back\n                </span>\n              </div>\n            ) : (\n              <></>\n            )}\n\n            <hr className={styles.hrulb} />\n            {/* otherwise we should have big width displaying your picture and name */}\n\n            <p\n              style={{ cursor: \"pointer\" }}\n              onClick={() => Router.push(\"/cart\")}\n            >\n              My Cart\n            </p>\n            {props.isAunthenticated ? (\n              <p style={{ cursor: \"pointer\" }} onClick={onLogout}>\n                Logout\n              </p>\n            ) : (\n              <>\n                <p\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => Router.push(\"/login\")}\n                >\n                  Login\n                </p>\n                <p\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => Router.push(\"/jisajili\")}\n                >\n                  Register\n                </p>\n              </>\n            )}\n            {props.isAunthenticated ? (\n              <>\n                <hr style={{ border: \"1px solid grey\" }} />\n                <div>\n                  <p\n                    style={{ cursor: \"pointer\" }}\n                    ref={heade}\n                    onClick={changeNyila}\n                  >\n                    Change password\n                  </p>\n                  <div style={{ display: \"none\" }} ref={changePass}>\n                    <form>\n                      <label>Old password:</label>\n                      <br />\n                      <MediaQuery maxWidth={400}>\n                        <input\n                          type=\"password\"\n                          ref={oldPassInp}\n                          onChange={(e) => setOldPassword(e.target.value)}\n                          style={{ width: \"90%\" }}\n                        />\n                      </MediaQuery>\n                      <MediaQuery minWidth={401} maxWidth={550}>\n                        <input\n                          type=\"password\"\n                          ref={oldPassInp}\n                          onChange={(e) => setOldPassword(e.target.value)}\n                          style={{ width: \"70%\" }}\n                        />\n                      </MediaQuery>\n                      <MediaQuery minWidth={551} maxWidth={650}>\n                        <input\n                          type=\"password\"\n                          ref={oldPassInp}\n                          onChange={(e) => setOldPassword(e.target.value)}\n                          style={{ width: \"55%\" }}\n                        />\n                      </MediaQuery>\n                      <MediaQuery minWidth={651}>\n                        <input\n                          type=\"password\"\n                          ref={oldPassInp}\n                          onChange={(e) => setOldPassword(e.target.value)}\n                          style={{ width: \"45%\" }}\n                        />\n                      </MediaQuery>\n                      <br />\n                      <label>New password:</label>\n                      <br />\n                      <MediaQuery maxWidth={400}>\n                        <input\n                          type=\"password\"\n                          ref={passInp}\n                          onChange={(e) => setPassword(e.target.value)}\n                          style={{ width: \"90%\" }}\n                        />\n                      </MediaQuery>\n                      <MediaQuery minWidth={401} maxWidth={550}>\n                        <input\n                          type=\"password\"\n                          ref={passInp}\n                          onChange={(e) => setPassword(e.target.value)}\n                          style={{ width: \"70%\" }}\n                        />\n                      </MediaQuery>\n                      <MediaQuery minWidth={551} maxWidth={650}>\n                        <input\n                          type=\"password\"\n                          ref={passInp}\n                          onChange={(e) => setPassword(e.target.value)}\n                          style={{ width: \"55%\" }}\n                        />\n                      </MediaQuery>\n                      <MediaQuery minWidth={651}>\n                        <input\n                          type=\"password\"\n                          ref={passInp}\n                          onChange={(e) => setPassword(e.target.value)}\n                          style={{ width: \"45%\" }}\n                        />\n                      </MediaQuery>\n                      <br />\n                      <div\n                        style={{ marginTop: \"1%\", display: \"none\" }}\n                        ref={err}\n                      >\n                        <img\n                          ref={imageToDisappear}\n                          src=\"../static/images/warning.png\"\n                          width={12}\n                        />\n                        <span\n                          style={{\n                            color: \"rgb(184, 82, 82)\",\n                            marginLeft: \"2%\",\n                          }}\n                          ref={spanToChange}\n                        >\n                          {errorMessage}\n                        </span>\n                      </div>\n                      <MediaQuery maxWidth={400}>\n                        <button\n                          style={{\n                            marginTop: \"3%\",\n                            width: \"90%\",\n                            fontWeight: \"bold\",\n                            marginBottom: \"3%\",\n                          }}\n                          className=\"btn btn-primary\"\n                          onClick={changePassword}\n                        >\n                          Change\n                        </button>\n                      </MediaQuery>\n                      <MediaQuery minWidth={401} maxWidth={550}>\n                        <button\n                          style={{\n                            marginTop: \"3%\",\n                            width: \"70%\",\n                            fontWeight: \"bold\",\n                            marginBottom: \"3%\",\n                          }}\n                          className=\"btn btn-primary\"\n                          onClick={changePassword}\n                        >\n                          Change\n                        </button>\n                      </MediaQuery>\n                      <MediaQuery minWidth={551} maxWidth={650}>\n                        <button\n                          style={{\n                            marginTop: \"3%\",\n                            width: \"55%\",\n                            fontWeight: \"bold\",\n                            marginBottom: \"3%\",\n                          }}\n                          className=\"btn btn-primary\"\n                          onClick={changePassword}\n                        >\n                          Change\n                        </button>\n                      </MediaQuery>\n                      <MediaQuery minWidth={651}>\n                        <button\n                          style={{\n                            marginTop: \"3%\",\n                            width: \"45%\",\n                            fontWeight: \"bold\",\n                            marginBottom: \"3%\",\n                          }}\n                          className=\"btn btn-primary\"\n                          onClick={changePassword}\n                        >\n                          Change\n                        </button>\n                      </MediaQuery>\n                    </form>\n                  </div>\n                </div>\n              </>\n            ) : (\n              <></>\n            )}\n          </div>\n\n          <div className={styles.close} onClick={toggleSidebarOff}>\n            &times;\n          </div>\n        </div>\n      </div>\n\n      <footer className={styles.foo}>\n        <MediaQuery minWidth={200} maxWidth={400}>\n          <div className={styles.bobo} style={{ overflowX: \"hidden\" }}>\n            <div className={styles.kibe}>\n              <div className={styles.links}>\n                <span>\n                  <img\n                    src=\"../static/images/pin.png\"\n                    width={15}\n                    height={15}\n                    style={{ marginRight: \"10px\" }}\n                  />\n                  Kariakoo, Dar es salaam.\n                </span>\n              </div>\n\n              <div className={styles.links} style={{ paddingTop: \"1%\" }}>\n                <span>\n                  <img\n                    src=\"../static/images/tc2.png\"\n                    width={15}\n                    height={15}\n                    style={{ marginRight: \"10px\" }}\n                  />\n                  +255756144060.\n                </span>\n              </div>\n\n              <div className={styles.links} style={{ paddingTop: \"1%\" }}>\n                <span>\n                  <img\n                    src=\"../static/images/email.png\"\n                    width={15}\n                    height={15}\n                    style={{ marginRight: \"10px\" }}\n                  />\n                  support@personalizer.co.tz\n                </span>\n              </div>\n            </div>\n\n            <div className={styles.kibe2}>\n              <p>Follow Us</p>\n              <a\n                className={styles.lin}\n                target=\"_blank\"\n                href=\"https://google.com/\"\n              >\n                <Icon name=\"facebook\" size=\"large\" />\n              </a>\n              <a\n                className={styles.lin}\n                target=\"_blank\"\n                href=\"https://google.com/\"\n              >\n                <Icon name=\"instagram\" size=\"large\" />\n              </a>\n            </div>\n          </div>\n        </MediaQuery>\n\n        <MediaQuery minWidth={401} maxWidth={899}>\n          <div className={styles.bobo} style={{ overflowX: \"hidden\" }}>\n            <Grid>\n              <Grid.Column width={11}>\n                <div className={styles.kibe}>\n                  <div className={styles.links}>\n                    <span>\n                      <img\n                        src=\"../static/images/pin.png\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: \"10px\" }}\n                      />\n                      Kariakoo, Dar es salaam.\n                    </span>\n                  </div>\n\n                  <div className={styles.links} style={{ paddingTop: \"1%\" }}>\n                    <span>\n                      <img\n                        src=\"../static/images/tc2.png\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: \"10px\" }}\n                      />\n                      +255756144060.\n                    </span>\n                  </div>\n\n                  <div className={styles.links} style={{ paddingTop: \"1%\" }}>\n                    <span>\n                      <img\n                        src=\"../static/images/email.png\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: \"10px\" }}\n                      />\n                      support@personalizer.co.tz\n                    </span>\n                  </div>\n                </div>\n              </Grid.Column>\n              <Grid.Column width={5}>\n                <div className={styles.kibe2}>\n                  <p>Follow Us</p>\n                  <a\n                    className={styles.lin}\n                    target=\"_blank\"\n                    href=\"https://google.com/\"\n                  >\n                    <Icon name=\"facebook\" size=\"large\" />\n                  </a>\n                  <a\n                    className={styles.lin}\n                    target=\"_blank\"\n                    href=\"https://google.com/\"\n                  >\n                    <Icon name=\"instagram\" size=\"large\" />\n                  </a>\n                </div>\n              </Grid.Column>\n            </Grid>\n          </div>\n        </MediaQuery>\n\n        <MediaQuery minWidth={900} maxWidth={1199}>\n          <div className={styles.bobo} style={{ overflowX: \"hidden\" }}>\n            <Grid>\n              <Grid.Column width={8}>\n                <div className={styles.kibe}>\n                  <div className={styles.links}>\n                    <span>\n                      <img\n                        src=\"../static/images/pin.png\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: \"10px\" }}\n                      />\n                      Kariakoo, Dar es salaam.\n                    </span>\n                  </div>\n\n                  <div className={styles.links} style={{ paddingTop: \"1%\" }}>\n                    <span>\n                      <img\n                        src=\"../static/images/tc2.png\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: \"10px\" }}\n                      />\n                      +255756144060.\n                    </span>\n                  </div>\n\n                  <div className={styles.links} style={{ paddingTop: \"1%\" }}>\n                    <span>\n                      <img\n                        src=\"../static/images/email.png\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: \"10px\" }}\n                      />\n                      support@personalizer.co.tz\n                    </span>\n                  </div>\n                </div>\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <div className={styles.kibe2}>\n                  <p>Follow Us</p>\n                  <a\n                    className={styles.lin}\n                    target=\"_blank\"\n                    href=\"https://google.com/\"\n                  >\n                    <Icon name=\"facebook\" size=\"large\" />\n                  </a>\n                  <a\n                    className={styles.lin}\n                    target=\"_blank\"\n                    href=\"https://google.com/\"\n                  >\n                    <Icon name=\"instagram\" size=\"large\" />\n                  </a>\n                </div>\n              </Grid.Column>\n            </Grid>\n          </div>\n        </MediaQuery>\n\n        <MediaQuery minWidth={1200} maxWidth={1651}>\n          <div className={styles.bobo} style={{ overflowX: \"hidden\" }}>\n            <Grid>\n              <Grid.Column width={8}>\n                <div className={styles.kibe}>\n                  <div className={styles.links}>\n                    <span>\n                      <img\n                        src=\"../static/images/pin.png\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: \"10px\" }}\n                      />\n                      Kariakoo, Dar es salaam.\n                    </span>\n                  </div>\n\n                  <div className={styles.links} style={{ paddingTop: \"1%\" }}>\n                    <span>\n                      <img\n                        src=\"../static/images/tc2.png\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: \"10px\" }}\n                      />\n                      +255756144060.\n                    </span>\n                  </div>\n\n                  <div className={styles.links} style={{ paddingTop: \"1%\" }}>\n                    <span>\n                      <img\n                        src=\"../static/images/email.png\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: \"10px\" }}\n                      />\n                      support@personalizer.co.tz\n                    </span>\n                  </div>\n                </div>\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <div className={styles.kibe2}>\n                  <p>Follow Us</p>\n                  <a\n                    className={styles.lin}\n                    target=\"_blank\"\n                    href=\"https://google.com/\"\n                  >\n                    <Icon name=\"facebook\" size=\"large\" />\n                  </a>\n                  <a\n                    className={styles.lin}\n                    target=\"_blank\"\n                    href=\"https://google.com/\"\n                  >\n                    <Icon name=\"instagram\" size=\"large\" />\n                  </a>\n                </div>\n              </Grid.Column>\n            </Grid>\n          </div>\n        </MediaQuery>\n\n        <MediaQuery minWidth={1652}>\n          <div className={styles.bobo} style={{ overflowX: \"hidden\" }}>\n            <Grid>\n              <Grid.Column width={8}>\n                <div className={styles.kibe}>\n                  <div className={styles.links}>\n                    <span>\n                      <img\n                        src=\"../static/images/pin.png\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: \"10px\" }}\n                      />\n                      Kariakoo, Dar es salaam.\n                    </span>\n                  </div>\n\n                  <div className={styles.links} style={{ paddingTop: \"1%\" }}>\n                    <span>\n                      <img\n                        src=\"../static/images/tc2.png\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: \"10px\" }}\n                      />\n                      +255756144060.\n                    </span>\n                  </div>\n\n                  <div className={styles.links} style={{ paddingTop: \"1%\" }}>\n                    <span>\n                      <img\n                        src=\"../static/images/email.png\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: \"10px\" }}\n                      />\n                      support@personalizer.co.tz\n                    </span>\n                  </div>\n                </div>\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <div className={styles.kibe2}>\n                  <p>Follow Us</p>\n                  <a\n                    className={styles.lin}\n                    target=\"_blank\"\n                    href=\"https://google.com/\"\n                  >\n                    <Icon name=\"facebook\" size=\"large\" />\n                  </a>\n                  <a\n                    className={styles.lin}\n                    target=\"_blank\"\n                    href=\"https://google.com/\"\n                  >\n                    <Icon name=\"instagram\" size=\"large\" />\n                  </a>\n                </div>\n              </Grid.Column>\n            </Grid>\n          </div>\n        </MediaQuery>\n      </footer>\n    </div>\n  );\n};\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/components/Sign.js",["443","444"],[],"import React, { Component } from \"react\";\nimport {\n  Button,\n  Form,\n  Segment,\n  Grid,\n  Icon,\n  Header,\n  Message,\n} from \"semantic-ui-react\";\nimport styles from \"../static/css/sign.module.css\";\nimport jwt_decode from \"jwt-decode\";\nimport Router from 'next/router'\nimport BACKEND_ORIGIN from \"../utils/domain\";\n\nclass Sign extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    email: \"\",\n    nywila: \"\",\n    message: \"\",\n    message2: \"\",\n    loading: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.errorContainer = React.createRef();\n    this.errorContainer1 = React.createRef();\n    this.loginError = React.createRef();\n    this.loginSuccess = React.createRef();\n  }\n\n  onRegister = (e) => {\n    //console.log('Hey you clicked on register')\n    this.setState({ loading: true });\n    e.preventDefault();\n\n    if (\n      this.state.username.trim().length === 0 ||\n      this.state.password.trim().length === 0\n    ) {\n      this.setState({\n        message: \"We don't accept empty field\",\n      });\n\n      this.errorContainer.current.style.display = \"block\";\n\n      this.errorShow = setTimeout(() => {\n        this.errorContainer.current.style.display = \"none\";\n      }, 5000);\n\n      this.setState({\n        loading: false,\n      });\n      return;\n    }\n\n    if (this.state.password.trim().length < 6) {\n      this.setState({\n        message: \"Shorter password less than6 characters\",\n      });\n\n      this.errorContainer.current.style.display = \"block\";\n\n      this.errorShow = setTimeout(() => {\n        this.errorContainer.current.style.display = \"none\";\n      }, 5000);\n      this.setState({\n        loading: false,\n      });\n      return;\n    }\n\n    if (!this.state.username.trim().includes(\"@\")) {\n      this.setState({\n        message: \"Wrong format of email\",\n      });\n\n      this.errorContainer.current.style.display = \"block\";\n\n      this.errorShow = setTimeout(() => {\n        this.errorContainer.current.style.display = \"none\";\n      }, 5000);\n\n      this.setState({\n        loading: false,\n      });\n      return;\n    }\n\n    fetch(`${BACKEND_ORIGIN}/api/register/`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        email: this.state.username,\n        password: this.state.password,\n      }),\n    })\n      .then((response) => response.json())\n      .then((json) => {\n        if (json.err) {\n          console.log(json.err);\n          this.setState({\n            message: \"Failed!, the user of this email already exist\",\n          });\n          this.errorContainer.current.style.display = \"block\";\n          this.timeout1 = setTimeout(() => {\n            this.errorContainer.current.style.display = \"none\";\n          }, 5000);\n          // this.setState({\n          //     username: \"\",\n          //     password: \"\"\n          // })\n          this.setState({\n            loading: false,\n          });\n          return;\n        } else if (json.error) {\n          this.setState({\n            message: \"Failed!, Invalid data\",\n          });\n          this.errorContainer.current.style.display = \"block\";\n          this.timeout1 = setTimeout(() => {\n            this.errorContainer.current.style.display = \"none\";\n          }, 5000);\n\n          this.setState({\n            loading: false,\n          });\n          return;\n        }\n\n        console.log(\"Everyting is good bro...\");\n        this.setState({ loading: false });\n        this.errorContainer1.current.style.display = \"block\";\n        this.timeout2 = setTimeout(async () => {\n          // lets login the user...\n          console.log(\"we should login this user\");\n          let weLive = await fetch(`${BACKEND_ORIGIN}/api/token/`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              email: this.state.username,\n              password: this.state.password,\n            }),\n          });\n\n          let gza = await weLive.json();\n          console.log(\"gza\", gza);\n          if (weLive.status !== 200) {\n            return console.log(\n              \"Error to login this user, status code of 200 is returned\"\n            );\n          }\n          localStorage.setItem(\"authTokens\", JSON.stringify(gza));\n\n          this.errorContainer1.current.style.display = \"none\";\n\n          this.props.closeLoginPanel();\n        }, 100);\n      });\n  };\n\n  onLogin = async (e) => {\n    e.preventDefault();\n\n    if (\n      this.state.email.trim().length === 0 ||\n      this.state.nywila.trim().length === 0\n    ) {\n      this.setState({\n        message2: \"We don't accept empty field\",\n      });\n\n      this.loginError.current.style.display = \"block\";\n\n      this.errorShow2 = setTimeout(() => {\n        this.loginError.current.style.display = \"none\";\n      }, 5000);\n\n      this.setState({\n        loading: false,\n      });\n      return;\n    }\n\n    let response = await fetch(`${BACKEND_ORIGIN}/api/token/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email: this.state.email,\n        password: this.state.nywila,\n      }),\n    });\n\n    let data = await response.json();\n\n    console.log(\"data\", data);\n    if (response.status != 200) {\n      this.setState({\n        message2: \"Unable to login, Bad credentials!\",\n      });\n      console.log(\"Bad credentials\");\n      this.loginError.current.style.display = \"block\";\n      this.loginSetTimeout = setTimeout(() => {\n        this.loginError.current.style.display = \"none\";\n      }, 5000);\n      return;\n    }\n\n    console.log(\"Everything is good, you have good credentails...\");\n    console.log(\"this is the id of the user\");\n    const user = jwt_decode(data.access);\n    console.log(\"This is decoded jwt token...\");\n    console.log(user);\n    console.log(user.user_id);\n    localStorage.setItem(\"authTokens\", JSON.stringify(data));\n    console.log(\"Mpaka hatua hii inabid u-close hii window coz user ashalogin\");\n    this.loginSuccess.current.style.display = \"block\";\n\n    this.successSetTimeOut = setTimeout(() => {\n      this.loginSuccess.current.style.display = \"none\";\n\n      // Hizi ni component mbili tofauti so ikikataa ni sawa tu ....\n      // so how we can close this window...\n      {\n        this.props.closeLoginPanel();\n      }\n    }, 1000);\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout1);\n    clearTimeout(this.timeout2);\n    clearTimeout(this.loginSetTimeout);\n    clearTimeout(this.successSetTimeOut);\n    clearTimeout(this.errorShow);\n    clearTimeout(this.errorShow2);\n  }\n\n  render() {\n    return (\n      <div className={styles.father}>\n        <Segment>\n          <Header\n            as=\"h1\"\n            content=\"To have many more features like adding items to shoping cart you should login.\"\n            color=\"grey\"\n            textAlign=\"center\"\n          />\n          <hr style={{ border: \"1px solid grey\" }} />\n          <Grid>\n            <Grid.Column width={10}>\n              <Segment>\n                <Header as=\"h2\">\n                  {\" \"}\n                  You don't have account? Create one for you.\n                </Header>\n                <Form>\n                  <Form.Group widths=\"equal\">\n                    <Form.Input\n                      fluid\n                      label=\"Username\"\n                      onChange={(event) =>\n                        this.setState({ username: event.target.value })\n                      }\n                    />\n\n                    <Form.Input\n                      fluid\n                      label=\"Password\"\n                      type=\"password\"\n                      onChange={(event) =>\n                        this.setState({ password: event.target.value })\n                      }\n                    />\n                  </Form.Group>\n                  <Button\n                    loading={this.state.loading}\n                    type=\"submit\"\n                    content=\"Register\"\n                    fluid\n                    primary\n                    onClick={this.onRegister}\n                  />\n                </Form>\n                <div className={styles.cont} ref={this.errorContainer}>\n                  <Message error>\n                    <Message.Header>\n                      Error, unable create account!\n                    </Message.Header>\n                    <Icon name=\"warning sign\" />\n                    {this.state.message}\n                  </Message>\n                </div>\n\n                <div className={styles.cont2} ref={this.errorContainer1}>\n                  <Message success>\n                    <Message.Header>Account created successful</Message.Header>\n                    Now you can login with your password and email as username\n                  </Message>\n                </div>\n              </Segment>\n            </Grid.Column>\n            <Grid.Column width={6}>\n              <Segment>\n                <span className={styles.spt}>\n                  Already have account\n                  <Icon name=\"question\" />\n                  Login here\n                </span>\n                <hr />\n                <Form>\n                  <Form.Field>\n                    <label>Username</label>\n                    <input\n                      onChange={(event) =>\n                        this.setState({ email: event.target.value })\n                      }\n                    />\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Password</label>\n                    <input\n                      onChange={(event) =>\n                        this.setState({ nywila: event.target.value })\n                      }\n                      type=\"password\"\n                    />\n                  </Form.Field>\n\n                  <p\n                    className={styles.fp}\n                    onClick={() => Router.push(\"/reset\")}\n                  >\n                    Forgot password?\n                  </p>\n\n                  <Button\n                    animated=\"vertical\"\n                    fluid\n                    color=\"teal\"\n                    onClick={this.onLogin}\n                  >\n                    <Button.Content visible>Login</Button.Content>\n                    <Button.Content hidden>\n                      <Icon name=\"arrow right\" />\n                    </Button.Content>\n                  </Button>\n                </Form>\n\n                <div\n                  ref={this.loginError}\n                  style={{ display: \"none\", marginTop: \"1%\" }}\n                >\n                  <Message error>\n                    <Message.Header>Unauthorized</Message.Header>\n                    <Icon name=\"warning sign\" />\n                    {/* Unable to login, Bad credentials */}\n                    {this.state.message2}\n                  </Message>\n                </div>\n\n                <div\n                  ref={this.loginSuccess}\n                  style={{ display: \"none\", marginTop: \"1%\" }}\n                >\n                  <Message success>\n                    <Message.Header>Login successful</Message.Header>\n                    Now you're free to add items to the cart\n                  </Message>\n                </div>\n              </Segment>\n            </Grid.Column>\n          </Grid>\n        </Segment>\n      </div>\n    );\n  }\n}\n\nexport default Sign;\n","/home/mweuc/PROJECTS/PERSONALYZER/NEW LIFE ON LENOVO THINKCENTER/Trying to Host on Vercel Next Deployer/Frontend/frontend/pages/_app.js",["445"],[],"\n\nimport NextNProgress from \"nextjs-progressbar\";\n{\n  /* THIS FILE SHOULD BE THERE IF YOU WANT TO SHOW THE PROGRESS WHEN YOU MOVE FROM ONE PAGE TO ANOTHER .. FOR MORE VIEW THIS LINK \nhttps://www.npmjs.com/package/nextjs-progressbar */\n}\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <NextNProgress color=\"red\" />\n      <Component {...pageProps} />\n    </>\n  );\n}\n",{"ruleId":"446","severity":1,"message":"447","line":13,"column":10,"nodeType":"448","messageId":"449","endLine":13,"endColumn":14},{"ruleId":"450","severity":1,"message":"451","line":369,"column":23,"nodeType":"452","endLine":376,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":378,"column":23,"nodeType":"452","endLine":385,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":398,"column":31,"nodeType":"452","endLine":403,"endColumn":33},{"ruleId":"450","severity":1,"message":"451","line":539,"column":27,"nodeType":"452","endLine":544,"endColumn":29},{"ruleId":"450","severity":1,"message":"451","line":553,"column":23,"nodeType":"452","endLine":560,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":562,"column":23,"nodeType":"452","endLine":569,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":585,"column":33,"nodeType":"452","endLine":590,"endColumn":35},{"ruleId":"450","severity":1,"message":"451","line":593,"column":33,"nodeType":"452","endLine":598,"endColumn":35},{"ruleId":"450","severity":1,"message":"451","line":952,"column":35,"nodeType":"452","endLine":959,"endColumn":37},{"ruleId":"450","severity":1,"message":"451","line":970,"column":35,"nodeType":"452","endLine":977,"endColumn":37},{"ruleId":"450","severity":1,"message":"451","line":989,"column":35,"nodeType":"452","endLine":996,"endColumn":37},{"ruleId":"450","severity":1,"message":"451","line":1025,"column":27,"nodeType":"452","endLine":1030,"endColumn":29},{"ruleId":"450","severity":1,"message":"451","line":1039,"column":23,"nodeType":"452","endLine":1046,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1048,"column":23,"nodeType":"452","endLine":1055,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1071,"column":31,"nodeType":"452","endLine":1076,"endColumn":33},{"ruleId":"453","severity":1,"message":"454","line":1081,"column":56,"nodeType":"455","messageId":"456","endLine":1081,"endColumn":59},{"ruleId":"450","severity":1,"message":"451","line":1530,"column":33,"nodeType":"452","endLine":1537,"endColumn":35},{"ruleId":"450","severity":1,"message":"451","line":1568,"column":27,"nodeType":"452","endLine":1573,"endColumn":29},{"ruleId":"450","severity":1,"message":"451","line":1584,"column":29,"nodeType":"452","endLine":1591,"endColumn":31},{"ruleId":"450","severity":1,"message":"451","line":1593,"column":29,"nodeType":"452","endLine":1600,"endColumn":31},{"ruleId":"450","severity":1,"message":"451","line":1645,"column":41,"nodeType":"452","endLine":1653,"endColumn":43},{"ruleId":"450","severity":1,"message":"451","line":2223,"column":25,"nodeType":"452","endLine":2227,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":2264,"column":25,"nodeType":"452","endLine":2268,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":2309,"column":23,"nodeType":"452","endLine":2313,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":2370,"column":23,"nodeType":"452","endLine":2374,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":2412,"column":23,"nodeType":"452","endLine":2416,"endColumn":25},{"ruleId":"457","severity":1,"message":"458","line":22,"column":3,"nodeType":"459","messageId":"460","endLine":24,"endColumn":4},{"ruleId":"450","severity":1,"message":"451","line":1439,"column":25,"nodeType":"452","endLine":1443,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":1479,"column":25,"nodeType":"452","endLine":1483,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":1519,"column":25,"nodeType":"452","endLine":1523,"endColumn":27},{"ruleId":"461","severity":1,"message":"462","line":205,"column":5,"nodeType":"463","messageId":"464","endLine":205,"endColumn":25,"fix":"465"},{"ruleId":"466","severity":1,"message":"467","line":300,"column":25,"nodeType":"468","messageId":"456","endLine":300,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":477,"column":23,"nodeType":"452","endLine":480,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":538,"column":25,"nodeType":"452","endLine":541,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":544,"column":25,"nodeType":"452","endLine":547,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":597,"column":25,"nodeType":"452","endLine":600,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":603,"column":25,"nodeType":"452","endLine":606,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":610,"column":25,"nodeType":"452","endLine":613,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":663,"column":23,"nodeType":"452","endLine":666,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":710,"column":25,"nodeType":"452","endLine":713,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":717,"column":25,"nodeType":"452","endLine":720,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":776,"column":23,"nodeType":"452","endLine":780,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":816,"column":23,"nodeType":"452","endLine":820,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":856,"column":23,"nodeType":"452","endLine":860,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":909,"column":23,"nodeType":"452","endLine":914,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":919,"column":25,"nodeType":"452","endLine":926,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":1224,"column":23,"nodeType":"452","endLine":1229,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1234,"column":25,"nodeType":"452","endLine":1241,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":1550,"column":23,"nodeType":"452","endLine":1555,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1564,"column":23,"nodeType":"452","endLine":1569,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1578,"column":23,"nodeType":"452","endLine":1583,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1589,"column":23,"nodeType":"452","endLine":1596,"endColumn":25},{"ruleId":"446","severity":1,"message":"469","line":10,"column":3,"nodeType":"448","messageId":"449","endLine":10,"endColumn":8},{"ruleId":"446","severity":1,"message":"470","line":15,"column":3,"nodeType":"448","messageId":"449","endLine":15,"endColumn":8},{"ruleId":"461","severity":1,"message":"462","line":227,"column":5,"nodeType":"463","messageId":"464","endLine":227,"endColumn":25,"fix":"471"},{"ruleId":"466","severity":1,"message":"467","line":336,"column":25,"nodeType":"468","messageId":"456","endLine":336,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":502,"column":19,"nodeType":"452","endLine":502,"endColumn":73},{"ruleId":"450","severity":1,"message":"451","line":667,"column":19,"nodeType":"452","endLine":667,"endColumn":73},{"ruleId":"450","severity":1,"message":"451","line":701,"column":19,"nodeType":"452","endLine":701,"endColumn":73},{"ruleId":"450","severity":1,"message":"451","line":799,"column":19,"nodeType":"452","endLine":799,"endColumn":72},{"ruleId":"450","severity":1,"message":"451","line":832,"column":19,"nodeType":"452","endLine":832,"endColumn":72},{"ruleId":"450","severity":1,"message":"451","line":868,"column":19,"nodeType":"452","endLine":868,"endColumn":73},{"ruleId":"450","severity":1,"message":"451","line":900,"column":19,"nodeType":"452","endLine":900,"endColumn":73},{"ruleId":"450","severity":1,"message":"451","line":996,"column":19,"nodeType":"452","endLine":996,"endColumn":72},{"ruleId":"450","severity":1,"message":"451","line":1028,"column":19,"nodeType":"452","endLine":1028,"endColumn":72},{"ruleId":"450","severity":1,"message":"451","line":1065,"column":19,"nodeType":"452","endLine":1065,"endColumn":73},{"ruleId":"450","severity":1,"message":"451","line":1097,"column":19,"nodeType":"452","endLine":1097,"endColumn":73},{"ruleId":"450","severity":1,"message":"451","line":1129,"column":19,"nodeType":"452","endLine":1129,"endColumn":71},{"ruleId":"450","severity":1,"message":"451","line":1263,"column":19,"nodeType":"452","endLine":1263,"endColumn":73},{"ruleId":"450","severity":1,"message":"451","line":1295,"column":19,"nodeType":"452","endLine":1295,"endColumn":73},{"ruleId":"450","severity":1,"message":"451","line":1327,"column":19,"nodeType":"452","endLine":1327,"endColumn":71},{"ruleId":"450","severity":1,"message":"451","line":1461,"column":19,"nodeType":"452","endLine":1461,"endColumn":73},{"ruleId":"450","severity":1,"message":"451","line":1493,"column":19,"nodeType":"452","endLine":1493,"endColumn":73},{"ruleId":"450","severity":1,"message":"451","line":1525,"column":19,"nodeType":"452","endLine":1525,"endColumn":71},{"ruleId":"450","severity":1,"message":"451","line":1557,"column":19,"nodeType":"452","endLine":1557,"endColumn":71},{"ruleId":"450","severity":1,"message":"451","line":1589,"column":19,"nodeType":"452","endLine":1589,"endColumn":72},{"ruleId":"450","severity":1,"message":"451","line":1658,"column":19,"nodeType":"452","endLine":1658,"endColumn":73},{"ruleId":"450","severity":1,"message":"451","line":2073,"column":25,"nodeType":"452","endLine":2076,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":2146,"column":25,"nodeType":"452","endLine":2149,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":2213,"column":27,"nodeType":"452","endLine":2216,"endColumn":29},{"ruleId":"450","severity":1,"message":"451","line":2219,"column":27,"nodeType":"452","endLine":2222,"endColumn":29},{"ruleId":"450","severity":1,"message":"451","line":2225,"column":27,"nodeType":"452","endLine":2228,"endColumn":29},{"ruleId":"450","severity":1,"message":"451","line":2293,"column":27,"nodeType":"452","endLine":2296,"endColumn":29},{"ruleId":"450","severity":1,"message":"451","line":2299,"column":27,"nodeType":"452","endLine":2302,"endColumn":29},{"ruleId":"450","severity":1,"message":"451","line":2354,"column":25,"nodeType":"452","endLine":2357,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":2413,"column":23,"nodeType":"452","endLine":2418,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":2423,"column":25,"nodeType":"452","endLine":2430,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":2728,"column":23,"nodeType":"452","endLine":2733,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":2738,"column":25,"nodeType":"452","endLine":2745,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":3055,"column":23,"nodeType":"452","endLine":3060,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3069,"column":23,"nodeType":"452","endLine":3074,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3083,"column":23,"nodeType":"452","endLine":3088,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3094,"column":23,"nodeType":"452","endLine":3101,"endColumn":25},{"ruleId":"446","severity":1,"message":"472","line":4,"column":25,"nodeType":"448","messageId":"449","endLine":4,"endColumn":31},{"ruleId":"450","severity":1,"message":"451","line":292,"column":35,"nodeType":"452","endLine":296,"endColumn":37},{"ruleId":"450","severity":1,"message":"451","line":441,"column":25,"nodeType":"452","endLine":441,"endColumn":78},{"ruleId":"450","severity":1,"message":"451","line":350,"column":37,"nodeType":"452","endLine":353,"endColumn":39},{"ruleId":"450","severity":1,"message":"451","line":474,"column":39,"nodeType":"452","endLine":478,"endColumn":41},{"ruleId":"450","severity":1,"message":"451","line":499,"column":39,"nodeType":"452","endLine":503,"endColumn":41},{"ruleId":"466","severity":1,"message":"467","line":299,"column":25,"nodeType":"468","messageId":"456","endLine":299,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":468,"column":23,"nodeType":"452","endLine":471,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":529,"column":25,"nodeType":"452","endLine":532,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":535,"column":25,"nodeType":"452","endLine":538,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":588,"column":25,"nodeType":"452","endLine":591,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":594,"column":25,"nodeType":"452","endLine":597,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":601,"column":25,"nodeType":"452","endLine":604,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":654,"column":23,"nodeType":"452","endLine":657,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":701,"column":25,"nodeType":"452","endLine":704,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":708,"column":25,"nodeType":"452","endLine":711,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":764,"column":21,"nodeType":"452","endLine":768,"endColumn":23},{"ruleId":"450","severity":1,"message":"451","line":804,"column":21,"nodeType":"452","endLine":808,"endColumn":23},{"ruleId":"450","severity":1,"message":"451","line":844,"column":21,"nodeType":"452","endLine":848,"endColumn":23},{"ruleId":"450","severity":1,"message":"451","line":902,"column":23,"nodeType":"452","endLine":907,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":912,"column":25,"nodeType":"452","endLine":919,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":1217,"column":23,"nodeType":"452","endLine":1222,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1227,"column":25,"nodeType":"452","endLine":1234,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":1544,"column":23,"nodeType":"452","endLine":1549,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1558,"column":23,"nodeType":"452","endLine":1563,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1572,"column":23,"nodeType":"452","endLine":1577,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1583,"column":23,"nodeType":"452","endLine":1590,"endColumn":25},{"ruleId":"446","severity":1,"message":"473","line":3,"column":8,"nodeType":"448","messageId":"449","endLine":3,"endColumn":12},{"ruleId":"466","severity":1,"message":"467","line":133,"column":23,"nodeType":"468","messageId":"456","endLine":133,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":429,"column":23,"nodeType":"452","endLine":435,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":440,"column":17,"nodeType":"452","endLine":445,"endColumn":19},{"ruleId":"450","severity":1,"message":"451","line":731,"column":23,"nodeType":"452","endLine":737,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":742,"column":17,"nodeType":"452","endLine":747,"endColumn":19},{"ruleId":"466","severity":1,"message":"467","line":828,"column":70,"nodeType":"468","messageId":"456","endLine":828,"endColumn":72},{"ruleId":"450","severity":1,"message":"451","line":1001,"column":23,"nodeType":"452","endLine":1007,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1012,"column":17,"nodeType":"452","endLine":1017,"endColumn":19},{"ruleId":"466","severity":1,"message":"467","line":1104,"column":72,"nodeType":"468","messageId":"456","endLine":1104,"endColumn":74},{"ruleId":"466","severity":1,"message":"467","line":1251,"column":72,"nodeType":"468","messageId":"456","endLine":1251,"endColumn":74},{"ruleId":"466","severity":1,"message":"467","line":1400,"column":69,"nodeType":"468","messageId":"456","endLine":1400,"endColumn":71},{"ruleId":"466","severity":1,"message":"467","line":280,"column":25,"nodeType":"468","messageId":"456","endLine":280,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":408,"column":21,"nodeType":"452","endLine":411,"endColumn":23},{"ruleId":"450","severity":1,"message":"451","line":469,"column":23,"nodeType":"452","endLine":472,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":475,"column":23,"nodeType":"452","endLine":478,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":528,"column":23,"nodeType":"452","endLine":531,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":534,"column":23,"nodeType":"452","endLine":537,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":541,"column":23,"nodeType":"452","endLine":544,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":594,"column":21,"nodeType":"452","endLine":597,"endColumn":23},{"ruleId":"450","severity":1,"message":"451","line":641,"column":23,"nodeType":"452","endLine":644,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":648,"column":23,"nodeType":"452","endLine":651,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":713,"column":23,"nodeType":"452","endLine":718,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":723,"column":25,"nodeType":"452","endLine":730,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":953,"column":23,"nodeType":"452","endLine":958,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":963,"column":25,"nodeType":"452","endLine":970,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":1205,"column":23,"nodeType":"452","endLine":1210,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1219,"column":23,"nodeType":"452","endLine":1224,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1233,"column":23,"nodeType":"452","endLine":1238,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1244,"column":23,"nodeType":"452","endLine":1251,"endColumn":25},{"ruleId":"446","severity":1,"message":"474","line":125,"column":13,"nodeType":"448","messageId":"449","endLine":125,"endColumn":17},{"ruleId":"450","severity":1,"message":"451","line":584,"column":27,"nodeType":"452","endLine":589,"endColumn":29},{"ruleId":"450","severity":1,"message":"451","line":592,"column":27,"nodeType":"452","endLine":597,"endColumn":29},{"ruleId":"450","severity":1,"message":"451","line":823,"column":29,"nodeType":"452","endLine":826,"endColumn":31},{"ruleId":"450","severity":1,"message":"451","line":832,"column":29,"nodeType":"452","endLine":835,"endColumn":31},{"ruleId":"450","severity":1,"message":"451","line":903,"column":33,"nodeType":"452","endLine":907,"endColumn":35},{"ruleId":"450","severity":1,"message":"451","line":938,"column":21,"nodeType":"452","endLine":942,"endColumn":23},{"ruleId":"450","severity":1,"message":"451","line":999,"column":21,"nodeType":"452","endLine":1003,"endColumn":23},{"ruleId":"450","severity":1,"message":"451","line":1041,"column":21,"nodeType":"452","endLine":1045,"endColumn":23},{"ruleId":"446","severity":1,"message":"475","line":4,"column":8,"nodeType":"448","messageId":"449","endLine":4,"endColumn":14},{"ruleId":"446","severity":1,"message":"476","line":111,"column":11,"nodeType":"448","messageId":"449","endLine":111,"endColumn":15},{"ruleId":"461","severity":1,"message":"462","line":204,"column":5,"nodeType":"463","messageId":"464","endLine":204,"endColumn":25,"fix":"477"},{"ruleId":"466","severity":1,"message":"467","line":299,"column":25,"nodeType":"468","messageId":"456","endLine":299,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":471,"column":23,"nodeType":"452","endLine":474,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":531,"column":25,"nodeType":"452","endLine":534,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":537,"column":25,"nodeType":"452","endLine":540,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":589,"column":25,"nodeType":"452","endLine":592,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":595,"column":25,"nodeType":"452","endLine":598,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":602,"column":25,"nodeType":"452","endLine":605,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":654,"column":23,"nodeType":"452","endLine":657,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":700,"column":25,"nodeType":"452","endLine":703,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":707,"column":25,"nodeType":"452","endLine":710,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":765,"column":23,"nodeType":"452","endLine":769,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":805,"column":23,"nodeType":"452","endLine":809,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":845,"column":23,"nodeType":"452","endLine":849,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":898,"column":23,"nodeType":"452","endLine":903,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":908,"column":25,"nodeType":"452","endLine":915,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":1213,"column":23,"nodeType":"452","endLine":1218,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1223,"column":25,"nodeType":"452","endLine":1230,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":1540,"column":23,"nodeType":"452","endLine":1545,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1554,"column":23,"nodeType":"452","endLine":1559,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1568,"column":23,"nodeType":"452","endLine":1573,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":1579,"column":23,"nodeType":"452","endLine":1586,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":291,"column":35,"nodeType":"452","endLine":295,"endColumn":37},{"ruleId":"450","severity":1,"message":"451","line":448,"column":25,"nodeType":"452","endLine":448,"endColumn":78},{"ruleId":"446","severity":1,"message":"470","line":2,"column":35,"nodeType":"448","messageId":"449","endLine":2,"endColumn":40},{"ruleId":"446","severity":1,"message":"478","line":6,"column":8,"nodeType":"448","messageId":"449","endLine":6,"endColumn":13},{"ruleId":"446","severity":1,"message":"479","line":9,"column":8,"nodeType":"448","messageId":"449","endLine":9,"endColumn":13},{"ruleId":"480","severity":1,"message":"481","line":25,"column":1,"nodeType":"482","endLine":3221,"endColumn":3},{"ruleId":"446","severity":1,"message":"483","line":46,"column":10,"nodeType":"448","messageId":"449","endLine":46,"endColumn":21},{"ruleId":"446","severity":1,"message":"484","line":56,"column":10,"nodeType":"448","messageId":"449","endLine":56,"endColumn":15},{"ruleId":"485","severity":1,"message":"486","line":559,"column":9,"nodeType":"487","messageId":"488","endLine":559,"endColumn":16},{"ruleId":"485","severity":1,"message":"486","line":561,"column":9,"nodeType":"487","messageId":"488","endLine":561,"endColumn":16},{"ruleId":"489","severity":1,"message":"490","line":572,"column":6,"nodeType":"491","endLine":572,"endColumn":18,"suggestions":"492"},{"ruleId":"489","severity":1,"message":"493","line":608,"column":6,"nodeType":"491","endLine":608,"endColumn":20,"suggestions":"494"},{"ruleId":"489","severity":1,"message":"495","line":651,"column":6,"nodeType":"491","endLine":651,"endColumn":8,"suggestions":"496"},{"ruleId":"450","severity":1,"message":"451","line":687,"column":27,"nodeType":"452","endLine":691,"endColumn":29},{"ruleId":"450","severity":1,"message":"451","line":700,"column":27,"nodeType":"452","endLine":700,"endColumn":77},{"ruleId":"450","severity":1,"message":"451","line":761,"column":25,"nodeType":"452","endLine":765,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":775,"column":25,"nodeType":"452","endLine":775,"endColumn":76},{"ruleId":"450","severity":1,"message":"451","line":843,"column":25,"nodeType":"452","endLine":847,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":857,"column":25,"nodeType":"452","endLine":857,"endColumn":76},{"ruleId":"450","severity":1,"message":"451","line":999,"column":25,"nodeType":"452","endLine":999,"endColumn":76},{"ruleId":"450","severity":1,"message":"451","line":1141,"column":25,"nodeType":"452","endLine":1141,"endColumn":76},{"ruleId":"450","severity":1,"message":"451","line":2608,"column":23,"nodeType":"452","endLine":2612,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":2810,"column":27,"nodeType":"452","endLine":2814,"endColumn":29},{"ruleId":"450","severity":1,"message":"451","line":2903,"column":19,"nodeType":"452","endLine":2908,"endColumn":21},{"ruleId":"450","severity":1,"message":"451","line":2915,"column":19,"nodeType":"452","endLine":2920,"endColumn":21},{"ruleId":"450","severity":1,"message":"451","line":2927,"column":19,"nodeType":"452","endLine":2932,"endColumn":21},{"ruleId":"497","severity":1,"message":"498","line":2940,"column":15,"nodeType":"452","messageId":"499","endLine":2944,"endColumn":16,"fix":"500"},{"ruleId":"497","severity":1,"message":"498","line":2947,"column":15,"nodeType":"452","messageId":"499","endLine":2951,"endColumn":16,"fix":"501"},{"ruleId":"450","severity":1,"message":"451","line":2965,"column":23,"nodeType":"452","endLine":2970,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":2977,"column":23,"nodeType":"452","endLine":2982,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":2989,"column":23,"nodeType":"452","endLine":2994,"endColumn":25},{"ruleId":"497","severity":1,"message":"498","line":3003,"column":19,"nodeType":"452","messageId":"499","endLine":3007,"endColumn":20,"fix":"502"},{"ruleId":"497","severity":1,"message":"498","line":3010,"column":19,"nodeType":"452","messageId":"499","endLine":3014,"endColumn":20,"fix":"503"},{"ruleId":"450","severity":1,"message":"451","line":3030,"column":23,"nodeType":"452","endLine":3035,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3042,"column":23,"nodeType":"452","endLine":3047,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3054,"column":23,"nodeType":"452","endLine":3059,"endColumn":25},{"ruleId":"497","severity":1,"message":"498","line":3068,"column":19,"nodeType":"452","messageId":"499","endLine":3072,"endColumn":20,"fix":"504"},{"ruleId":"497","severity":1,"message":"498","line":3075,"column":19,"nodeType":"452","messageId":"499","endLine":3079,"endColumn":20,"fix":"505"},{"ruleId":"450","severity":1,"message":"451","line":3095,"column":23,"nodeType":"452","endLine":3100,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3107,"column":23,"nodeType":"452","endLine":3112,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3119,"column":23,"nodeType":"452","endLine":3124,"endColumn":25},{"ruleId":"497","severity":1,"message":"498","line":3133,"column":19,"nodeType":"452","messageId":"499","endLine":3137,"endColumn":20,"fix":"506"},{"ruleId":"497","severity":1,"message":"498","line":3140,"column":19,"nodeType":"452","messageId":"499","endLine":3144,"endColumn":20,"fix":"507"},{"ruleId":"450","severity":1,"message":"451","line":3160,"column":23,"nodeType":"452","endLine":3165,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3172,"column":23,"nodeType":"452","endLine":3177,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3184,"column":23,"nodeType":"452","endLine":3189,"endColumn":25},{"ruleId":"497","severity":1,"message":"498","line":3198,"column":19,"nodeType":"452","messageId":"499","endLine":3202,"endColumn":20,"fix":"508"},{"ruleId":"497","severity":1,"message":"498","line":3205,"column":19,"nodeType":"452","messageId":"499","endLine":3209,"endColumn":20,"fix":"509"},{"ruleId":"446","severity":1,"message":"510","line":2,"column":10,"nodeType":"448","messageId":"449","endLine":2,"endColumn":19},{"ruleId":"446","severity":1,"message":"470","line":2,"column":35,"nodeType":"448","messageId":"449","endLine":2,"endColumn":40},{"ruleId":"446","severity":1,"message":"478","line":6,"column":8,"nodeType":"448","messageId":"449","endLine":6,"endColumn":13},{"ruleId":"446","severity":1,"message":"479","line":9,"column":8,"nodeType":"448","messageId":"449","endLine":9,"endColumn":13},{"ruleId":"480","severity":1,"message":"481","line":22,"column":1,"nodeType":"482","endLine":1211,"endColumn":3},{"ruleId":"485","severity":1,"message":"486","line":392,"column":17,"nodeType":"487","messageId":"488","endLine":392,"endColumn":24},{"ruleId":"485","severity":1,"message":"486","line":395,"column":17,"nodeType":"487","messageId":"488","endLine":395,"endColumn":24},{"ruleId":"489","severity":1,"message":"490","line":408,"column":8,"nodeType":"491","endLine":408,"endColumn":20,"suggestions":"511"},{"ruleId":"489","severity":1,"message":"493","line":449,"column":8,"nodeType":"491","endLine":449,"endColumn":22,"suggestions":"512"},{"ruleId":"489","severity":1,"message":"513","line":486,"column":8,"nodeType":"491","endLine":486,"endColumn":10,"suggestions":"514"},{"ruleId":"450","severity":1,"message":"451","line":993,"column":37,"nodeType":"452","endLine":993,"endColumn":128},{"ruleId":"450","severity":1,"message":"451","line":1001,"column":37,"nodeType":"452","endLine":1001,"endColumn":128},{"ruleId":"450","severity":1,"message":"451","line":1008,"column":37,"nodeType":"452","endLine":1008,"endColumn":130},{"ruleId":"497","severity":1,"message":"498","line":1016,"column":29,"nodeType":"452","messageId":"499","endLine":1016,"endColumn":98,"fix":"515"},{"ruleId":"497","severity":1,"message":"498","line":1020,"column":29,"nodeType":"452","messageId":"499","endLine":1020,"endColumn":98,"fix":"516"},{"ruleId":"450","severity":1,"message":"451","line":1035,"column":45,"nodeType":"452","endLine":1035,"endColumn":136},{"ruleId":"450","severity":1,"message":"451","line":1043,"column":45,"nodeType":"452","endLine":1043,"endColumn":136},{"ruleId":"450","severity":1,"message":"451","line":1050,"column":45,"nodeType":"452","endLine":1050,"endColumn":138},{"ruleId":"497","severity":1,"message":"498","line":1059,"column":37,"nodeType":"452","messageId":"499","endLine":1059,"endColumn":106,"fix":"517"},{"ruleId":"497","severity":1,"message":"498","line":1063,"column":37,"nodeType":"452","messageId":"499","endLine":1063,"endColumn":106,"fix":"518"},{"ruleId":"450","severity":1,"message":"451","line":1081,"column":45,"nodeType":"452","endLine":1081,"endColumn":136},{"ruleId":"450","severity":1,"message":"451","line":1089,"column":45,"nodeType":"452","endLine":1089,"endColumn":136},{"ruleId":"450","severity":1,"message":"451","line":1096,"column":45,"nodeType":"452","endLine":1096,"endColumn":138},{"ruleId":"497","severity":1,"message":"498","line":1105,"column":37,"nodeType":"452","messageId":"499","endLine":1105,"endColumn":106,"fix":"519"},{"ruleId":"497","severity":1,"message":"498","line":1109,"column":37,"nodeType":"452","messageId":"499","endLine":1109,"endColumn":106,"fix":"520"},{"ruleId":"450","severity":1,"message":"451","line":1126,"column":45,"nodeType":"452","endLine":1126,"endColumn":136},{"ruleId":"450","severity":1,"message":"451","line":1134,"column":45,"nodeType":"452","endLine":1134,"endColumn":136},{"ruleId":"450","severity":1,"message":"451","line":1141,"column":45,"nodeType":"452","endLine":1141,"endColumn":138},{"ruleId":"497","severity":1,"message":"498","line":1150,"column":37,"nodeType":"452","messageId":"499","endLine":1150,"endColumn":106,"fix":"521"},{"ruleId":"497","severity":1,"message":"498","line":1154,"column":37,"nodeType":"452","messageId":"499","endLine":1154,"endColumn":106,"fix":"522"},{"ruleId":"450","severity":1,"message":"451","line":1171,"column":45,"nodeType":"452","endLine":1171,"endColumn":136},{"ruleId":"450","severity":1,"message":"451","line":1179,"column":45,"nodeType":"452","endLine":1179,"endColumn":136},{"ruleId":"450","severity":1,"message":"451","line":1186,"column":45,"nodeType":"452","endLine":1186,"endColumn":138},{"ruleId":"497","severity":1,"message":"498","line":1195,"column":37,"nodeType":"452","messageId":"499","endLine":1195,"endColumn":106,"fix":"523"},{"ruleId":"497","severity":1,"message":"498","line":1199,"column":37,"nodeType":"452","messageId":"499","endLine":1199,"endColumn":106,"fix":"524"},{"ruleId":"446","severity":1,"message":"510","line":2,"column":10,"nodeType":"448","messageId":"449","endLine":2,"endColumn":19},{"ruleId":"446","severity":1,"message":"470","line":2,"column":35,"nodeType":"448","messageId":"449","endLine":2,"endColumn":40},{"ruleId":"480","severity":1,"message":"481","line":23,"column":1,"nodeType":"482","endLine":3198,"endColumn":3},{"ruleId":"446","severity":1,"message":"483","line":44,"column":10,"nodeType":"448","messageId":"449","endLine":44,"endColumn":21},{"ruleId":"446","severity":1,"message":"484","line":54,"column":10,"nodeType":"448","messageId":"449","endLine":54,"endColumn":15},{"ruleId":"485","severity":1,"message":"486","line":559,"column":9,"nodeType":"487","messageId":"488","endLine":559,"endColumn":16},{"ruleId":"485","severity":1,"message":"486","line":561,"column":9,"nodeType":"487","messageId":"488","endLine":561,"endColumn":16},{"ruleId":"489","severity":1,"message":"490","line":572,"column":6,"nodeType":"491","endLine":572,"endColumn":18,"suggestions":"525"},{"ruleId":"489","severity":1,"message":"493","line":608,"column":6,"nodeType":"491","endLine":608,"endColumn":20,"suggestions":"526"},{"ruleId":"489","severity":1,"message":"495","line":651,"column":6,"nodeType":"491","endLine":651,"endColumn":8,"suggestions":"527"},{"ruleId":"450","severity":1,"message":"451","line":686,"column":25,"nodeType":"452","endLine":690,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":699,"column":25,"nodeType":"452","endLine":699,"endColumn":75},{"ruleId":"450","severity":1,"message":"451","line":760,"column":23,"nodeType":"452","endLine":764,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":774,"column":23,"nodeType":"452","endLine":774,"endColumn":74},{"ruleId":"450","severity":1,"message":"451","line":842,"column":23,"nodeType":"452","endLine":846,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":856,"column":23,"nodeType":"452","endLine":856,"endColumn":74},{"ruleId":"450","severity":1,"message":"451","line":998,"column":23,"nodeType":"452","endLine":998,"endColumn":74},{"ruleId":"450","severity":1,"message":"451","line":1140,"column":23,"nodeType":"452","endLine":1140,"endColumn":74},{"ruleId":"450","severity":1,"message":"451","line":2587,"column":21,"nodeType":"452","endLine":2591,"endColumn":23},{"ruleId":"450","severity":1,"message":"451","line":2789,"column":25,"nodeType":"452","endLine":2793,"endColumn":27},{"ruleId":"450","severity":1,"message":"451","line":2881,"column":19,"nodeType":"452","endLine":2886,"endColumn":21},{"ruleId":"450","severity":1,"message":"451","line":2893,"column":19,"nodeType":"452","endLine":2898,"endColumn":21},{"ruleId":"450","severity":1,"message":"451","line":2905,"column":19,"nodeType":"452","endLine":2910,"endColumn":21},{"ruleId":"497","severity":1,"message":"498","line":2918,"column":15,"nodeType":"452","messageId":"499","endLine":2922,"endColumn":16,"fix":"528"},{"ruleId":"497","severity":1,"message":"498","line":2925,"column":15,"nodeType":"452","messageId":"499","endLine":2929,"endColumn":16,"fix":"529"},{"ruleId":"450","severity":1,"message":"451","line":2943,"column":23,"nodeType":"452","endLine":2948,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":2955,"column":23,"nodeType":"452","endLine":2960,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":2967,"column":23,"nodeType":"452","endLine":2972,"endColumn":25},{"ruleId":"497","severity":1,"message":"498","line":2981,"column":19,"nodeType":"452","messageId":"499","endLine":2985,"endColumn":20,"fix":"530"},{"ruleId":"497","severity":1,"message":"498","line":2988,"column":19,"nodeType":"452","messageId":"499","endLine":2992,"endColumn":20,"fix":"531"},{"ruleId":"450","severity":1,"message":"451","line":3008,"column":23,"nodeType":"452","endLine":3013,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3020,"column":23,"nodeType":"452","endLine":3025,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3032,"column":23,"nodeType":"452","endLine":3037,"endColumn":25},{"ruleId":"497","severity":1,"message":"498","line":3046,"column":19,"nodeType":"452","messageId":"499","endLine":3050,"endColumn":20,"fix":"532"},{"ruleId":"497","severity":1,"message":"498","line":3053,"column":19,"nodeType":"452","messageId":"499","endLine":3057,"endColumn":20,"fix":"533"},{"ruleId":"450","severity":1,"message":"451","line":3073,"column":23,"nodeType":"452","endLine":3078,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3085,"column":23,"nodeType":"452","endLine":3090,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3097,"column":23,"nodeType":"452","endLine":3102,"endColumn":25},{"ruleId":"497","severity":1,"message":"498","line":3111,"column":19,"nodeType":"452","messageId":"499","endLine":3115,"endColumn":20,"fix":"534"},{"ruleId":"497","severity":1,"message":"498","line":3118,"column":19,"nodeType":"452","messageId":"499","endLine":3122,"endColumn":20,"fix":"535"},{"ruleId":"450","severity":1,"message":"451","line":3138,"column":23,"nodeType":"452","endLine":3143,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3150,"column":23,"nodeType":"452","endLine":3155,"endColumn":25},{"ruleId":"450","severity":1,"message":"451","line":3162,"column":23,"nodeType":"452","endLine":3167,"endColumn":25},{"ruleId":"497","severity":1,"message":"498","line":3176,"column":19,"nodeType":"452","messageId":"499","endLine":3180,"endColumn":20,"fix":"536"},{"ruleId":"497","severity":1,"message":"498","line":3183,"column":19,"nodeType":"452","messageId":"499","endLine":3187,"endColumn":20,"fix":"537"},{"ruleId":"466","severity":1,"message":"538","line":205,"column":25,"nodeType":"468","messageId":"456","endLine":205,"endColumn":27},{"ruleId":"539","severity":1,"message":"540","line":232,"column":7,"nodeType":"541","messageId":"542","endLine":234,"endColumn":8},{"ruleId":"539","severity":1,"message":"543","line":4,"column":1,"nodeType":"541","messageId":"544","endLine":7,"endColumn":2},"no-unused-vars","'LEFT' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-dupe-keys","Duplicate key 'top'.","ObjectExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-whitespace-before-property","Unexpected whitespace before property current.","MemberExpression","unexpectedWhitespace",{"range":"545","text":"546"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Modal' is defined but never used.","'Label' is defined but never used.",{"range":"547","text":"546"},"'Button' is defined but never used.","'Sign' is defined but never used.","'data' is assigned a value but never used.","'Router' is defined but never used.","'json' is assigned a value but never used.",{"range":"548","text":"546"},"'Image' is defined but never used.","'Media' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'profile_pic' is assigned a value but never used.","'email' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'qr'. Either include it or remove the dependency array.","ArrayExpression",["549"],"React Hook useEffect has an unnecessary dependency: 'kapu.current'. Either exclude it or remove the dependency array. Mutable values like 'kapu.current' aren't valid dependencies because mutating them doesn't re-render the component.",["550"],"React Hook useEffect has missing dependencies: 'amount', 'fetchSomeData', and 'hasDefaultProfile'. Either include them or remove the dependency array.",["551"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"552","text":"553"},{"range":"554","text":"553"},{"range":"555","text":"553"},{"range":"556","text":"553"},{"range":"557","text":"553"},{"range":"558","text":"553"},{"range":"559","text":"553"},{"range":"560","text":"553"},{"range":"561","text":"553"},{"range":"562","text":"553"},"'Container' is defined but never used.",["563"],["564"],"React Hook useEffect has missing dependencies: 'amount' and 'fetchSomeData'. Either include them or remove the dependency array.",["565"],{"range":"566","text":"553"},{"range":"567","text":"553"},{"range":"568","text":"553"},{"range":"569","text":"553"},{"range":"570","text":"553"},{"range":"571","text":"553"},{"range":"572","text":"553"},{"range":"573","text":"553"},{"range":"574","text":"553"},{"range":"575","text":"553"},["576"],["577"],["578"],{"range":"579","text":"553"},{"range":"580","text":"553"},{"range":"581","text":"553"},{"range":"582","text":"553"},{"range":"583","text":"553"},{"range":"584","text":"553"},{"range":"585","text":"553"},{"range":"586","text":"553"},{"range":"587","text":"553"},{"range":"588","text":"553"},"Expected '!==' and instead saw '!='.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Block is redundant.","redundantBlock",[5857,5859],".",[7426,7428],[5856,5858],{"desc":"589","fix":"590"},{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},[117970,117970]," rel=\"noreferrer\"",[118190,118190],[120169,120169],[120417,120417],[122461,122461],[122709,122709],[124754,124754],[125002,125002],[127031,127031],[127279,127279],{"desc":"589","fix":"595"},{"desc":"591","fix":"596"},{"desc":"597","fix":"598"},[53738,53738],[53940,53940],[56165,56165],[56391,56391],[58728,58728],[58954,58954],[61275,61275],[61501,61501],[63806,63806],[64032,64032],{"desc":"589","fix":"599"},{"desc":"591","fix":"600"},{"desc":"593","fix":"601"},[113166,113166],[113386,113386],[115365,115365],[115613,115613],[117657,117657],[117905,117905],[119950,119950],[120198,120198],[122227,122227],[122475,122475],"Update the dependencies array to be: [qr, searchTerm]",{"range":"602","text":"603"},"Update the dependencies array to be: []",{"range":"604","text":"605"},"Update the dependencies array to be: [amount, fetchSomeData, hasDefaultProfile]",{"range":"606","text":"607"},{"range":"608","text":"603"},{"range":"609","text":"605"},"Update the dependencies array to be: [amount, fetchSomeData]",{"range":"610","text":"611"},{"range":"612","text":"603"},{"range":"613","text":"605"},{"range":"614","text":"607"},[18754,18766],"[qr, searchTerm]",[20306,20320],"[]",[21670,21672],"[amount, fetchSomeData, hasDefaultProfile]",[15303,15315],[17062,17076],[18393,18395],"[amount, fetchSomeData]",[18790,18802],[20342,20356],[21706,21708]]